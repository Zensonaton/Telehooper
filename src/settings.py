# coding: utf-8

from typing import Any, cast
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from case_insensitive_dict import CaseInsensitiveDict
from loguru import logger


SETTING_EMOJI = "‚öôÔ∏è"
OPEN_FOLDER_EMOJI = "üìÇ"
CLOSED_FOLDER_EMOJI = "üìÅ"
BOX_CHAR_CONNECTED = " ‚îú‚îÄ "
BOX_CHAR_CLOSING  = " ‚îî‚îÄ "

SETTINGS_TREE = {
	"Visual": {
		"Name": "–í–∏–∑—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",

		"UsePinInDialogues": {
			"Name": "–ó–∞–∫—Ä–µ–ø —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º",
			"Documentation": (
				"–£–∫–∞–∑—ã–≤–∞–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ Telehooper —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–∞—Ö Telegram, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
				"  ‚Ä¢ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ¬´–æ–Ω–ª–∞–π–Ω¬ª,\n"
				"  ‚Ä¢ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,\n"
				"  ‚Ä¢ —Å—Ç–∞—Ç—É—Å ¬´–ø—Ä–æ—á–∏—Ç–∞–Ω–æ¬ª —É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
				"\n"
				"–¢–∞–∫ –∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É <i>‚öôÔ∏è –°–º–µ—â–µ–Ω–∏–µ —Å–ª–æ–≤ –≤ –∑–∞–∫—Ä–µ–ø–µ</i> (<code>/s Visual.PinCharDistance</code>) –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ –≤ —ç—Ç–æ–º –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
			),
			"Default": True
		},
		"PinOrderReversed": {
			"Name": "–ü–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –≤ –∑–∞–∫—Ä–µ–ø–µ",
			"Documentation": (
                "–ü—Ä–∏ –≤–∫–ª—é—á—ë–Ω–Ω–æ–π –æ–ø—Ü–∏–∏ <i>‚öôÔ∏è –ó–∞–∫—Ä–µ–ø —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º</i> (<code>/s Visual.UsePinInDialogues</code>), —É–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –±–æ—Ç—É –ø–æ–º–µ–Ω—è—Ç—å –ø–æ—Ä—è–¥–æ–∫ –ø–æ–ª—è —Å—Ç–∞—Ç—É—Å–∞ ¬´–æ–Ω–ª–∞–π–Ω¬ª –∏ –ø–æ–ª—è ¬´–ø—Ä–æ—á–∏—Ç–∞–Ω–æ¬ª –≤ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
				"\n"
				"–£–≤–∏–¥–µ—Ç—å –∫–∞–∫ —ç—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –º–æ–∂–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ."
			),
			"Default": False,
			"DependsOn": [{
				"LookIn": "Visual.UsePinInDialogues",
				"EqualTo": True
			}]
		},
		"PinCharDistance": {
			"Name": "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–ª–æ–≤ –≤ –∑–∞–∫—Ä–µ–ø–µ",
			"Documentation": (
                "–ü—Ä–∏ –≤–∫–ª—é—á—ë–Ω–Ω–æ–π –æ–ø—Ü–∏–∏ <i>‚öôÔ∏è –ó–∞–∫—Ä–µ–ø —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º</i> (<code>/s Visual.UsePinInDialogues</code>), —É–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏, —É–∫–∞–∑—ã–≤–∞—é—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ ¬´–æ–Ω–ª–∞–π–Ω¬ª, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ —Å—Ç–∞—Ç—É—Å ¬´–ø—Ä–æ—á–∏—Ç–∞–Ω–æ¬ª –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
				"\n"
				"–î–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–∂–Ω–∞, –µ—Å–ª–∏ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ –≤–∞—à–µ–º —ç–∫—Ä–∞–Ω–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n"
				"\n"
				"–£–≤–∏–¥–µ—Ç—å –∫–∞–∫ —ç—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –º–æ–∂–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ."
			),
			"ButtonType": "range",
			"Default": 5,
			"Min": 1,
			"Max": 20,
			"DependsOn": [{
				"LookIn": "Visual.UsePinInDialogues",
				"EqualTo": True
			}]
		}
	},

	"Security": {
		"Name": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",

		"StoreTokens": {
			"Name": "–•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ë–î",
			"Documentation": (
                "–£–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –º–æ–∂–µ—Ç –ª–∏ Telehooper —Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ <a href=\"https://dev.vk.com/api/access-token/getting-started\">[–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –í–ö]</a> –≤ –µ–≥–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–æ–∫.\n"
				"\n"
				"–í—ã–∫–ª—é—á–∏–≤ —ç—Ç—É –æ–ø—Ü–∏—é, <b>–í—ã –ø–æ–≤—ã—Å–∏—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤</b> –≤ —Å–ª—É—á–∞–µ –≤–∑–ª–æ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞, –æ–¥–Ω–∞–∫–æ, –ø–æ—Å–ª–µ —Å–≤–æ–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ Telehooper –Ω–µ —Å—É–º–µ–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è <b>–∫–æ –≤—Å–µ–º —Å–µ—Ä–≤–∏—Å–∞–º</b>, —á—Ç–æ –±—ã–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —Ä–∞–Ω–µ–µ, –∏ –ø–æ—ç—Ç–æ–º—É –í–∞–º –ø—Ä–∏–¥—ë—Ç—Å—è —Å–Ω–æ–≤–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n"
				"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –ø–æ–º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."
			),
			"Default": True
		},
		"MediaCache": {
			"Name": "–ö—ç—à –º–µ–¥–∏–∞",
			"Documentation": (
                "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ Telehooper —Ö—Ä–∞–Ω–∏—Ç—å ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏/–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –º–µ–¥–∏–∞ —Å —Ç–∏–ø–∞–º–∏, –æ–ø–∏—Å–∞–Ω–Ω—ã–º–∏ –Ω–∏–∂–µ, —Å —Ü–µ–ª—å—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è, —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.\n"
				"–ö—ç—à–∏—Ä—É–µ–º—ã–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞:\n"
				"  ‚Ä¢ –°—Ç–∏–∫–µ—Ä—ã,\n"
				"  ‚Ä¢ GIF-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
                "\n"
				"–û –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –î–∞–∂–µ –ø—Ä–∏ –≤–∑–ª–æ–º–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–µ–¥–∏–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –º–µ–¥–∏–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∏–∫–µ—Ä–∞, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram, –ø–æ—Å–ª–µ —á–µ–≥–æ —É –±–æ—Ç–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π: <code>FileID</code> (Telegram) –∏ <code>attachment</code> (–í–ö–æ–Ω—Ç–∞–∫—Ç–µ). –ë–æ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î SHA-256 —Ö—ç—à FileID –∫–∞–∫ –∫–ª—é—á, –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π attachment, –∏—Å–ø–æ–ª—å–∑—É—è FileID –∫–∞–∫ –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è."
			),
			"Default": True
		}
	},

	"Services": {
		"Name": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤",

		"MarkAsReadButton": {
			"Name": "–ö–Ω–æ–ø–∫–∞ ¬´–ø—Ä–æ—á–∏—Ç–∞—Ç—å¬ª",
			"Documentation": (
                "–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ—á–∏—Ç–∞—Ç—å¬ª –≤–æ–∑–ª–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º –¥–∏–∞–ª–æ–≥–∞. –î–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–¥ —Å–∞–º—ã–º ¬´–ø–æ—Å–ª–µ–¥–Ω–∏–º¬ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏ –æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏. –î–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–∫–æ–µ –∂–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–∞–∫ –∏ –∫–æ–º–∞–Ω–¥–∞ <code>/read</code>, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Å–µ—Ä–≤–∏—Å —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç.\n"
				"\n"
				"–¢–∞–∫ –∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–µ–ª–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É <i>‚öôÔ∏è –ó–∞–∫—Ä–µ–ø —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º</i> (<code>/s Visual.UsePinInDialogues</code>), –≤–µ–¥—å –≤ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, –±—ã–ª–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ç."
			),
			"Default": True
		},
		"WaitToType": {
			"Name": "–ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è ¬´–ø–µ—á–∞—Ç–∏¬ª",
			"Documentation": (
                "–í–∫–ª—é—á–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤ 500 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Ä–≤–∏—Å—ã. –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ —Å–µ—Ä–≤–∏—Å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É –æ—Ç–º–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ ¬´–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ¬ª, –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∞–Ω–∏–º–∞—Ü–∏—è ¬´–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—á–∞—Ç–∞–µ—Ç¬ª.\n"
				"\n"
				"–û—Ç–∫–ª—é—á–∞—è –¥–∞–Ω–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –æ–¥–Ω–∞–∫–æ –∞–Ω–∏–º–∞—Ü–∏–∏ ¬´–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—á–∞—Ç–∞–µ—Ç¬ª –Ω–µ –±—É–¥–µ—Ç."
			),
			"Default": False
		},
		"SetOnline": {
			"Name": "–°—Ç–∞—Ç—É—Å ¬´–æ–Ω–ª–∞–π–Ω¬ª",
			"Documentation": (
				"–í–∫–ª—é—á–∏–≤ —ç—Ç—É –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –í—ã –ø–æ–∑–≤–æ–ª–∏—Ç–µ Telehooper —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å ¬´–æ–Ω–ª–∞–π–Ω¬ª –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞.\n"
				"\n"
				"–ë–æ—Ç—ã –≤ Telegram –Ω–µ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç—É—Å—É ¬´–æ–Ω–ª–∞–π–Ω¬ª –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ—ç—Ç–æ–º—É –í—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å ¬´–Ω–µ–≤–∏–¥–∏–º—ã–º–∏¬ª, –µ—Å–ª–∏ —ç—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞."
			),
			"Default": True
		},
		"ViaServiceMessages": {
			"Name": "–ü–æ–∫–∞–∑ –í–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
			"Documentation": (
				"–£–∫–∞–∑—ã–≤–∞–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ Telehooper –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –í–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ä–≤–∏—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∏ —ç—Ç–æ–º –ø—Ä–µ—Ñ–∏–∫—Å ¬´–í—ã¬ª."
			),
			"Default": True
		}
	}
}

class SettingsHandler:
	"""
	–ö–ª–∞—Å—Å-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
	"""

	settings: dict

	def __init__(self, settings: dict) -> None:
		self.settings = settings

		self.integrity_check()
		self.fill_tree_fields()

	def integrity_check(self) -> None:
		"""
		–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –¥—Ä–µ–≤–µ.
		"""

		SETTINGS_KEYS = {
			"Name": str,
			"Documentation": str,
			"Default": None
		}

		def _check(check: dict) -> None:
			# TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è DependsOn.

			for name, value in check.items():
				if type(value) != dict:
					continue

				is_value = "Documentation" in value

				if is_value:
					for name, key_type in SETTINGS_KEYS.items():
						if name not in value:
							raise ValueError(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {name} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–≤–æ–π—Å—Ç–≤–æ {name}.")

						if key_type and type(value[name]) != key_type:
							raise ValueError(f"–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è {key_type}.")
				else:
					_check(value)

		_check(self.settings)

	def fill_tree_fields(self) -> None:
		"""
		–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è –≤ –¥—Ä–µ–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º–∏.

		Root-–æ–±—ä–µ–∫—Ç:
		 1. `Paths` ‚Äî –ª–∏—Å—Ç –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –¥—Ä–µ–≤–µ.

		–í—Å–µ –æ–±—ä–µ–∫—Ç—ã:
		 1. `IsValue` ‚Äî —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º (True) –∏–ª–∏ –ø–∞–ø–∫–æ–π (False),
		 2. `IsFolder` ‚Äî —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–ø–∫–æ–π (True) –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º (False),
		 3. `ParentPath` ‚Äî –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–µ,
		 4. `Path` ‚Äî –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ.
		 5. `PathSplitted` ‚Äî —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–π –ø–æ —Ç–æ—á–∫–∞–º.

		–ù–∞—Å—Ç—Ä–æ–π–∫–∏ (`IsValue`):
		 1. `DependsOn` ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª)
		 2. `ButtonType` ‚Äî —Ç–∏–ø –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª; —Ç–∏–ø –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏–∑ –ø–æ–ª—è `Default`)
		"""

		known_paths = []
		def _fill_fields(setting: dict, path: str = "") -> None:
			items = setting.copy().items()

			for key, value in items:
				if type(value) != dict:
					continue

				is_value = "Documentation" in value
				is_folder = not is_value
				new_path = f"{path}.{key}" if path else key

				logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {'–ø–∞–ø–∫—É' if is_folder else '–Ω–∞—Å—Ç—Ä–æ–π–∫—É'} {new_path}.")

				value["IsValue"] = is_value
				value["IsFolder"] = is_folder
				value["ParentPath"] = path
				value["Path"] = new_path
				value["PathSplitted"] = new_path.split(".")

				if is_value:
					if "DependsOn" not in value:
						value["DependsOn"] = []

					if "ButtonType" not in value:
						if type(value["Default"]) != bool:
							raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–Ω–æ–ø–æ–∫ (ButtonType) –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {new_path}. –ó–Ω–∞—á–µ–Ω–∏–µ Default={value['Default']}.")

						value["ButtonType"] = "bool"

				known_paths.append(new_path)

				_fill_fields(value, new_path)

		# –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–ª—è.
		_fill_fields(self.settings)

		# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—É—Ç–µ–π.
		self.settings["Paths"] = known_paths

	def get_buttons_by_setting_type(self, setting: dict, current_value) -> list[InlineKeyboardButton]:
		"""
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
		"""

		return_list = []
		buttons = {}

		if setting["ButtonType"] == "bool":
			current_value = cast(bool, current_value)

			buttons = {
				f"‚úîÔ∏è –í–∫–ª—é—á–∏—Ç—å": True,
				f"‚úñÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å": False
			}
		elif setting["ButtonType"] == "range":
			current_value = cast(int, current_value)
			step = setting.get("Step", 1)

			buttons = {
				"‚è™": setting["Min"],
				"‚óÄÔ∏è": None if current_value - step < setting["Min"] else current_value - step,
				str(current_value): None,
				"‚ñ∂Ô∏è": None if current_value + step > setting["Max"] else current_value + step,
				"‚è©": setting["Max"]
			}
		else:
			raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {setting['Path']}.")

		for text, value in buttons.items():
			callback_data = value
			is_equal = value == current_value

			if is_equal:
				callback_data = None

			return_list.append(
				InlineKeyboardButton(
					text=text.upper() if is_equal else text,
					callback_data="do-nothing" if callback_data == None else f"/settings set {setting['Path']} {callback_data}"
				)
			)

		return return_list

	def get_keyboard(self, path: str | None = None, user_settings: dict | None = None) -> InlineKeyboardMarkup:
		"""
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥—Ä–µ–≤–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏ `path` (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω).
		"""

		keyboard_buttons = []

		if path is None:
			path = ""

		if user_settings is None:
			user_settings = {}

		path_splitted = path.split(".")
		if path_splitted[-1] == "":
			path_splitted = path_splitted[:-1]

		parent = ".".join(path_splitted[:-1])
		level = len(path_splitted)

		setting = self.settings
		settings_caseins = CaseInsensitiveDict(setting)

		for part in path_splitted:
			if not part:
				break

			lower_part = part.lower()

			if lower_part not in settings_caseins:
				break

			setting = settings_caseins[part]
			settings_caseins = CaseInsensitiveDict(setting)

		if setting.get("IsValue"):
			keyboard_buttons.append(
				self.get_buttons_by_setting_type(setting, user_settings.get(path, setting["Default"]))
			)
		else:
			for value in setting.values():
				if not isinstance(value, dict):
					continue

				if not "Name" in value:
					continue

				keyboard_buttons.append([
					InlineKeyboardButton(
						text=f"{CLOSED_FOLDER_EMOJI if value['IsFolder'] else SETTING_EMOJI} {value['Name']}",
						callback_data=f"/settings {value['Path']}"
					)
				])

		upper_keyboard = [InlineKeyboardButton(text="„Ö§", callback_data="do-nothing")]

		if level >= 1:
			upper_keyboard = [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"/settings {parent}")]

		if level >= 2:
			upper_keyboard.append(InlineKeyboardButton(text="üîù –í –Ω–∞—á–∞–ª–æ", callback_data="/settings"))

		return InlineKeyboardMarkup(
			inline_keyboard=[
				upper_keyboard,

				*keyboard_buttons
			]
		)

	def render_tree(self, path: str | None = None) -> str:
		"""
		–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –≤—ã–≥–ª—è–¥—è—â–µ–µ –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ `tree` –≤ Windows.
		"""

		def _render(path: list[str], level: int, settings_dict: dict) -> str:
			working_str = ""
			late_append_str = ""

			real_settings_dict = [value for key, value in settings_dict.items() if isinstance(value, dict) and "Name" in value]

			# –ü–µ—Ä–µ–º–µ—â–∞–µ–º "–≤—ã–±—Ä–∞–Ω–Ω—ã–π" –≤–∞—Ä–∏–∞–Ω—Ç –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞.
			for index, setting in enumerate(real_settings_dict):
				if level < len(path) and level < len(setting["PathSplitted"]) and path[level].lower() == setting["PathSplitted"][level].lower():
					real_settings_dict.append(real_settings_dict.pop(index))

					break

			# –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º.
			for index, setting in enumerate(real_settings_dict):
				is_selected = level < len(path) and level < len(setting["PathSplitted"]) and path[level].lower() == setting["PathSplitted"][level].lower()
				is_folder = setting["IsFolder"]
				is_last = index == len(real_settings_dict) - 1

				if is_folder:
					leaf_str = f"<code>{' ' * (level * 3)}{BOX_CHAR_CLOSING if is_last else BOX_CHAR_CONNECTED}{OPEN_FOLDER_EMOJI if is_selected else CLOSED_FOLDER_EMOJI}</code> {'<b>' if is_selected else ''}{setting['Name']}{'</b>:' if is_selected else ''}\n"
				else:
					leaf_str = f"<code>{' ' * (level * 3)}{BOX_CHAR_CLOSING if is_last else BOX_CHAR_CONNECTED}{SETTING_EMOJI}</code> {'<b>' if is_selected else ''}{setting['Name']}{'</b> ‚óÄÔ∏è' if is_selected else ''}\n"

				if is_selected:
					late_append_str += leaf_str + _render(path, level + 1, setting)
				else:
					working_str += leaf_str

			working_str += late_append_str

			return working_str

		if path is None:
			path = ""

		return _render(path.split("."), 0, self.settings)

	def get_setting(self, path: str) -> dict:
		"""
		–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –ø—É—Ç–∏. –ú–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –∫–∞–∫ —Å–∞–º—É –Ω–∞—Å—Ç—Ä–æ–π–∫—É, —Ç–∞–∫ –∏ "–ø–∞–ø–∫—É" —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç `path`.

		–ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ `KeyError`.
		"""

		path_splitted = path.split(".")

		setting = self.settings.copy()
		for part in path_splitted:
			setting = setting[part]

		return setting

	def get_default_setting_value(self, path: str) -> Any:
		"""
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –ø—É—Ç–∏ `path`.

		–ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ `KeyError`.
		"""

		return self.get_setting(path)["Default"]
