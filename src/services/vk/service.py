# coding: utf-8

from __future__ import annotations

import asyncio
from asyncio.exceptions import TimeoutError
from typing import TYPE_CHECKING, Literal, Optional, cast

import aiohttp
import cachetools
import PIL
from aiocouch import Document
from aiogram import Bot
from aiogram.exceptions import (TelegramBadRequest, TelegramForbiddenError,
                                TelegramNetworkError)
from aiogram.types import Audio, BufferedInputFile, CallbackQuery
from aiogram.types import Document as TelegramDocument
from aiogram.types import (InlineKeyboardButton, InlineKeyboardMarkup,
                           InputFile, InputMediaAudio, InputMediaDocument,
                           InputMediaPhoto, InputMediaVideo, Message,
                           PhotoSize, Sticker, Video, VideoNote, Voice)
from aiogram.utils.chat_action import ChatActionSender
from loguru import logger
from pydantic import SecretStr
from pyrate_limiter import Limiter, RequestRate

import utils
from config import config
from consts import MAX_UPLOAD_FILE_SIZE_BYTES
from DB import get_user
from services.service_api_base import (BaseTelehooperServiceAPI,
                                       ServiceDialogue,
                                       ServiceDisconnectReason,
                                       TelehooperServiceUserInfo)
from services.vk.consts import VK_LONGPOLL_GLOBAL_ERRORS_AMOUNT
from services.vk.exceptions import (AccessDeniedException,
                                    TokenRevokedException,
                                    TooManyRequestsException)
from services.vk.utils import (create_message_link, get_attachment_key, get_message_mentions,
                               prepare_sticker)
from services.vk.vk_api.api import VKAPI
from services.vk.vk_api.longpoll import (BaseVKLongpollEvent,
                                         LongpollMessageEditEvent,
                                         LongpollMessageFlagsEdit,
                                         LongpollNewMessageEvent,
                                         LongpollTypingEvent,
                                         LongpollTypingEventMultiple,
                                         LongpollVoiceMessageEvent,
                                         VKAPILongpoll)

if TYPE_CHECKING:
	from api import TelehooperMessage, TelehooperSubGroup, TelehooperUser


class VKServiceAPI(BaseTelehooperServiceAPI):
	"""
	Service API –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. –î–∞–Ω–Ω—ã–π Service API –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–º.
	"""

	token: SecretStr
	"""–¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ."""
	vkAPI: VKAPI
	"""–û–±—ä–µ–∫—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ."""

	_cachedDialogues: list = []
	"""–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤."""
	_longPollTask: asyncio.Task | None = None
	"""–ó–∞–¥–∞—á–∞, –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è longpoll."""
	_cachedUsersInfo: cachetools.TLRUCache[int, TelehooperServiceUserInfo] # 80 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, 5 –º–∏–Ω—É—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è.
	"""–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è."""
	_globalErrorAmount: int
	"""–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫. –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫ (—Å–º. `VK_LONGPOLL_GLOBAL_ERRORS_AMOUNT`), VK longpoll –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç –±–æ—Ç–∞."""
	_lastOnlineStatus: int = 0
	"""UNIX-timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ `Services.VK.SetOnline`."""
	_autoReadChats: dict[int, asyncio.Task]
	"""–°–ª–æ–≤–∞—Ä—å, —Ö—Ä–∞–Ω—è—â–∏–π asyncio.Task –¥–ª—è '–ø—Ä–æ—á–∏—Ç—ã–≤–∞–Ω–∏—è' —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ `Services.VK.AutoRead`."""

	def __init__(self, token: SecretStr, vk_user_id: int, user: "TelehooperUser", limiter: Limiter = Limiter(RequestRate(2, 1), RequestRate(20, 60))) -> None:
		super().__init__("VK", vk_user_id, user)

		self.token = token
		self.user = user

		self.vkAPI = VKAPI(self.token)

		self.limiter = limiter
		self._cachedUsersInfo = cachetools.TLRUCache(maxsize=80, ttu=lambda _, value, now: now + 5 * 60)
		self._globalErrorAmount = 0
		self._autoReadChats = {}

	async def start_listening(self, bot: Bot | None = None) -> asyncio.Task:
		async def handle_updates() -> None:
			while self._globalErrorAmount < VK_LONGPOLL_GLOBAL_ERRORS_AMOUNT:
				try:
					longpoll = VKAPILongpoll(self.vkAPI, user_id=self.service_user_id)

					async for event in longpoll.listen_for_updates():
						await self.handle_longpoll_update(event)
				except TokenRevokedException as e:
					# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞.
					if bot:
						try:
							await bot.send_message(
								chat_id=self.user.telegramUser.id,
								text=(
									"<b>‚ö†Ô∏è –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ</b>.\n"
									"\n"
									"Telehooper –ø–æ—Ç–µ—Ä—è–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π ¬´–í–ö–æ–Ω—Ç–∞–∫—Ç–µ¬ª, –ø–æ—Å–∫–æ–ª—å–∫—É –≤–ª–∞–¥–µ–ª–µ—Ü —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–æ–∑–≤–∞–ª –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–π —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ¬´–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏¬ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã.\n"
									"\n"
									"‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ¬´–í–ö–æ–Ω—Ç–∞–∫—Ç–µ¬ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /connect.\n"
								)
							)
						except:
							pass

					# –°–æ–≤–µ—Ä—à–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ.
					await self.disconnect_service(ServiceDisconnectReason.EXTERNAL)

					break
				except Exception as error:
					self._globalErrorAmount += 1
					threshold_reached = self._globalErrorAmount >= VK_LONGPOLL_GLOBAL_ERRORS_AMOUNT
					logger.exception(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ #{self._globalErrorAmount}/{VK_LONGPOLL_GLOBAL_ERRORS_AMOUNT} –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, —Å–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {utils.get_telegram_logging_info(self.user.telegramUser)}:", error)

					# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞.
					if bot:
						upper_text = (
							"–í–≤–∏–¥—É –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–µ–π –æ—à–∏–±–∫–∏, –∫–∞–∫–æ–µ-—Ç–æ –∏–∑ —Å–æ–±—ã—Ç–∏–π, –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–µ–µ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –º–æ–≥–ª–æ –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–æ. üòï\n"
							"\n"
							f"–£—á—Ç–∏—Ç–µ, –±–æ—Ç –±—É–¥–µ—Ç –≤—ã–Ω—É–∂–¥–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Å–æ–µ–¥–∏–Ω–∏—Ç—å –í–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç —Å–µ–±—è –µ—Å–ª–∏ –ø–æ–¥–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –µ—â—ë {VK_LONGPOLL_GLOBAL_ERRORS_AMOUNT - self._globalErrorAmount + 1} —Ä–∞–∑(-–∞)."
						)
						if threshold_reached:
							upper_text = (
								f"–ü–æ—Å–∫–æ–ª—å–∫—É Telehooper —É–∂–µ {VK_LONGPOLL_GLOBAL_ERRORS_AMOUNT} —Ä–∞–∑(-–∞) —Å—Ç–∞–ª–∫–∏–≤–∞—Å—è —Å –æ—à–∏–±–∫–∞–º–∏, –±–æ—Ç –±—É–¥–µ—Ç –≤—ã–Ω—É–∂–¥–µ–Ω –æ—Ç—Å–æ–µ–¥–∏–Ω–∏—Ç—å –í–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –æ—Ç —Å–µ–±—è —Å —Ü–µ–ª—å—é –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.\n"
								"\n"
								"<b>‚ö†Ô∏è –í—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–æ—Ç–µ Telehooper</b> –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–≤–æ—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–Ω–æ–≤–∞."
							)

						try:
							await bot.send_message(
								chat_id=self.user.telegramUser.id,
								text=(
									"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ</b>.\n"
									"\n"
									"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ Telehooper —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å —Å–µ—Ä—å—ë–∑–Ω–æ–π –æ—à–∏–±–∫–æ–π –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å ¬´–í–ö–æ–Ω—Ç–∞–∫—Ç–µ¬ª.\n"
									f"{upper_text}\n"
									"\n"
									"<b>–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –í–∞—Å –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å</b>:\n"
									f"<code>{error.__class__.__name__}: {error}</code>.\n"
									"\n"
									f"‚ÑπÔ∏è –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â–∏ –ª–∏–±–æ —Å–æ–∑–¥–∞—Ç—å –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç (Github Issue), –ø–æ —Å—Å—ã–ª–∫–µ –≤ –∫–æ–º–∞–Ω–¥–µ <a href=\"{utils.create_command_url('/h 6')}\">/help</a>."

								)
							)
						except:
							pass

			# –ï—Å–ª–∏ –±—ã–ª–æ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫, —Ç–æ –¥–µ–ª–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
			if self._globalErrorAmount >= VK_LONGPOLL_GLOBAL_ERRORS_AMOUNT:
				logger.warning(f"Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {utils.get_telegram_logging_info(self.user.telegramUser)} –ø—Ä–µ–≤—ã—Å–∏–ª –ø–æ—Ä–æ–≥ –≤ {VK_LONGPOLL_GLOBAL_ERRORS_AMOUNT} –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ VK longpoll, —Å–æ–≤–µ—Ä—à–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

				await self.disconnect_service(ServiceDisconnectReason.ERRORED)

		self._longPollTask = asyncio.create_task(handle_updates())
		return self._longPollTask

	async def handle_longpoll_update(self, event: BaseVKLongpollEvent) -> None:
		"""
		–ú–µ—Ç–æ–¥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π —Å–æ–±—ã—Ç–∏—è VK Longpoll.

		:param event: –°–æ–±—ã—Ç–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å longpoll-—Å–µ—Ä–≤–µ—Ä–∞.
		"""

		logger.debug(f"[VK] –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ {event.__class__.__name__}: {event.event_data}")

		if type(event) is LongpollNewMessageEvent:
			await self.handle_vk_message(event)
		elif type(event) is LongpollTypingEvent or type(event) is LongpollTypingEventMultiple or type(event) is LongpollVoiceMessageEvent:
			await self.handle_vk_typing(event)
		elif type(event) is LongpollMessageEditEvent:
			await self.handle_vk_message_edit(event)
		elif type(event) is LongpollMessageFlagsEdit:
			await self.handle_vk_message_flags_change(event)
		else:
			logger.warning(f"[VK] –ú–µ—Ç–æ–¥ handle_update —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º {event.__class__.__name__}: {event.event_data}")

	async def get_message_prefix(self, event: LongpollNewMessageEvent | LongpollMessageEditEvent, is_outbox: bool, sent_via_bot: bool = False) -> str:
		"""
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ (–∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ) —Å–æ–æ–±—â–µ–Ω–∏—è. –¢–∞–∫–æ–π –ø—Ä–µ—Ñ–∏–∫—Å –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫:
		- `[–í—ã]: `.
		- `[–ò–º—è –§.]`
		"""

		use_compact_names = await self.user.get_setting("Services.VK.CompactNames")
		ignore_outbox_debug = config.debug and await self.user.get_setting("Debug.SentViaBotInform")
		is_convo = event.peer_id > 2e9
		from_self = (not is_convo and is_outbox) or (is_convo and event.from_id and event.from_id == self.service_user_id)

		# –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –õ–°, —Ç–æ –ø—Ä–µ—Ñ–∏–∫—Å –Ω–∏–∫–∞–∫–æ–π –Ω–µ –Ω—É–∂–µ–Ω.
		if not (from_self or is_convo):
			return ""

		msg_prefix = "["

		if from_self:
			msg_prefix += "<b>–í—ã</b>"

			if sent_via_bot and ignore_outbox_debug:
				msg_prefix += " <i>debug-–ø–µ—Ä–µ—Å—ã–ª–∫–∞</i>"
		elif is_convo:
			assert event.from_id, "from_id –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω, —Ö–æ—Ç—è –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å"

			# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.
			sent_user_info = await self.get_user_info(event.from_id)

			msg_prefix += f"<b>{utils.compact_name(sent_user_info.name) if use_compact_names else sent_user_info.name}</b>"

		msg_prefix += "]"

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ï—Å–ª–∏ –¥–∞, —Ç–æ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª ":":
		# [–í—ã]: ...
		if event.text if isinstance(event, LongpollNewMessageEvent) else event.new_text:
			msg_prefix += ": "

		return msg_prefix

	async def handle_vk_message(self, event: LongpollNewMessageEvent) -> None:
		"""
		–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.

		:param event: –°–æ–±—ã—Ç–∏–µ —Ç–∏–ø–∞ `LongpollNewMessageEvent`, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å longpoll-—Å–µ—Ä–≤–µ—Ä–∞.
		"""

		from api import TelehooperAPI


		subgroup = TelehooperAPI.get_subgroup_by_service_dialogue(self.user, ServiceDialogue(service_name=self.service_name, id=event.peer_id))

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
		if not subgroup:
			return

		async def handle_message_events() -> None:
			issuer_name_with_link = None
			issuer_male = True
			victim_name_with_link = None
			victim_male = True

			if event.from_id:
				issuer_info = await self.get_user_info(event.from_id)

				issuer_name_with_link = f"<a href=\"{'m.' if use_mobile_vk else ''}vk.com/id{event.from_id}\">{utils.compact_name(issuer_info.name) if use_compact_names else issuer_info.name}</a>"
				issuer_male = issuer_info.male or False

			if event.source_mid:
				victim_info = await self.get_user_info(event.source_mid)

				victim_name_with_link = f"<a href=\"{'m.' if use_mobile_vk else ''}vk.com/id{event.source_mid}\">{utils.compact_name(victim_info.name) if use_compact_names else victim_info.name}</a>"
				victim_male = victim_info.male or False

			event_action = cast(str, event.source_act)

			# –í–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, —Å–æ–±—ã—Ç–∏–µ "X –≤–µ—Ä–Ω—É–ª—Å—è/–≤—ã—à–µ–ª –∏–∑ –±–µ—Å–µ–¥—ã" —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫
			# "X –ø—Ä–∏–≥–ª–∞—Å–∏–ª/–∏—Å–∫–ª—é—á–∏–ª X –∏–∑ –±–µ—Å–µ–¥—ã", –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å —Ç–∞–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.
			if event.from_id == event.source_mid and event_action in ["chat_invite_user", "chat_kick_user"]:
				event_action = "chat_return" if event_action == "chat_invite_user" else "chat_leave"

			messages = {
				"chat_photo_update": f"{issuer_name_with_link} –æ–±–Ω–æ–≤–∏–ª{'' if issuer_male else '–∞'} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–µ—Å–µ–¥—ã",
				"chat_photo_remove": f"{issuer_name_with_link} —É–¥–∞–ª–∏–ª{'' if issuer_male else '–∞'} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–µ—Å–µ–¥—ã",
				"chat_create": f"{issuer_name_with_link} —Å–æ–∑–¥–∞–ª{'' if issuer_male else '–∞'} –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É: ¬´{event.source_text}¬ª",
				"chat_title_update": f"{issuer_name_with_link} –∏–∑–º–µ–Ω–∏–ª{'' if issuer_male else '–∞'} –∏–º—è –±–µ—Å–µ–¥—ã –Ω–∞ ¬´{event.source_text}¬ª",
				"chat_invite_user": f"{issuer_name_with_link} –¥–æ–±–∞–≤–∏–ª{'' if issuer_male else '–∞'} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {victim_name_with_link}",
				"chat_kick_user": f"{issuer_name_with_link} —É–¥–∞–ª–∏–ª{'' if issuer_male else '–∞'} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {victim_name_with_link} –∏–∑ –±–µ—Å–µ–¥—ã",
				"chat_invite_user_by_link": f"{victim_name_with_link} –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª{'—Å—è' if issuer_male else '–∞—Å—å'} –∫ –±–µ—Å–µ–¥–µ –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É",
				"chat_invite_user_by_message_request": f"{victim_name_with_link} –ø—Ä–∏—Å–æ–¥–µ–Ω–∏–ª{'—Å—è' if issuer_male else '–∞—Å—å'} –∫ –±–µ—Å–µ–¥–µ –∏—Å–ø–æ–ª—å–∑—É—è –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ",
				"chat_pin_message": f"{issuer_name_with_link} –∑–∞–∫—Ä–µ–ø–∏–ª{'' if issuer_male else '–∞'} —Å–æ–æ–±—â–µ–Ω–∏–µ",
				"chat_unpin_message": f"{issuer_name_with_link} –æ—Ç–∫—Ä–µ–ø–∏–ª{'' if issuer_male else '–∞'} –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
				"chat_screenshot": f"{victim_name_with_link} —Å–¥–µ–ª–∞–ª{'' if issuer_male else '–∞'} —Å–∫—Ä–∏–Ω—à–æ—Ç —á–∞—Ç–∞",
				"conversation_style_update": f"{issuer_name_with_link} –æ–±–Ω–æ–≤–∏–ª —Å—Ç–∏–ª—å —á–∞—Ç–∞",
				"chat_leave": f"{issuer_name_with_link} –ø–æ–∫–∏–Ω—É–ª{'' if issuer_male else '–∞'} –±–µ—Å–µ–¥—É",
				"chat_return": f"{issuer_name_with_link} –≤–µ—Ä–Ω—É–ª{'—Å—è' if issuer_male else '–∞—Å—å'} –≤ –±–µ—Å–µ–¥—É",
				# "call_ended": f"{victim_name_with_link} –Ω–∞—á–∞–ª{'' if issuer_male else '–∞'} –≤—ã–∑–æ–≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. –ü—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç—å—Å—è –º–æ–∂–Ω–æ <a href=\"https://vk.com/call/join/{group_chat_join_link}\">–ø–æ —Å—Å—ã–ª–∫–µ</a>"
			}
			message = messages.get(event_action)

			if not message:
				logger.warning(f"[VK] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –±–µ—Å–µ–¥—ã: {event_action}")

				message = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: <code>¬´{event_action}¬ª</code>"

				return

			# –ó–¥–µ—Å—å –º—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ—Å–∫–æ–ª—å–∫—É —Å —Ç–∞–∫–æ–≤—ã–º–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –Ω–µ–ª—å–∑—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.
			await subgroup.send_message_in(f"‚ÑπÔ∏è  <i>{message}</i>", disable_web_preview=True)

			# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–µ—à–∏–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–µ—Å–µ–¥–µ, —Ç–æ –¥–µ–ª–∞–µ–º –∏—Ö.
			if await self.user.get_setting("Services.VK.SyncGroupInfo"):
				if event_action == "chat_title_update":
					assert event.source_text, "–ù–æ–≤–æ–µ –∏–º—è –±–µ—Å–µ–¥—ã –Ω–µ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ"

					title = event.source_text
					if config.debug and await self.user.get_setting("Debug.DebugTitleForDialogues"):
						title = f"[DEBUG] {title}"

					await subgroup.parent.set_title(title)
				elif event_action == "chat_photo_update":
					assert message_extended, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏"

					async with aiohttp.ClientSession() as client:
						async with client.get(message_extended["attachments"][0]["photo"]["sizes"][-1]["url"]) as response:
							assert response.status == 200, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–µ—Å–µ–¥—ã"

							photo_bytes = await response.read()

					await subgroup.parent.set_photo(BufferedInputFile(photo_bytes, filename="VK chat photo.jpg"))
				elif event_action == "chat_photo_remove":
					await subgroup.parent.remove_photo()
				elif event_action in ["chat_pin_message", "chat_unpin_message"]:
					assert event.source_chat_local_id, "ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –Ω–µ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ"

					# –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.
					message_data = (await self.vkAPI.messages_getByConversationMessageId(peer_id=event.peer_id, conversation_message_ids=event.source_chat_local_id))["items"]

					if message_data:
						vk_message_id = message_data[0]["id"]

						telegram_message = await subgroup.service.get_message_by_service_id(self.service_user_id, vk_message_id)
						if not telegram_message:
							return

						if event_action == "chat_pin_message":
							# –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
							try:
								await subgroup.parent.unpin_message()
							except:
								pass

							await subgroup.parent.pin_message(telegram_message.telegram_message_ids[0])
						else:
							await subgroup.parent.unpin_message(telegram_message.telegram_message_ids[0])

		logger.debug(f"[VK] –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º \"{event.text}\", –¥–ª—è –ø–æ–¥–≥—Ä—É–ø–ø—ã \"{subgroup.service_dialogue_name}\"")

		message_url = None
		keyboard = None
		try:
			attachment_media: list[InputMediaAudio | InputMediaDocument | InputMediaPhoto | InputMediaVideo] = []
			attachment_items: list[str] = []
			use_compact_names = await self.user.get_setting("Services.VK.CompactNames")
			use_mobile_vk = await self.user.get_setting("Services.VK.MobileVKURLs")
			message_url = create_message_link(event.peer_id, event.message_id, use_mobile=use_mobile_vk)
			ignore_outbox_debug = config.debug and await self.user.get_setting("Debug.SentViaBotInform")
			is_outbox = event.flags.outbox
			is_inbox = not is_outbox
			is_group = event.peer_id < 0
			is_convo = event.peer_id > 2e9
			is_user = not is_group and not is_convo
			is_bot = (event.from_id or 0) < 0
			from_self = (not is_convo and is_outbox) or (is_convo and event.from_id and event.from_id == self.service_user_id)
			message_text_stripped = event.text.lower().strip()

			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –±–æ—Ç—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
			if is_outbox and not (ignore_outbox_debug or await self.user.get_setting("Services.VK.ViaServiceMessages")):
				return

			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.
			# –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
			#
			# –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—á–µ–Ω—å –∑–∞–±–∞–≤–Ω–∞—è –≤–µ—â—å:
			# –ù–∞ –º–æ—ë–º –ª–∏—á–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ, –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç Longpoll-—Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ä–∞–Ω–µ–µ
			# –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API –∑–∞–ø—Ä–æ—Å–∞ messages.send —Å ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
			#
			# –í—ã–≥–ª—è–¥–∏—Ç —ç—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:
			# [messages.send req] <...> [longpoll new msg event] <...> [messages.send response]
			#
			# –í–≤–∏–¥—É —ç—Ç–æ–≥–æ, –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∏ –¥—É–º–∞–µ—Ç, —á—Ç–æ –æ–Ω–æ –Ω–µ –±—ã–ª–æ
			# –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ (–ø–æ—Å–∫–æ–ª—å–∫—É ID —Å–æ–æ–±—â–µ–Ω–∏—è –µ—â—ë –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω).
			#
			# –ß—Ç–æ –±—ã –∫–æ–Ω–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ, –±–æ—Ç –≤—ã–Ω—É–∂–¥–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ preMessageCache,
			# –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –±–æ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –∏ –µ—Å–ª–∏ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			# –∏ –≤–ø—Ä–∞–≤–¥—É –µ—Å—Ç—å, —Ç–æ –±–æ—Ç —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.
			# –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ, –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –¥–µ–ª–∞—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ –±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ messages.send,
			# –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –≤–µ—Ä–Ω—É–ª ID —Å–æ–æ–±—â–µ–Ω–∏—è.
			#
			# –°–ø–æ–Ω—Å–æ—Ä —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –∫–æ—Å—Ç—ã–ª–µ–π - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å.
			if message_text_stripped in subgroup.pre_message_cache:
				sent_via_bot = True

				# –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞, –ø–æ—Å–∫–æ–ª—å–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞.
				subgroup.pre_message_cache.pop(message_text_stripped)
			else:
				# –ü—Ä–∏—á–∏–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ sleep –æ–ø–∏—Å–∞–Ω–∞ –≤—ã—à–µ.
				await asyncio.sleep(0.2)

				# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
				msg_saved = await subgroup.service.get_message_by_service_id(self.service_user_id, event.message_id)

				sent_via_bot = msg_saved and msg_saved.sent_via_bot

			if sent_via_bot and not ignore_outbox_debug:
				return

			# –î–æ–±—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.
			message_extended = (await self.vkAPI.messages_getById(event.message_id))["items"][0]

			# –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º, –∞ —Ç–∞–∫ –∂–µ –ø–∞—Ä—Å–∏–º –≤–ª–æ–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
			reply_to = None
			if event.attachments or is_group or is_bot:
				attachments = event.attachments.copy()

				# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã (reply).
				if "reply" in attachments or ("fwd_messages" in message_extended and len(message_extended["fwd_messages"]) == 1 and await self.user.get_setting("Services.VK.FWDAsReply")):
					reply_vk_message_id: int | None = message_extended["reply_message"].get("id") if "reply" in attachments else None
					fwd_vk_message_id: int | None = message_extended["fwd_messages"][0].get("id") if "reply" not in attachments else None
					fwd_vk_conversation_message_id: int | None = message_extended["fwd_messages"][0].get("conversation_message_id") if "reply" not in attachments else None

					# –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö ID reply –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å,
					# –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –ª–∏–±–æ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –ª–∏–±–æ –µ—Å—Ç—å conversation message id.
					if not (reply_vk_message_id or fwd_vk_message_id or fwd_vk_conversation_message_id):
						logger.warning(f"[VK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞–ª Reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –æ–¥–Ω–∞–∫–æ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –Ω–µ –≤–µ—Ä–Ω—É–ª ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–¥–µ–ª–∞–Ω Reply. –°–æ–æ–±—â–µ–Ω–∏–µ: {message_extended}")
					elif fwd_vk_conversation_message_id:
						# –ù–∞–º –¥–∞–Ω Conversation Message ID, –∏—â–µ–º "—Ä–µ–∞–ª—å–Ω—ã–π" ID —Å–æ–æ–±—â–µ–Ω–∏—è.
						message_data = (await self.vkAPI.messages_getByConversationMessageId(event.peer_id, fwd_vk_conversation_message_id))["items"]

						if message_data:
							reply_vk_message_id = message_data[0]["id"]
					elif fwd_vk_message_id:
						# –ë—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
						reply_vk_message_id = fwd_vk_message_id

					# –ù–∞—Å—Ç–æ—è—â–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª –¥–∞–Ω –æ—Ç–≤–µ—Ç, –ø–æ–ª—É—á–µ–Ω. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –ë–î –±–æ—Ç–∞.
					if reply_vk_message_id:
						telegram_message = await subgroup.service.get_message_by_service_id(self.service_user_id, reply_vk_message_id)

						# –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å, —Ç–æ –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.
						if telegram_message:
							reply_to = telegram_message.telegram_message_ids[0]

				# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
				if "keyboard" in message_extended:
					buttons = []

					for row in message_extended["keyboard"]["buttons"]:
						current_row = []

						for button in row:
							button_type = button["action"]["type"]

							if button_type in ["text", "callback"]:
								current_row.append(
									InlineKeyboardButton(
										text=button["action"]["label"],
										callback_data=subgroup.create_callback_btn(button["action"]["payload"])
									)
								)
							elif button_type == "open_link":
								current_row.append(
									InlineKeyboardButton(
										text=button["action"]["label"],
										url=button["action"]["link"]
									)
								)
							elif button_type == "location":
								current_row.append(
									InlineKeyboardButton(
										text=f"[–æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è]",
										url=message_url
									)
								)
							elif button_type == "vkpay":
								current_row.append(
									InlineKeyboardButton(
										text=f"[–ø–ª–∞—Ç—ë–∂ VKPay]",
										url=message_url
									)
								)
							else:
								logger.warning(f"[VK] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø action –¥–ª—è –∫–Ω–æ–ø–∫–∏: \"{button_type}\"")

								current_row.append(
									InlineKeyboardButton(
										text=f"‚ùî –ö–Ω–æ–ø–∫–∞ —Ç–∏–ø–∞ {button_type}",
										url=message_url
									)
								)

						buttons.append(current_row)

					keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

				# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ.
				if message_extended.get("fwd_messages") and not reply_to:
					fwd_messages = message_extended["fwd_messages"]

					attachment_items.append(f"<a href=\"{message_url}\">üîÅ {'–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' if len(fwd_messages) == 1 else str(len(fwd_messages)) + ' –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π'}</a>")

				# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–µ–æ-–≤–ª–æ–∂–µ–Ω–∏—è.
				if "geo" in attachments:
					attachment = message_extended["geo"]

					# –í—ã—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
					msg = await subgroup.send_geo(
						latitude=attachment["coordinates"]["latitude"],
						longitude=attachment["coordinates"]["longitude"],
						silent=is_outbox,
						reply_to=reply_to,
						sender_id=event.from_id if event.from_id != self.service_user_id else None
					)

					# –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à—ë–ª rate limit, —Ç–æ msg –±—É–¥–µ—Ç None.
					if not msg:
						return

					await TelehooperAPI.save_message(
						"VK",
						self.service_user_id,
						msg[0].message_id,
						event.message_id,
						message_extended["conversation_message_id"],
						sent_via_bot=False
					)

					return

				# –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –≤–ª–æ–∂–µ–Ω–∏—è–º.
				if message_extended and "attachments" in message_extended:
					for attch_index, attachment in enumerate(message_extended["attachments"]):
						attachment_type = attachment["type"]
						attachment = attachment[attachment["type"]]

						if attachment_type == "photo":
							# –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º —Ä–∞–∑–º–µ—Ä–∞–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π.
							sizes_sorted = sorted(attachment["sizes"], key=lambda size: size["width"] * size["height"], reverse=True)

							attachment_media.append(
								InputMediaPhoto(
									type="photo",
									media=sizes_sorted[0]["url"]
								)
							)
						elif attachment_type == "video":
							# –¢–∞–∫ –∫–∞–∫ –í–ö –Ω–µ –≤—ã–¥–∞—é—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ—ë –∏–∑–≤–ª–µ—á—å –∏–∑ API.
							# –ß—Ç–æ –≤–∞–∂–Ω–æ, –ø–µ—Ä–µ–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞–ø—Ä—è–º—É—é –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø–æ—Å–∫–æ–ª—å–∫—É –í–ö –ø—Ä–æ–≤–µ—Ä—è–µ—Ç
							# UserAgent –∏ IP –∞–¥—Ä–µ—Å, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª —Å–¥–µ–ª–∞–Ω –∑–∞–ø—Ä–æ—Å.

							# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ (–∫—Ä—É–∂–æ—á–µ–∫) –ª–∏ —ç—Ç–æ?
							is_video_note = attachments.get(f"attach{attch_index + 1}_kind") == "video_message"

							async with ChatActionSender(chat_id=subgroup.parent.chat.id, action="upload_video", bot=subgroup.parent.bot):
								video = (await self.vkAPI.video_get(videos=get_attachment_key(attachment)))["items"][0]
								if "files" not in video:
									# –í —Å–ª—É—á–∞—è—Ö, –µ—Å–ª–∏ –≤–∏–¥–µ–æ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ "–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", –í–ö –Ω–µ –¥–∞—ë—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ.
									# –í —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –º—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∏–¥–µ–æ –∫–∞–∫ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ.

									attachment_items.append(f"<a href=\"{'m.' if use_mobile_vk else ''}vk.com/wall{video['owner_id']}_{attachment['id']}\">üìπ –í–∏–¥–µ–æ —Å –∑–∞–∫—Ä—ã—Ç—ã–º –¥–æ—Å—Ç—É–ø–æ–º</a>")

									continue

								video = video["files"]

								# –ï—Å–ª–∏ —ç—Ç–æ –≤–Ω–µ—à–Ω–µ–µ –≤–∏–¥–µ–æ (—Ç.–µ., —Å—Å—ã–ª–∫–∞ –Ω–∞ Youtube –∏–ª–∏ –ø–æ–¥–æ–±–Ω–æ–µ),
								# —Ç–æ –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å.
								#
								# –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–∏–µ.
								if "external" in video:
									attachment_items.append(f"<a href=\"{video['external']}\">üìπ –í–Ω–µ—à–Ω–µ–µ –≤–∏–¥–µ–æ</a>")

									continue

								# –î–µ–ª–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤ –¥–ª—è –≤–∏–¥–µ–æ.
								video_quality_list = ["mp4_1080", "mp4_720", "mp4_480", "mp4_360", "mp4_240", "mp4_144"]
								video_hd_quality_list = ["mp4_1080"]

								# –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—á–µ—Å—Ç–≤ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
								present_video_quality_list = [quality for quality in video_quality_list if quality in video]

								# –£–∑–Ω–∞—ë–º, —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ª–∏ HD-–≤–∏–¥–µ–æ.
								hd_video_allowed = await self.user.get_setting("Services.VK.HDVideo")

								for quality in present_video_quality_list:
									is_last = quality == present_video_quality_list[-1]
									is_hd = quality in video_hd_quality_list

									# –ù–∞–º –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –µ—Å–ª–∏ —ç—Ç–æ HD –≤–∏–¥–µ–æ, –∏ –µ—Å—Ç—å –≤–∏–¥–µ–æ –¥—Ä—É–≥–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞,
									# —Ç–æ –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç.
									if is_hd and not is_last and not hd_video_allowed:
										continue

									logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º {quality}: {video[quality]}")

									# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ.
									async with aiohttp.ClientSession() as client:
										async with client.get(video[quality]) as response:
											assert response.status == 200, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º {quality}"

											content_size = int(response.headers.get("Content-Length", "0"))
											assert content_size, "–ù–µ –±—ã–ª –≤—ã–¥–∞–Ω —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"

											# –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –≤–∏–¥–µ–æ, —Ä–∞–∑–º–µ—Ä –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50 –ú–ë.
											if content_size > MAX_UPLOAD_FILE_SIZE_BYTES:
												if is_last:
													raise Exception("–ù–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞")

												logger.debug(f"–§–∞–π–ª –∫–∞—á–µ—Å—Ç–≤–∞ {quality} –æ–∫–∞–∑–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({content_size} –±–∞–π—Ç).")

												continue

											# –ü–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∑–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ.
											video_bytes = await response.read()

									# –ï—Å–ª–∏ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ (–∫—Ä—É–∂–æ—á–µ–∫), —Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ.
									if is_video_note:
										# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ.
										msg = await subgroup.send_video_note(
											input=BufferedInputFile(video_bytes, filename=f"VK video note {attachment['id']}.mp4"),
											silent=is_outbox,
											reply_to=reply_to,
											sender_id=event.from_id if event.from_id != self.service_user_id else None
										)

										# –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à—ë–ª rate limit, —Ç–æ msg –±—É–¥–µ—Ç None.
										if not msg:
											return

										# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å.
										await TelehooperAPI.save_message(
											"VK",
											self.service_user_id,
											msg[0].message_id,
											event.message_id,
											message_extended["conversation_message_id"],
											sent_via_bot=False
										)

										assert msg[0].video_note, "–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"

										return

									# –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –≤–∏–¥–µ–æ.
									attachment_media.append(
										InputMediaVideo(
											type="video",
											media=BufferedInputFile(
												video_bytes,
												filename=f"{attachment['title'].strip()} {quality[4:]}p.mp4"
											)
										)
									)

									break
								else:
									raise Exception("–í–ö–æ–Ω—Ç–∞–∫—Ç–µ –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ")
						elif attachment_type == "audio_message":
							attachment_media.append(
								InputMediaAudio(
									type="audio",
									media=attachment["link_ogg"]
								)
							)
						elif attachment_type == "sticker":
							async def _downloadSticker(url: str, is_animated: bool) -> bytes:
								"""
								–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL.

								–ï—Å–ª–∏ —Å—Ç–∏–∫–µ—Ä —è–≤–ª—è–µ—Ç—Å—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, —Ç–æ –¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –µ–≥–æ –µ—â—ë –∏ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç .tgs.

								:param url: URL –Ω–∞ –¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ —Å—Ç–∏–∫–µ—Ä–æ–º.
								:param is_animated: –£–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞ –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç .tgs.
								"""

								logger.debug(f"–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∏–∫–µ—Ä —Å URL {url}")

								async with aiohttp.ClientSession() as client:
									async with client.get(sticker_url) as response:
										assert response.status == 200, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∏–∫–µ—Ä —Å ID {attachment_cache_name}"

										sticker_bytes = await response.read()

								if is_animated:
									sticker_bytes = await utils.convert_to_tgs_sticker(sticker_bytes)

								return sticker_bytes

							# –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–∑-–∑–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–∂–∞—Ç–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ gzip.
							is_animated = "animation_url" in attachment
							sticker_url = attachment.get("animation_url") if is_animated else attachment["images"][-1]["url"]
							attachment_cache_name = f"sticker{attachment['sticker_id']}{'anim' if is_animated else 'static'}"

							# –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω–æ–º —Å—Ç–∏–∫–µ—Ä–µ –∏–∑ –∫—ç—à–∞ –≤–ª–æ–∂–µ–Ω–∏–π.
							sticker_bytes = None
							cached_sticker = await TelehooperAPI.get_attachment("VK", attachment_cache_name)

							# –ï—Å–ª–∏ —Å—Ç–∏–∫–µ—Ä –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ, —Ç–æ —Å–∫–∞—á–∏–≤–∞–µ–º –µ–≥–æ.
							if not cached_sticker:
								logger.debug(f"–ù–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –∫—ç—à –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞ —Å ID {attachment_cache_name}")

								# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–∫–µ—Ä.
								sticker_bytes = await _downloadSticker(sticker_url, is_animated)

							# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä.
							# –ò–Ω–æ–≥–¥–∞ —Å—Ç–∏–∫–µ—Ä—ã, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –≤ –∫—ç—à–µ –ª–æ–º–∞—é—Ç—Å—è. –ï—Å–ª–∏ —Ç–∞–∫–æ–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, —Ç–æ –±–æ—Ç —É–¥–∞–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä –∏–∑ –∫—ç—à–∞.
							try:
								msg = await subgroup.send_sticker(
									sticker=cached_sticker if cached_sticker else BufferedInputFile(
										file=cast(bytes, sticker_bytes),
										filename="sticker.tgs" if is_animated else f"VK sticker {attachment['sticker_id']}.png"
									),
									silent=is_outbox,
									reply_to=reply_to,
									sender_id=event.from_id if event.from_id != self.service_user_id else None
								)
							except TelegramBadRequest:
								# –ü–æ—Å–∫–æ–ª—å–∫—É –∫—ç—à —Å—Ç–∏–∫–µ—Ä–∞ –æ–∫–∞–∑–∞–ª—Å—è –ø–æ–ª–æ–º–∞–Ω–Ω—ã–º, —Å—Ç–æ–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –ø–æ-–Ω–æ–≤–æ–π, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫—ç—à.
								await TelehooperAPI.delete_attachment("VK", attachment_cache_name)
								sticker_bytes = await _downloadSticker(sticker_url, is_animated)

								msg = await subgroup.send_sticker(
									sticker=BufferedInputFile(
										file=cast(bytes, sticker_bytes),
										filename="sticker.tgs" if is_animated else f"VK sticker {attachment['sticker_id']}.png"
									),
									silent=is_outbox,
									reply_to=reply_to,
									sender_id=event.from_id if event.from_id != self.service_user_id else None
								)

							# –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à—ë–ª rate limit, —Ç–æ msg –±—É–¥–µ—Ç None.
							if not msg:
								return

							assert msg[0].sticker, "–°—Ç–∏–∫–µ—Ä –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"

							# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å.
							await TelehooperAPI.save_message(
								"VK",
								self.service_user_id,
								msg[0].message_id,
								event.message_id,
								message_extended["conversation_message_id"],
								sent_via_bot=False
							)

							# –ö—ç—à–∏—Ä—É–µ–º —Å—Ç–∏–∫–µ—Ä, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç.
							if not cached_sticker and await self.user.get_setting("Security.MediaCache"):
								await TelehooperAPI.save_attachment(
									"VK",
									attachment_cache_name,
									msg[0].sticker.file_id
								)

							return
						elif attachment_type == "doc":
							async with ChatActionSender(chat_id=subgroup.parent.chat.id, action="upload_document", bot=subgroup.parent.bot):
								async with aiohttp.ClientSession() as client:
									async with client.get(attachment["url"]) as response:
										assert response.status == 200, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç —Å ID {attachment['id']}"

										content_size = int(response.headers.get("Content-Length", "0"))
										assert content_size, "–ù–µ –±—ã–ª –≤—ã–¥–∞–Ω —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"

										# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ 50 –ú–ë.
										if content_size > MAX_UPLOAD_FILE_SIZE_BYTES:
											logger.debug(f"–§–∞–π–ª –æ–∫–∞–∑–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({content_size} –±–∞–π—Ç).")

											raise Exception("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")

										# –ü–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç.
										file_bytes = await response.read()

								# –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç.
								attachment_media.append(InputMediaDocument(type="document", media=BufferedInputFile(file=file_bytes, filename=attachment["title"])))
						elif attachment_type == "audio":
							# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º—É–∑—ã–∫—É.

							# –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö, –í–ö –º–æ–∂–µ—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ.
							# –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ, –±–æ—Ç –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç –º—É–∑—ã–∫—É –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ.
							if not attachment.get("url"):
								attachment_items.append(f"<a href=\"{message_url}\">üéµ {attachment['artist']} - {attachment['title']}</a>")

								continue

							async with ChatActionSender(chat_id=subgroup.parent.chat.id, action="upload_audio", bot=subgroup.parent.bot):
								async with aiohttp.ClientSession() as client:
									async with client.get(attachment["url"]) as response:
										assert response.status == 200, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ —Å ID {attachment['id']}"

										content_size = int(response.headers.get("Content-Length", "0"))
										assert content_size, "–ù–µ –±—ã–ª –≤—ã–¥–∞–Ω —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"

										# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ 50 –ú–ë.
										if content_size > MAX_UPLOAD_FILE_SIZE_BYTES:
											logger.debug(f"–§–∞–π–ª –æ–∫–∞–∑–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({content_size} –±–∞–π—Ç).")

											raise Exception("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")

										# –ü–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∑–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ.
										file_bytes = await response.read()

								attachment_media.append(
									InputMediaAudio(
										type="audio",
										media=BufferedInputFile(
											file=file_bytes,
											filename=f"{attachment['artist']} - {attachment['title']}.mp3"
										),
										title=attachment["title"],
										performer=attachment["artist"]
									)
								)
						elif attachment_type == "graffiti":
							attachment_media.append(
								InputMediaPhoto(
									type="photo",
									media=attachment["url"]
								)
							)
						elif attachment_type == "wall":
							# TODO: –ò–º—è –≥—Ä—É–ø–ø—ã/—é–∑–µ—Ä–∞ –æ—Ç–∫—É–¥–∞ –±—ã–ª –ø–æ—Å—Ç.
							#   –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ—á—Ç–∏ –Ω–µ—Ä–µ–∞–ª–∏–∑—É–µ–º–æ –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –í–ö –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç —Ç–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∏ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å.
							# TODO: –ù–∞—Å—Ç—Ä–æ–π–∫–∞, —á—Ç–æ –±—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞, –∞ –Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ.

							attachment_items.append(f"<a href=\"{'m.' if use_mobile_vk else ''}vk.com/wall{attachment['owner_id']}_{attachment['id']}\">üîÑ –ó–∞–ø–∏—Å—å –æ—Ç {'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' if attachment['owner_id'] > 0 else '–≥—Ä—É–ø–ø—ã'}</a>")
						elif attachment_type == "link":
							# TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫–∞—è –ø–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞ –µ—Å—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —ç—Ç–æ–π - —Å–¥–µ–ª–∞—Ç—å –Ω–µ–≤–∏–¥–∏–º—É—é —Å—Å—ã–ª–∫—É –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ.

							pass
						elif attachment_type == "poll":
							attachment_items.append(f"<a href=\"{message_url}\">üìä –û–ø—Ä–æ—Å: ¬´{attachment['question']}¬ª</a>")
						elif attachment_type == "gift":
							attachment_media.append(InputMediaPhoto(type="photo", media=attachment["thumb_256"]))

							attachment_items.append(f"<a href=\"{message_url}\">üéÅ –ü–æ–¥–∞—Ä–æ–∫</a>")
						elif attachment_type == "market":
							attachment_items.append(f"<a href=\"{message_url}\">üõí –¢–æ–≤–∞—Ä: ¬´{attachment['title']}¬ª</a>")
						elif attachment_type == "market_album":
							pass
						elif attachment_type == "wall_reply":
							attachment_items.append(f"<a href=\"{message_url}\">üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø–∏—Å–∏</a>")
						elif attachment_type == "story":
							attachment_items.append(f"<a href=\"{message_url}\">üìù –ò—Å—Ç–æ—Ä–∏—è</a>")
						else:
							raise TypeError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–ª–æ–∂–µ–Ω–∏—è \"{attachment_type}\"")

			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –±–µ—Å–µ–¥—ã –∏–∑ –í–ö.
			if is_convo and event.source_act:
				await handle_message_events()

				return

			# –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.
			msg_prefix = await self.get_message_prefix(event, is_outbox)
			msg_body = utils.telegram_safe_str(event.text)
			msg_suffix = ""

			# –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–ª–æ–∂–µ–Ω–∏—è.
			if attachment_items:
				msg_suffix += "\n\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"

				msg_suffix += "  |  ".join(attachment_items) + "."

			# –î–µ–ª–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤–∏–¥–∞:
			#  "–ü—Ä–∏–≤–µ—Ç, [id1|–î—É—Ä–æ–≤]!"
			# ->
			#  "–ü—Ä–∏–≤–µ—Ç, –î—É—Ä–æ–≤!" (—Å —Å—Å—ã–ª–∫–æ–π)
			msg_mentions = get_message_mentions(msg_body)

			for domain, mention_text in msg_mentions:
				original_mention_text = f"[{domain}|{mention_text}]"

				assert original_mention_text in msg_body, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã"

				# –ò–∑–≤–ª–µ–∫–∞–µ–º ID —É–ø–æ–º–∏–Ω–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–≥—Ä—É–ø–ø—ã, —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º (domain/username, –ø–æ–ª–Ω–æ–µ –∏–º—è).
				mention_id = int(domain[2:]) if "id" in domain else -int(int(domain[4:]))

				# –î–µ–ª–∞–µ–º API-–∑–∞–ø—Ä–æ—Å, –ø–æ–ª—É—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
				mention_info = await self.get_user_info(mention_id)

				# –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
				#
				# –í —Å—Å—ã–ª–∫–µ —Ç–∞–∫ –∂–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è —É–ø–æ–º–∏–Ω–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª—è, —ç—Ç–æ –Ω—É–∂–Ω–æ
				# —á—Ç–æ –±—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∫–ª–∏–µ–Ω—Ç—ã Telegram –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ —Å—Å—ã–ª–∫—É –≤–∏–¥–∞:
				#   https://vk.com/durov?–ü–∞–≤–µ–ª_–î—É—Ä–æ–≤
				mention_user_url = (
					f"https://{'m.' if use_mobile_vk else ''}vk.com/"
					f"{mention_info.username or domain}"
					f"?{mention_info.name.replace(' ', '_')}"
				)

				msg_body = msg_body.replace(
					original_mention_text,
					f"<a href=\"{mention_user_url}\">{mention_text}</a>"
				)

			full_message_text = msg_prefix + msg_body + msg_suffix

			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ë–î –±–æ—Ç–∞.
			async def _send_and_save(force_manual_files_upload: bool = False) -> None:
				"""
				–í—ã—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram, –∞ —Ç–∞–∫ –∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö ID –≤ –ë–î.

				:param force_manual_files_upload: –ï—Å–ª–∏ True, —Ç–æ –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä—è–º–æ–≥–æ URL –Ω–∞ –≤–ª–æ–∂–µ–Ω–∏—è, –±–æ—Ç –±—É–¥–µ—Ç –∏—Ö –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤—Ä—É—á–Ω—É—é.
				"""

				attachment_media_downloaded = attachment_media

				# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ —ç—Ç–æ —É–∫–∞–∑–∞–Ω–æ.
				if force_manual_files_upload:
					logger.debug("–ü—ã—Ç–∞—é—Å—å –≤—Ä—É—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è...")

					for index, attachment in enumerate(attachment_media_downloaded):
						if isinstance(attachment.media, InputFile):
							continue

						logger.debug(f"–í—Ä—É—á–Ω—É—é –∑–∞–≥—Ä—É–∂–∞—é –≤–ª–æ–∂–µ–Ω–∏–µ {attachment}...")

						# TODO: –°–¥–µ–ª–∞—Ç—å asyncio.gather() –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
						async with aiohttp.ClientSession() as session:
							async with session.get(attachment.media) as response:
								assert response.status == 200, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ —Å URL {attachment.media}"

								attachment_bytes = await response.read()

						# –í–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –º–µ–Ω—è–µ–º –≤ –º–∞—Å—Å–∏–≤–µ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏.
						attachment_media_downloaded[index].media = BufferedInputFile(
							file=attachment_bytes,
							filename="Media"
						)

				# –í—ã—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
				#
				# –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, Telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
				# –∞—É–¥–∏–æ/–¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ –≤–∏–¥–∞–º–∏ –≤–ª–æ–∂–µ–Ω–∏–π. –ß—Ç–æ –±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏,
				# –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∞—É–¥–∏–æ, –∞ –ø–æ—Ç–æ–º - —Å –∞—É–¥–∏–æ.
				audio_attachments = [i for i in attachment_media_downloaded if isinstance(i, InputMediaAudio)]
				doc_attachments = [i for i in attachment_media_downloaded if isinstance(i, InputMediaDocument)]
				normal_attachments = [i for i in attachment_media_downloaded if i not in audio_attachments and i not in doc_attachments]

				separate_attachs = normal_attachments and (audio_attachments or doc_attachments)

				sent_message_ids = []
				msg_special = await subgroup.send_message_in(
					full_message_text,
					attachments=normal_attachments or audio_attachments or doc_attachments, # type: ignore
					silent=is_outbox,
					reply_to=reply_to,
					keyboard=keyboard,
					sender_id=event.from_id if event.from_id != self.service_user_id else None
				)

				# –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à—ë–ª rate limit, —Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥–µ—Ç —Ä–∞–≤–µ–Ω None.
				if not msg_special:
					return

				sent_message_ids.extend(msg_special)

				# –í —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º "–æ—Å–æ–±—ã–µ" –≤–∏–¥—ã –≤–ª–æ–∂–µ–Ω–∏–π –ø–æ-–æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏.
				if separate_attachs:
					# –ê—É–¥–∏–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã:
					msg_audio = await subgroup.send_message_in(
						"‚ÑπÔ∏è <i>–î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –≤–≤–∏–¥—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram, –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª —Å–¥–µ–ª–∞–Ω ¬´–æ—Ç–≤–µ—Ç¬ª</i>.",
						attachments=audio_attachments, # type: ignore
						silent=is_outbox,
						reply_to=msg_special[0],
						sender_id=event.from_id if event.from_id != self.service_user_id else None
					)

					if msg_audio:
						sent_message_ids.extend(msg_audio)

					# –î–æ–∫—É–º–µ–Ω—Ç—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã:
					msg_docs = await subgroup.send_message_in(
						"‚ÑπÔ∏è <i>–î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –≤–≤–∏–¥—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram, –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª —Å–¥–µ–ª–∞–Ω ¬´–æ—Ç–≤–µ—Ç¬ª</i>.",
						attachments=doc_attachments, # type: ignore
						silent=is_outbox,
						reply_to=msg_special[0],
						sender_id=event.from_id if event.from_id != self.service_user_id else None
					)

					if msg_docs:
						sent_message_ids.extend(msg_docs)

				# –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à—ë–ª rate limit, —Ç–æ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –≤—ã—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è,
				# –∏ —Å–ø–∏—Å–æ–∫ –∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥–µ—Ç –ø—É—Å—Ç.
				if not sent_message_ids:
					return

				await TelehooperAPI.save_message(
					"VK",
					self.service_user_id,
					sent_message_ids,
					event.message_id,
					message_extended["conversation_message_id"],
					sent_via_bot=False
				)

			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏.
			# –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, –±–æ—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞–¥–ø–∏—Å—å "Telehooper –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç...".
			async with ChatActionSender.upload_document(chat_id=subgroup.parent.chat.id, bot=subgroup.parent.bot, initial_sleep=1):
				try:
					await _send_and_save()
				except (TelegramNetworkError, TimeoutError):
					logger.debug("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–±—É—é –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é")

					# –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ –ø—Ä–æ–∏–∑–æ—à—ë–ª —Ç–∞–π–º–∞—É—Ç.
					# –ü—Ä–æ–±—É–µ–º –≤—ã—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –µ—â—ë —Ä–∞–∑, –Ω–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –≤—Ä—É—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è.
					await _send_and_save(force_manual_files_upload=True)

			# –ï—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —Ç–æ –º—ã –¥–æ–ª–∂–Ω—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –¥–ª—è "–ø—Ä–æ—á–∏—Ç–∫–∏" –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
			read_setting_value = cast(Literal["ignore", "single", "multiuser", "all"], await self.user.get_setting(f"Services.{self.service_name}.AutoRead"))

			if (read_setting_value == "single" and not is_convo) or (read_setting_value == "multiuser" and is_convo) or (read_setting_value == "all"):
				# –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –ø–æ "–ø—Ä–æ—á–∏—Ç—ã–≤–∞–Ω–∏—é" —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, —Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë.
				if subgroup.service_chat_id in self._autoReadChats:
					self._autoReadChats[subgroup.service_chat_id].cancel()

				# –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –º—ã –¥–æ–ª–∂–Ω—ã "–ø—Ä–æ—á–∏—Ç–∞—Ç—å" —Å–æ–æ–±—â–µ–Ω–∏–µ.
				read_setting_timer = int(await self.user.get_setting(f"Services.{self.service_name}.AutoReadTime"))

				async def read_task(chat_id: int, timer: int) -> None:
					await asyncio.sleep(timer)

					logger.debug(f"–ü–æ–º–µ—á–∞—é —á–∞—Ç {chat_id} –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π, –ø–æ—Å–∫–æ–ª—å–∫—É –ø—Ä–æ—à–ª–æ {timer} —Å–µ–∫—É–Ω–¥ —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.")
					try:
						await self.read_message(chat_id)
					except:
						pass

				# –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ "–ø—Ä–æ—á–∏—Ç—ã–≤–∞–Ω–∏—é" —á–∞—Ç–∞ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è.
				self._autoReadChats[subgroup.service_chat_id] = asyncio.create_task(read_task(subgroup.service_chat_id, read_setting_timer))
		except TelegramForbiddenError:
			await TelehooperAPI.delete_group_data(subgroup.parent.chat.id, fully_delete=True, bot=subgroup.parent.bot)
		except Exception as e:
			logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {utils.get_telegram_logging_info(self.user.telegramUser)}:", e)

			try:
				await subgroup.send_message_in(
					(
						"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>.\n"
						"\n"
						"<i><b>–£–ø—Å!</b></i> –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ –±–æ—Ç —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –æ—à–∏–±–∫–æ–π –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. üòì\n"
						f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –ø–µ—Ä–µ–π–¥—è <a href=\"{message_url}\">–ø–æ —Å—Å—ã–ª–∫–µ</a>.\n"
						"\n"
						"<b>–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –í–∞—Å –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å</b>:\n"
						f"<code>{e.__class__.__name__}: {e}</code>.\n"
						"\n"
						f"‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â–∏ –ª–∏–±–æ —Å–æ–∑–¥–∞—Ç—å –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç (Github Issue), –ø–æ —Å—Å—ã–ª–∫–µ –≤ –∫–æ–º–∞–Ω–¥–µ <a href=\"{utils.create_command_url('/h 6')}\">/help</a>."
					),
					silent=True,
					keyboard=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
						text="–û—Ç–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ",
						url=message_url
					)]])
				)
			except:
				pass

	async def handle_vk_typing(self, event: LongpollTypingEvent | LongpollTypingEventMultiple | LongpollVoiceMessageEvent) -> None:
		"""
		–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –Ω–∞—á–∞–ª–∞ "–ø–µ—á–∞—Ç–∏" –ª–∏–±–æ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.

		:param event: –°–æ–±—ã—Ç–∏–µ —Ç–∏–ø–∞ `LongpollTypingEvent`, `LongpollTypingEventMultiple` –∏–ª–∏ `LongpollVoiceMessageEvent`, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å longpoll-—Å–µ—Ä–≤–µ—Ä–∞.
		"""

		from api import TelehooperAPI


		subgroup = TelehooperAPI.get_subgroup_by_service_dialogue(self.user, ServiceDialogue(service_name=self.service_name, id=event.peer_id))

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø–µ—á–∞—Ç–∏.
		if not subgroup:
			return

		# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö "–ø–µ—á–∞—Ç–∞—é—â–∏—Ö" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
		typing_users: list[int] = []
		if isinstance(event, LongpollTypingEvent):
			typing_users = [event.user_id]
		elif isinstance(event, LongpollTypingEventMultiple) or isinstance(event, LongpollVoiceMessageEvent):
			typing_users = [event.user_ids] if isinstance(event.user_ids, int) else event.user_ids

		logger.debug(f"[VK] –°–æ–±—ã—Ç–∏–µ –ø–µ—á–∞—Ç–∏ –¥–ª—è –ø–æ–¥–≥—Ä—É–ø–ø—ã \"{subgroup.service_dialogue_name}\", {len(typing_users)} –ø–µ—á–∞—Ç–∞—é—â–∏—Ö")

		try:
			for user_id in typing_users:
				await subgroup.start_activity(
					"record_audio" if type(event) is LongpollVoiceMessageEvent else "typing",
					sender_id=user_id if user_id != subgroup.service.service_user_id else None
				)
		except TelegramForbiddenError:
			await TelehooperAPI.delete_group_data(
				subgroup.parent.chat.id,
				fully_delete=True,
				bot=subgroup.parent.bot
			)

	async def handle_vk_message_edit(self, event: LongpollMessageEditEvent) -> None:
		"""
		–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.

		:param event: –°–æ–±—ã—Ç–∏–µ —Ç–∏–ø–∞ `LongpollMessageEditEvent`, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å longpoll-—Å–µ—Ä–≤–µ—Ä–∞.
		"""

		from api import TelehooperAPI


		subgroup = TelehooperAPI.get_subgroup_by_service_dialogue(self.user, ServiceDialogue(service_name=self.service_name, id=event.peer_id))

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
		if not subgroup:
			return

		# –£—Ä–æ–¥–ª–∏–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ—Å–∫–æ–ª—å–∫—É –í–ö –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ "—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç" —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –µ–≥–æ –∑–∞–∫—Ä–µ–ø–µ.
		#
		# –í –º–æ—ë–º —Å–ª—É—á–∞–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, –µ—Å–ª–∏ "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" –∏–º–µ–µ—Ç
		# –ø–æ–ª–µ "pinned_at", –∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –∏ —ç—Ç–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –º–µ–Ω–µ–µ 2 —Å–µ–∫—É–Ω–¥—ã.
		# –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–µ —Å–∞–º—ã–π –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–±, –Ω–æ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç.
		if event.pinned_at and (utils.time_since(event.pinned_at)) < 2:
			return

		# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –∫–∞–∫–æ–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω. –ï—Å–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –±—ã–ª–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.
		#
		# –ü–æ–Ω—è—Ç–∏—è –Ω–µ –∏–º–µ—é –ø–æ—á–µ–º—É, –Ω–æ –≤ –í–ö —Ä–µ—à–∏–ª–∏, —á—Ç–æ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–Ω–æ –±—É–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è.
		for i in range(int(event.attachments.get("attachments_count", 0))):
			attachment_type = event.attachments.get(f"attach{i + 1}_type")
			attachment_kind = event.attachments.get(f"attach{i + 1}_kind")

			if attachment_type == "doc" and attachment_kind == "audiomsg":
				return

		logger.debug(f"[VK] –°–æ–±—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–≥—Ä—É–ø–ø—ã \"{subgroup.service_dialogue_name}\"")

		# –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
		telegram_message = await subgroup.service.get_message_by_service_id(self.service_user_id, event.message_id)

		if not telegram_message:
			return

		# –ï—Å–ª–∏ —ç—Ç–æ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ, –Ω—É, —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∏–ª–æ—Å—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
		if event.is_expired:
			try:
				await subgroup.delete_message(telegram_message.telegram_message_ids)
			except TelegramForbiddenError:
				await TelehooperAPI.delete_group_data(subgroup.parent.chat.id, fully_delete=True, bot=subgroup.parent.bot)
			except Exception:
				pass

			return

		# –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.
		full_message_text = ""
		msg_prefix = await self.get_message_prefix(event, is_outbox=event.flags.outbox)
		msg_suffix = " <i>(—Ä–µ–¥.)</i>"

		full_message_text = msg_prefix + utils.telegram_safe_str(event.new_text) + msg_suffix

		# –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
		try:
			logger.debug(f"–†–µ–¥–∞–∫—Ç–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID0 {telegram_message.telegram_message_ids[0]}")

			await subgroup.edit_message(
				full_message_text,
				telegram_message.telegram_message_ids[0],
				sender_id=event.from_id if event.from_id != subgroup.service.service_user_id else None
			)
		except TelegramForbiddenError:
			await TelehooperAPI.delete_group_data(subgroup.parent.chat.id, fully_delete=True, bot=subgroup.parent.bot)
		except Exception:
			pass

	async def handle_vk_message_flags_change(self, event: LongpollMessageFlagsEdit) -> None:
		"""
		–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤ —É —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.

		:param event: –°–æ–±—ã—Ç–∏–µ —Ç–∏–ø–∞ `LongpollMessageFlagsEdit`, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å longpoll-—Å–µ—Ä–≤–µ—Ä–∞.
		"""

		from api import TelehooperAPI

		# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
		if not (event.new_flags.delete_for_all or event.new_flags.deleted):
			return

		subgroup = TelehooperAPI.get_subgroup_by_service_dialogue(self.user, ServiceDialogue(service_name=self.service_name, id=event.peer_id))

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.
		if not subgroup:
			return

		logger.debug(f"[VK] –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID {event.message_id} –¥–ª—è –ø–æ–¥–≥—Ä—É–ø–ø—ã \"{subgroup.service_dialogue_name}\"")

		# –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
		telegram_message = await subgroup.service.get_message_by_service_id(self.service_user_id, event.message_id)

		if not telegram_message:
			return

		# –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
		try:
			logger.debug(f"–£–¥–∞–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID {telegram_message.telegram_message_ids}")

			await subgroup.delete_message(
				telegram_message.telegram_message_ids,
				sender_id=subgroup.service.service_user_id if subgroup.service.service_user_id != self.service_user_id else None
			)
		except TelegramForbiddenError:
			await TelehooperAPI.delete_group_data(subgroup.parent.chat.id, fully_delete=True, bot=subgroup.parent.bot)
		except Exception as error:
			if error:
				logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Telegam –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {utils.get_telegram_logging_info(self.user.telegramUser)}:", error)

	async def get_list_of_dialogues(self, force_update: bool = False, max_amount: int = 800, skip_ids: list[int] = []) -> list[ServiceDialogue]:
		if not force_update and self._cachedDialogues:
			return self._cachedDialogues

		extendedInfo = {}
		retrieved_dialogues = 0
		total_dialogues = 0
		result = []

		while True:
			response = await self.vkAPI.messages_getConversations(offset=retrieved_dialogues)
			if not total_dialogues:
				total_dialogues = response["count"]

			# –í–ö –æ—á–µ–Ω—å —Å—Ç—Ä–∞–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∏—Å–∫–µ –¥–∏–∞–ª–æ–≥–æ–≤,
			# –≤–º–µ—Å—Ç–æ
			#   {–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏–∞–ª–æ–≥–µ, –∏–º—è —é–∑–µ—Ä–∞ –∏ –≤—Å—ë —Ç–∞–∫–æ–µ}
			# –í–ö –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
			#   {{–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞–ª–æ–≥–µ}, [{id: –∏–º—è —é–∑–µ—Ä–∞ –∏ –≤—Å—ë —Ç–∞–∫–æ–µ}, ...]}
			#
			# –î–∞–Ω–Ω—ã–π –∫—É—Å–æ–∫ –∫–æ–¥–∞ –Ω–µ–º–Ω–æ–≥–æ —É–ø—Ä–æ—â–∞–µ—Ç —ç—Ç–æ, —Å–æ–∑–¥–∞–≤–∞—è —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
			for group in response.get("groups", []):
				extendedInfo[-group["id"]] = group

			for user in response.get("profiles", []):
				extendedInfo[user["id"]] = user

			for dialogue in response["items"]:
				convo = dialogue["conversation"]

				conversation_id = convo["peer"]["id"]
				conversation_type = convo["peer"]["type"]
				convo_extended = extendedInfo.get(conversation_id)

				# –ü—Ä–æ —Ç–∏–ø "email" –º–æ–∂–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å –∑–¥–µ—Å—å:
				# https://dev.vk.com/reference/objects/message
				#
				# –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–π —Ç–∏–ø –±–µ—Å–µ–¥ –∏–º–µ–µ—Ç –æ—Ç–ª–∏—á–∏—è –æ—Ç –æ–±—ã—á–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤.
				# –°–º—ã—Å–ª–∞ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ—Ç—É, –ø–æ—Å–∫–æ–ª—å–∫—É
				# —Ç–∞–∫–∏–µ –±–µ—Å–µ–¥—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω—ã–º –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
				if conversation_type == "email":
					total_dialogues -= 1

					continue

				if conversation_id in skip_ids:
					total_dialogues -= 1

					continue

				full_name = ""
				image_url = "https://vk.com/images/camera_200.png"

				if not convo_extended and conversation_type != "chat":
					raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ {conversation_id}, —Ö–æ—Ç—è –æ–Ω–∞ –æ–±—è–∑–∞–Ω–∞ –±—ã—Ç—å.")

				if conversation_type == "chat":
					full_name = convo["chat_settings"]["title"]

					if "photo" in convo["chat_settings"]:
						image_url = convo["chat_settings"]["photo"]["photo_200"]
				elif conversation_type == "user":
					convo_extended = cast(dict, convo_extended)

					full_name = f"{convo_extended['first_name']} {convo_extended['last_name']}"
					image_url = convo_extended.get("photo_max")
				elif conversation_type == "group":
					convo_extended = cast(dict, convo_extended)

					full_name = convo_extended["name"]
					image_url = convo_extended.get("photo_max")
				else:
					raise Exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∏–∞–ª–æ–≥–∞ {conversation_type}.")

				result.append(
					ServiceDialogue(
						service_name=self.service_name,
						id=conversation_id,
						name=full_name,
						profile_url=image_url,
						is_multiuser=conversation_type == "chat",
						is_pinned=convo["sort_id"]["major_id"] > 0,
						is_muted="push_settings" in convo and convo["push_settings"]["disabled_forever"],
						incoming_messages=convo.get("unread_count", 0),
						multiuser_count=convo["chat_settings"].get("members_count") if conversation_type == "chat" else None
					)
				)

				retrieved_dialogues += 1

			if retrieved_dialogues + 200 >= total_dialogues or retrieved_dialogues + 200 >= max_amount:
				break

		self._cachedDialogues = result
		return result

	def has_cached_list_of_dialogues(self) -> bool:
		return bool(self._cachedDialogues)

	async def disconnect_service(self, reason: ServiceDisconnectReason = ServiceDisconnectReason.INITIATED_BY_USER) -> None:
		db_user = await get_user(self.user.telegramUser)

		assert "VK" in db_user["Connections"]

		try:
			if reason not in [ServiceDisconnectReason.INITIATED_BY_USER, ServiceDisconnectReason.ISSUED_BY_ADMIN]:
				raise Exception

			await self.send_message(
				chat_id=db_user["Connections"]["VK"]["ID"],
				text="‚ÑπÔ∏è Telegram-–±–æ—Ç ¬´Telehooper¬ª –±—ã–ª –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç –í–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ."
			)
		except:
			pass

		# –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î.
		del db_user["Connections"]["VK"]

		await db_user.save()

		# –£–¥–∞–ª—è–µ–º VKServiceAPI –∏–∑ –ø–∞–º—è—Ç–∏.
		self.user.remove_vk_connection()

		# –û—Ç–∫–ª—é—á–∞–µ–º longpoll.
		if self._longPollTask:
			logger.debug("Cancelling longpoll task...")

			self._longPollTask.cancel()

		# –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏.
		try:
			del self.token
			del self.vkAPI
			del self._longPollTask
		except:
			pass

	async def get_current_user_info(self) -> TelehooperServiceUserInfo:
		self_info = await self.vkAPI.get_self_info()

		return TelehooperServiceUserInfo(
			service_name=self.service_name,
			id=self_info["id"],
			name=f"{self_info['first_name']} {self_info['last_name']}",
			profile_url=self_info.get("photo_max_orig"),
		)

	async def get_user_info(self, user_id: int, force_update: bool = False) -> TelehooperServiceUserInfo:
		"""
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ/–≥—Ä—É–ø–ø–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.

		:param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
		:param force_update: –ù—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –≤ –∫—ç—à–µ.
		"""

		if not force_update and user_id in self._cachedUsersInfo:
			return self._cachedUsersInfo[user_id]

		# –í–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π ID,
		# –ø–æ–∫–∞ –∫–∞–∫ –≥—Ä—É–ø–ø—ã (—Ç.–µ., –±–æ—Ç—ã) –∏–º–µ—é—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π.
		#
		# –ó–¥–µ—Å—å, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞–∫–∞ ID –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–∞–∑–Ω—ã–µ API-–∑–∞–ø—Ä–æ—Å—ã.
		user_info_class: TelehooperServiceUserInfo
		if user_id > 0:
			# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.

			user_info = (await self.vkAPI.users_get(user_ids=[user_id]))[0]
			assert user_info, f"–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å ID {user_id} –Ω–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, —Ö–æ—Ç—è –æ–±—è–∑–∞–Ω—ã –±—ã–ª–∏ –±—ã—Ç—å"

			user_info_class = TelehooperServiceUserInfo(
				service_name=self.service_name,
				id=user_info["id"],
				name=f"{user_info['first_name']} {user_info['last_name']}",
				profile_url=user_info.get("photo_max_orig"),
				male=user_info.get("sex", 2) == 2, # –°—É–¥—è –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –í–ö, –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ —Ç—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Å ID 0, "–ø–æ–ª –Ω–µ —É–∫–∞–∑–∞–Ω". https://dev.vk.com/ru/reference/objects/user#sex
				username=user_info.get("domain", f"id{user_info['id']}")
			)
		else:
			# –ì—Ä—É–ø–ø–∞ (–±–æ—Ç).

			group_info = (await self.vkAPI.groups_getByID(user_ids=[abs(user_id)]))[0]
			assert group_info, f"–î–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ —Å ID {user_id} –Ω–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, —Ö–æ—Ç—è –æ–±—è–∑–∞–Ω—ã –±—ã–ª–∏ –±—ã—Ç—å"

			user_info_class = TelehooperServiceUserInfo(
				service_name=self.service_name,
				id=-group_info["id"],
				name=group_info["name"],
				profile_url=group_info.get("photo_200_orig"),
				male=None,
				username=group_info.get("domain", f"club{group_info['id']}")
			)

		self._cachedUsersInfo[user_id] = user_info_class

		return user_info_class

	async def get_service_dialogue(self, chat_id: int, force_update: bool = False) -> ServiceDialogue:
		dialogues = await self.get_list_of_dialogues(force_update=force_update)

		for dialogue in dialogues:
			if dialogue.id == chat_id:
				return dialogue

		raise TypeError(f"–î–∏–∞–ª–æ–≥ —Å ID {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

	async def set_online(self) -> None:
		await self.vkAPI.account_setOnline()

	async def start_chat_activity(self, peer_id: int, type: Literal["typing", "audiomessage"] = "typing") -> None:
		await self.vkAPI.messages_setActivity(peer_id=peer_id, type=type)

	async def read_message(self, peer_id: int) -> None:
		await self.vkAPI.messages_markAsRead(peer_id=peer_id)

	async def send_callback(self, message_id: int, peer_id: int, data: str) -> None:
		await self.vkAPI.messages_sendMessageEvent(message_id=message_id, peer_id=peer_id, payload=data)

	async def send_message(self, chat_id: int, text: str, reply_to_message: int | None = None, attachments: list[str] | str | None = None, latitude: float | None = None, longitude: float | None = None, bypass_queue: bool = False) -> int | None:
		if not bypass_queue and not await self.acquire_queue("message"):
			return None

		return await self.vkAPI.messages_send(peer_id=chat_id, message=text, reply_to=reply_to_message, attachment=attachments, lat=latitude, long=longitude)

	async def find_real_chat_id(self, user: "TelehooperUser", subgroup: "TelehooperSubGroup") -> int | None:
		"""
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π ID –±–µ—Å–µ–¥—ã –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –µ—ë —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.

		:param user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–π ID –±–µ—Å–µ–¥—ã.
		:param subgroup: –ü–æ–¥–≥—Ä—É–ø–ø–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–π ID –±–µ—Å–µ–¥—ã.
		"""

		logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã, –ø—ã—Ç–∞—é—Å—å —É–∑–Ω–∞—Ç—å ID –≥—Ä—É–ø–ø—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è...")

		# TODO: –ö–∞–∫–∏–º-—Ç–æ —Ö–∏—Ç—Ä—ã–º –æ–±—Ä–∞–∑–æ–º –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç ID?
		# TODO: –°–¥–µ–ª–∞—Ç—å –µ—â—ë –∫–∞–∫—É—é-—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫—É, –ø–æ—Å–∫–æ–ª—å–∫—É –±–æ—Ç –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –Ω–µ –≤ —Ç—É –±–µ—Å–µ–¥—É, –µ—Å–ª–∏ —É –Ω–∏—Ö —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏–º—è.

		for chat in await self.get_list_of_dialogues():
			if not chat.is_multiuser:
				continue

			if chat.name != subgroup.service_dialogue_name:
				continue

			logger.debug(f"–ù–∞–π–¥–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π ID –±–µ—Å–µ–¥—ã: {chat.id}")

			return chat.id

		return None

	async def handle_telegram_message(self, msg: Message, subgroup: "TelehooperSubGroup", user: "TelehooperUser", attachments: list[PhotoSize | Video | Audio | TelegramDocument | Voice | Sticker | VideoNote]) -> None:
		from api import TelehooperAPI


		try:
			message_text = msg.text or msg.caption or ""

			logger.debug(f"[TG] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: \"{message_text}\" –≤ \"{subgroup}\" {'—Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏' if attachments else ''}")

			# –ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ä–≤–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ (–∫–∏–∫–∞) –±–æ—Ç–∞ –∏–∑ –≥—Ä—É–ø–ø—ã, —Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ç–æ.
			if msg.left_chat_member and msg.left_chat_member.id == subgroup.parent.bot.id:
				await TelehooperAPI.delete_group_data(subgroup.parent.chat.id, fully_delete=True, bot=subgroup.parent.bot)

				return

			# –ü–æ–ª—É—á–∞–µ–º ID –±–µ—Å–µ–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è - –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –≥—Ä—É–ø–ø—ã.
			peer_id = subgroup.service_chat_id
			is_multiuser_chat = peer_id > 2000000000
			sent_by_owner = True

			if subgroup.parent.creatorID != user.telegramUser.id:
				peer_id = await self.find_real_chat_id(user, subgroup)
				sent_by_owner = False

				if not peer_id:
					return

			# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º "–æ—Ç–≤–µ—Ç—ã" –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
			reply_message_id = None
			if msg.reply_to_message and msg.reply_to_message.from_user:
				service_user_id = self.service_user_id
				saved_message = None

				# –ï—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –±–µ—Å–µ–¥–µ, –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –í–ö–æ–Ω–∞–∫—Ç–µ, –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–¥–µ–ª–∞–ª–∏ reply.
				# –ú—ã –∏—â–µ–º —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–∏—à—å –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞–ª –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –±–æ—Ç–∞.
				if is_multiuser_chat and not sent_by_owner:
					telegram_user_id = subgroup.parent.creatorID

					if msg.reply_to_message.from_user.id != subgroup.parent.bot.id:
						# –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–ø–ª–∞–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ª–∏–±–æ –º–∏–Ω–∏–±–æ—Ç–æ–º. –ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–µ–º –∏–º–µ–Ω–Ω–æ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.
						if msg.reply_to_message.from_user.username in subgroup.parent.associatedMinibots.values():
							# –≠—Ç–æ –º–∏–Ω–∏–±–æ—Ç, –∑–Ω–∞—á–∏—Ç –∏–∑–≤–ª–µ–∫–∞–µ–º Telegram User ID, –∫–æ—Ç–æ—Ä—ã–π –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º –º–∏–Ω–∏–±–æ—Ç–æ–º.
							# –ü—Ä–æ–±–ª–µ–º–∞, –æ–¥–Ω–∞–∫–æ, –≤ —Ç–æ–º, —á—Ç–æ –º–∏–Ω–∏–±–æ—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–∏—Å–≤–æ–µ–Ω—ã –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å—Ä–∞–∑—É.
							# –í–≤–∏–¥—É —ç—Ç–æ–≥–æ, —Ä–µ–ø–ª–∞–∏ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç :(

							pass
						else:
							# –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–ø–ª–∞–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ó–Ω–∞—á–∏—Ç –∏—â–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ ID —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
							telegram_user_id = msg.reply_to_message.from_user.id

					for serviceAPI in TelehooperAPI.get_service_apis():
						if serviceAPI.service_name != self.service_name:
							continue

						if serviceAPI.user.telegramUser.id != telegram_user_id:
							continue

						service_user_id = serviceAPI.service_user_id
						logger.debug(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–¥–µ–ª–∞–ª–∏ reply {service_user_id}")

				saved_message = await self.get_message_by_telegram_id(service_user_id, msg.reply_to_message.message_id)

				# –ï—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –±–µ—Å–µ–¥–µ, —Ç–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–¥–µ–ª–∞–Ω –æ—Ç–≤–µ—Ç,
				# –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –µ—Å–ª–∏ —Ä–µ–ø–ª–∞–π –±—ã–ª —Å–¥–µ–ª–∞–Ω –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
				#
				# –ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–æ–º—É, —á—Ç–æ –±–æ—Ç —Ö—Ä–∞–Ω–∏—Ç ConversationMID'—ã, –º—ã –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ "—Ä–µ–∞–ª—å–Ω—ã–π" ID –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ
				# —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.
				if is_multiuser_chat and not sent_by_owner and saved_message and saved_message.service_conversation_message_ids:
					reply_message_info = await self.vkAPI.messages_getByConversationMessageId(peer_id, saved_message.service_conversation_message_ids[0])
					if reply_message_info["items"]:
						reply_message_id = reply_message_info["items"][0]["id"]
				else:
					reply_message_id = saved_message.service_message_ids[0] if saved_message else None

			attachments_to_send: str | None = None
			if attachments:
				attachments_vk = cast(PhotoSize | Video | Audio | TelegramDocument | Voice | Sticker | VideoNote | str, attachments.copy())

				for attch_type in ["PhotoSize", "Video", "Audio", "Document", "Voice", "Sticker", "VideoNote"]:
					allow_multiple_uploads = attch_type != "Document"
					multiple_uploads_amount = 5 if allow_multiple_uploads else 1

					attchs_of_same_type = [attch for attch in attachments_vk if attch.__class__.__name__ == attch_type]

					if not attchs_of_same_type:
						continue

					# "–ì–æ—Ç–æ–≤–æ–µ" –∑–Ω–∞—á–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è. –ï—Å–ª–∏ —Ç—É—Ç –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–æ –º—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ-–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ.
					attachment_value: str | None = None

					# –ü–æ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
					attachments_results: list[dict] = []
					attachments_telegram_docs: list[TelegramDocument] = []
					filenames: list[str] = []
					for index in range(0, len(attchs_of_same_type), multiple_uploads_amount):
						attchs_of_same_type_part = attchs_of_same_type[index:index + multiple_uploads_amount]

						upload_url: str | None = None
						ext: str | None = None
						if attch_type == "PhotoSize":
							upload_url = (await self.vkAPI.photos_getMessagesUploadServer(peer_id=peer_id))["upload_url"]
							ext = "jpg"
						elif attch_type == "Voice":
							assert len(attachments) == 1, "–í–ª–æ–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ Voice –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –≤–ª–æ–∂–µ–Ω–∏—è–º–∏"

							upload_url = (await self.vkAPI.docs_getMessagesUploadServer(type="audio_message", peer_id=peer_id))["upload_url"]
							ext = "ogg"
						elif attch_type in ["Video", "VideoNote"]:
							upload_url = (await self.vkAPI.video_save(name="Video message", is_private=True, wallpost=False))["upload_url"]
							ext = "mp4"
						elif attch_type == "Sticker":
							assert len(attachments) == 1, "–í–ª–æ–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ Sticker –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –≤–ª–æ–∂–µ–Ω–∏—è–º–∏"

							# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫—ç—à–µ.
							sticker_cache_name = f"sticker{attachments[0].file_unique_id}static"
							attachment_value = await TelehooperAPI.get_attachment("VK", sticker_cache_name)

							if not attachment_value:
								upload_url = (await self.vkAPI.docs_getMessagesUploadServer(type="graffiti", peer_id=peer_id))["upload_url"]
								ext = "png"
						elif attch_type == "Document":
							# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫—ç—à–µ.
							document_cache_name = f"gif{attachments[0].file_unique_id}"
							attachment_value = await TelehooperAPI.get_attachment("VK", document_cache_name)

							if not attachment_value:
								upload_url = (await self.vkAPI.docs_getMessagesUploadServer(type="doc", peer_id=peer_id))["upload_url"]

								for file_same_type in attchs_of_same_type_part:
									filenames.append(cast(TelegramDocument, file_same_type).file_name or "unknown-filename.txt")
						elif attch_type == "Audio":
							error_message = await msg.reply(
								"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è</b>.\n"
								"\n"
								"–ú—É–∑—ã–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.",
								allow_sending_without_reply=True
							)

							# –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è.
							await asyncio.sleep(60)
							try:
								await error_message.delete()
							except:
								pass

							return
						else:
							raise TypeError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–ª–æ–∂–µ–Ω–∏—è {attch_type}")

						logger.debug(f"URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π —Ç–∏–ø–∞ {attch_type}: {upload_url}")

						# –í—ã–≥—Ä—É–∂–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞ –í–ö.
						if upload_url:
							assert ext or attch_type == "Document", f"–ù–µ –¥–∞–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏—è —Ç–∏–ø–∞ {attch_type}"

							async with aiohttp.ClientSession() as client:
								form_data = aiohttp.FormData()

								async def _download(index, file_id: str) -> tuple[int, bytes]:
									logger.debug(f"–ó–∞–≥—Ä—É–∂–∞—é –≤–ª–æ–∂–µ–Ω–∏–µ #{index} –∏–∑ Telegram —Å FileID {file_id}")

									file = await subgroup.parent.bot.download(file_id)
									assert file, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ –∏–∑ Telegram"

									return index, file.read()

								# –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –≤–ª–æ–∂–µ–Ω–∏–π.
								tasks = []
								for index, attach in enumerate(attchs_of_same_type_part):
									attach = cast(PhotoSize | Audio | TelegramDocument | Video | Voice, attach)

									tasks.append(_download(index, attach.file_id))

								# –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–∂–¥–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫.
								downloaded_results = await asyncio.gather(*tasks)
								downloaded_results.sort(key=lambda x: x[0])

								for index, file_bytes in downloaded_results:
									# –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É "no_file", –µ—Å–ª–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
									# –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤ —Ç.—á. –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π) –≤ FormData –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª–µ "file1" –≤–º–µ—Å—Ç–æ "file".
									field_name = "file"
									if len(attchs_of_same_type_part) > 1:
										field_name = f"file{index}"

									# –ï—Å–ª–∏ –Ω–∞–º –¥–∞–Ω —Å—Ç–∏–∫–µ—Ä, —Ç–æ –∏–∑–º–µ–Ω—è–µ–º –µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.
									if attch_type == "Sticker":
										try:
											file_bytes = await prepare_sticker(file_bytes)
										except PIL.UnidentifiedImageError as error:
											error_message = await msg.reply(
												"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è</b>.\n"
												"\n"
												"–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.",
												allow_sending_without_reply=True
											)

											# –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è.
											await asyncio.sleep(60)
											try:
												await error_message.delete()
											except:
												pass

											return

									# –ï—Å–ª–∏ –Ω–∞–º –¥–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –≤–∏–¥–µ–æ, —Ç–æ –º—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –µ–≥–æ –≤ gif.
									this_attach = attchs_of_same_type_part[index]
									if len(attchs_of_same_type_part) == 1 and isinstance(this_attach, TelegramDocument) and this_attach.mime_type == "video/mp4":
										try:
											file_bytes = await utils.convert_mp4_to_gif(file_bytes)
										except Exception as error:
											raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ mp4 –∏–∑ Telegram –∫–∞–∫ gif")

									form_data.add_field(name=field_name, value=file_bytes, filename=f"file{index}.{ext}" if ext else filenames.pop(0))

								# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞ –í–ö.
								async with client.post(upload_url, data=form_data) as response:
									assert response.status == 200, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ {attch_type}"
									response = VKAPI._parse_response(await response.json(content_type=None), "_get.server_")

									attachments_results.append(response)
									attachments_telegram_docs.append(attchs_of_same_type_part[index]) # type: ignore

					# –ó–∞–∫–æ–Ω—á–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ –≤–ª–æ–∂–µ–Ω–∏—è –ø–∞—á–∫–∞–º–∏ –ø–æ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
					# –ì–æ–≤–æ—Ä–∏–º –í–ö, —á—Ç–æ –º—ã —Ö–æ—Ç–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
					attachment_str_list: list[str] = []

					# –ï—Å–ª–∏ –º—ã —É–∂–µ –∏–∑–≤–ª–µ–∫–ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞, —Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∏—Ö –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫.
					if attachment_value:
						attachment_str_list.append(attachment_value)
					else:
						for index, attachment in enumerate(attachments_results):
							telegram_document = attachments_telegram_docs[index]

							if attch_type == "PhotoSize":
								assert attachment["photo"], "–û–±—ä–µ–∫—Ç photo —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç—ã–º"
								resp = await self.vkAPI.photos_saveMessagesPhoto(photo=attachment["photo"], server=attachment["server"], hash=attachment["hash"])

								for saved_attch in resp:
									attachment_str_list.append(get_attachment_key(saved_attch, type="photo"))
							elif attch_type == "Voice":
								saved_attch = (await self.vkAPI.docs_save(file=attachment["file"], title="Voice message"))["audio_message"]

								attachment_str_list.append(get_attachment_key(saved_attch, type="doc"))
							elif attch_type in ["Video", "VideoNote"]:
								attachment_str_list.append(get_attachment_key(attachment, type="video"))
							elif attch_type == "Sticker":
								saved_attch = (await self.vkAPI.docs_save(file=attachment["file"], title="Sticker"))["graffiti"]

								attachment_str = get_attachment_key(saved_attch, type="doc")
								attachment_str_list.append(attachment_str)

								# –°—Ç–∏–∫–µ—Ä—ã –Ω–∞–º –Ω—É–∂–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ —Ä–∞–∑—Ä–µ—à–∏–ª.
								if await self.user.get_setting("Security.MediaCache"):
									await TelehooperAPI.save_attachment(
										"VK",
										f"sticker{telegram_document.file_unique_id}static",
										attachment_str
									)
							elif attch_type == "Document":
								saved_attch = (await self.vkAPI.docs_save(file=attachment["file"]))["doc"]

								attachment_str = get_attachment_key(saved_attch, type="doc")
								attachment_str_list.append(attachment_str)

								# –ï—Å–ª–∏ —É –Ω–∞—Å –≥–∏—Ñ–∫–∞, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–µ—à–∏–ª –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–æ –∫—ç—à–∏—Ä—É–µ–º.
								if isinstance(telegram_document, TelegramDocument) and telegram_document.mime_type == "video/mp4" and await self.user.get_setting("Security.MediaCache"):
									await TelehooperAPI.save_attachment(
										"VK",
										f"gif{telegram_document.file_unique_id}",
										attachment_str
									)

					# –¢–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞ —Ç–µ, —á—Ç–æ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –í–ö.
					for index, attch in enumerate(attachments_vk):
						if attch.__class__.__name__ != attch_type:
							continue

						attachments_vk[index] = attachment_str_list.pop(0) # type: ignore

				# –ú—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏! –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –≤—Å–µ –≤–ª–æ–∂–µ–Ω–∏—è.
				assert all(isinstance(attch, str) for attch in attachments_vk), "–ù–µ –≤—Å–µ –≤–ª–æ–∂–µ–Ω–∏—è –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã"

				attachments_to_send = ",".join(cast(list[str], attachments_vk))

				logger.debug(f"–í–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {attachments_to_send}")

			# –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–π, –∞ —Ç–∞–∫ –∂–µ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ –º—ã –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
			if not attachments_to_send and not message_text:
				return

			# –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π, –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–±—ã –±–æ—Ç –∑–Ω–∞–ª, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –∏ –≤–ø—Ä–∞–≤–¥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.
			# –ü–æ—è—Å–Ω–µ–Ω–∏–µ: –ò–Ω–æ–≥–¥–∞, longpoll –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ä–∞–Ω—å—à–µ, —á–µ–º messages.send –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
			subgroup.pre_message_cache[message_text.lower().strip()] = None

			# –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ, —Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–æ–Ω–ª–∞–π–Ω".
			# –ü–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, —á—Ç–æ —Å –º–æ–º–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω–∞ –±–æ—Ç–æ–º –ø—Ä–æ—à–ª–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥.
			if utils.time_since(self._lastOnlineStatus) > 60 and self.get_bucket_size("message") < 5 and await self.user.get_setting("Services.VK.SetOnline"):
				self._lastOnlineStatus = utils.get_timestamp()

				await self.set_online()

			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
			vk_message_id = await self.send_message(
				chat_id=peer_id,
				text=message_text,
				reply_to_message=reply_message_id,
				attachments=attachments_to_send,
				latitude=msg.location.latitude if msg.location else None,
				longitude=msg.location.longitude if msg.location else None
			)

			# –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–π –æ—á–µ—Ä–µ–¥–∏.
			if not vk_message_id:
				return

			# –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –±–µ—Å–µ–¥—É, —Ç–æ –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å ConversationMID –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏.
			conversation_mid = None
			if is_multiuser_chat:
				try:
					message_data = await self.vkAPI.messages_getById(vk_message_id)
					if message_data and message_data["items"]:
						message_data = message_data["items"][0]

					conversation_mid = message_data["conversation_message_id"]
				except:
					pass

			# –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è.
			await TelehooperAPI.save_message(
				"VK",
				self.service_user_id,
				msg.message_id,
				vk_message_id,
				conversation_mid,
				sent_via_bot=True
			)
		except TooManyRequestsException:
			await msg.reply(
				"<b>‚ö†Ô∏è –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ</b>.\n"
				"\n"
				"–°–µ—Ä–≤–µ—Ä–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –ø–µ—Ä–µ–¥–∞–ª–∏ –æ—à–∏–±–∫—É –æ —Ç–æ–º, —á—Ç–æ –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–∂–µ.\n"
				"\n"
				"‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –í–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram, –≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ, –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ —ç—Ç–æ–π –æ—à–∏–±–∫–∏.",
				allow_sending_without_reply=True
			)
		except Exception as error:
			logger.exception(f"[TG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {utils.get_telegram_logging_info(msg.from_user)}:", error)

			await msg.reply(
				"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>.\n"
				"\n"
				"<i><b>–£–ø—Å!</b></i> –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ –±–æ—Ç —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –æ—à–∏–±–∫–æ–π –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. üòì\n"
				"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –í–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.\n"
				"\n"
				"<b>–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –í–∞—Å –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å</b>:\n"
				f"<code>{error.__class__.__name__}: {error}</code>.\n"
				"\n"
				f"‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â–∏ –ª–∏–±–æ —Å–æ–∑–¥–∞—Ç—å –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç (Github Issue), –ø–æ —Å—Å—ã–ª–∫–µ –≤ –∫–æ–º–∞–Ω–¥–µ <a href=\"{utils.create_command_url('/h 6')}\">/help</a>.",
				allow_sending_without_reply=True
			)

		# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º.
		await self.update_last_activity()

	async def handle_telegram_message_delete(self, msg: Message, subgroup: "TelehooperSubGroup", user: "TelehooperUser") -> None:
		from api import TelehooperAPI


		logger.debug(f"[TG] –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: \"{msg.text}\" –≤ \"{subgroup}\"")

		saved_message = await self.get_message_by_telegram_id(self.service_user_id, msg.message_id)

		if not saved_message:
			error_message = await subgroup.send_message_in(
				"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è</b>.\n"
				"\n"
				"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –±–æ—Ç–æ–º, –ø–æ—ç—Ç–æ–º—É –æ–Ω–æ –Ω–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.",
				silent=True
			)

			# –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è.
			if error_message:
				await asyncio.sleep(60)
				try:
					await subgroup.delete_message(error_message)
				except:
					pass

			return

		try:
			await self.vkAPI.messages_delete(saved_message.service_message_ids)
		except AccessDeniedException:
			# TODO: –£—Ç–æ—á–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∏–∞–ª–æ–≥–∞.

			reason = "–ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 24-—Ö —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è."
			if not saved_message.sent_via_bot:
				reason = "–í—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –í–∞—à–∏–º —Å–æ–±–µ–¥–µ—Å–µ–¥–Ω–∏–∫–æ–º, –ª–∏–±–æ –∂–µ –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –±–µ—Å–µ–¥–µ."

			error_message = await subgroup.send_message_in(
				"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è</b>.\n"
				"\n"
				f"{reason}",
				silent=True
			)

			# –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è.
			if error_message:
				await asyncio.sleep(60)
				try:
					await subgroup.delete_message(error_message)
				except:
					pass

			return

		# –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
		await TelehooperAPI.delete_message(
			"VK",
			saved_message.service_message_ids
		)

	async def handle_telegram_message_edit(self, msg: Message, subgroup: "TelehooperSubGroup", user: "TelehooperUser") -> None:
		logger.debug(f"[TG] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: \"{msg.text}\" –≤ \"{subgroup}\"")

		saved_message = await self.get_message_by_telegram_id(self.service_user_id, msg.message_id)

		if not saved_message:
			error_message = await subgroup.send_message_in(
				"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è</b>.\n"
				"\n"
				"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –±–æ—Ç–æ–º, –ø–æ—ç—Ç–æ–º—É –æ–Ω–æ –Ω–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.",
				silent=True,
				reply_to=msg.message_id
			)

			# –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è.
			if error_message:
				await asyncio.sleep(60)
				try:
					await subgroup.delete_message(error_message)
				except:
					pass

			return

		# –ü–æ–ª—É—á–∞–µ–º ID –±–µ—Å–µ–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ —Ç–æ—Ç, –∫—Ç–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –≥—Ä—É–ø–ø—ã.
		peer_id = subgroup.service_chat_id
		sent_by_owner = True

		if subgroup.parent.creatorID != user.telegramUser.id:
			peer_id = await self.find_real_chat_id(user, subgroup)
			sent_by_owner = False

			if not peer_id:
				return

		try:
			await self.vkAPI.messages_edit(
				message_id=saved_message.service_message_ids[0],
				peer_id=peer_id,
				message=msg.text or "[–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]"
			)
		except AccessDeniedException:
			error_message = await subgroup.send_message_in(
				"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è</b>.\n"
				"\n"
				f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ —á—Ç–æ –±—ã –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.",
				silent=True
			)

			# –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è.
			if error_message:
				await asyncio.sleep(60)
				try:
					await subgroup.delete_message(error_message)
				except:
					pass

	async def handle_telegram_message_read(self, subgroup: "TelehooperSubGroup", user: "TelehooperUser") -> None:
		logger.debug(f"[TG] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –≤ \"{subgroup}\"")

		# –ü–æ–ª—É—á–∞–µ–º ID –±–µ—Å–µ–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ —Ç–æ—Ç, –∫—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –≥—Ä—É–ø–ø—ã.
		peer_id = subgroup.service_chat_id
		sent_by_owner = True

		if subgroup.parent.creatorID != user.telegramUser.id:
			peer_id = await self.find_real_chat_id(user, subgroup)
			sent_by_owner = False

			if not peer_id:
				return

		await self.read_message(peer_id)

	async def handle_telegram_callback_button(self, query: CallbackQuery, subgroup: "TelehooperSubGroup", user: "TelehooperUser") -> None:
		from api import TelehooperAPI

		assert query.data, "–ù–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ Callback query"
		assert query.message, "–ù–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–Ω–æ–ø–∫–∞ –¥–ª—è Callback query"

		logger.debug(f"[TG] –û–±—Ä–∞–±–æ—Ç–∫–∞ Inline callback query —Å–µ—Ä–≤–∏—Å–∞ –≤ Telegram –≤ \"{subgroup}\"")

		# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞.
		saved_message = await self.get_message_by_telegram_id(self.service_user_id, query.message.message_id)

		# –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Inline callback query –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞.
		service_callback_query = subgroup.get_callback_btn(query.data)

		# –ï—Å–ª–∏ —Ç–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞, —Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É.
		if not (saved_message and service_callback_query):
			await query.answer(
				"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏.\n"
				"\n"
				"‚ÑπÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π –µ—â—ë —Ä–∞–∑ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
				show_alert=True
			)

			return

		# –ü–æ–ª—É—á–∞–µ–º ID –±–µ—Å–µ–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ —Ç–æ—Ç, –∫—Ç–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –≥—Ä—É–ø–ø—ã.
		peer_id = subgroup.service_chat_id
		sent_by_owner = True

		if subgroup.parent.creatorID != user.telegramUser.id:
			peer_id = await self.find_real_chat_id(user, subgroup)
			sent_by_owner = False

			if not peer_id:
				return

		await self.send_callback(saved_message.service_message_ids[0], peer_id, service_callback_query)

	async def get_message_by_telegram_id(self, service_owner_id: int, message_id: int, bypass_cache: bool = False) -> Optional["TelehooperMessage"]:
		from api import TelehooperAPI

		return await TelehooperAPI.get_message_by_telegram_id("VK", message_id, service_owner_id, bypass_cache=bypass_cache)

	async def get_message_by_service_id(self, service_owner_id: int, message_id: int, bypass_cache: bool = False) -> Optional["TelehooperMessage"]:
		from api import TelehooperAPI

		return await TelehooperAPI.get_message_by_service_id("VK", message_id, service_owner_id, bypass_cache=bypass_cache)

	@staticmethod
	async def reconnect_on_restart(user: "TelehooperUser", db_user: Document, bot: Bot) -> Optional["VKServiceAPI"]:
		vkServiceAPI = None

		# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
		# –¢–æ–∫–µ–Ω –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Security.StoreTokens –±—ã–ª–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –∑–Ω–∞—á–µ–Ω–∏–µ ¬´–≤—ã–∫–ª—é—á–µ–Ω–æ¬ª.
		if not db_user["Connections"]["VK"]["Token"]:
			db_user["Connections"].pop("VK")
			await db_user.save()

			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
			await bot.send_message(
				chat_id=db_user["ID"],
				text=utils.replace_placeholders(
					"<b>‚ö†Ô∏è –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ</b>.\n"
					"\n"
					"Telehooper –ø–æ—Ç–µ—Ä—è–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π ¬´–í–ö–æ–Ω—Ç–∞–∫—Ç–µ¬ª, –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ {{Security.StoreTokens}} –±—ã–ª–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –∑–Ω–∞—á–µ–Ω–∏–µ ¬´–≤—ã–∫–ª—é—á–µ–Ω–æ¬ª.\n"
					"\n"
					"‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ¬´–í–ö–æ–Ω—Ç–∞–∫—Ç–µ¬ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /connect.\n"
				)
			)

			return

		# –°–æ–∑–¥–∞—ë–º Longpoll.
		try:
			vkServiceAPI = VKServiceAPI(
				token=SecretStr(utils.decrypt_with_env_key(db_user["Connections"]["VK"]["Token"])),
				vk_user_id=db_user["Connections"]["VK"]["ID"],
				user=user
			)
			user.save_connection(vkServiceAPI)

			# –ó–∞–ø—É—Å–∫–∞–µ–º Longpoll.
			await vkServiceAPI.start_listening(bot)

			# –í–æ–∑–≤—Ä–∞—â–∞–µ–º ServiceAPI.
			return vkServiceAPI
		except Exception as error:
			logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å LongPoll –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {utils.get_telegram_logging_info(user.telegramUser)}:", error)

			# –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö, —Å–∞–º –æ–±—ä–µ–∫—Ç VKServiceAPI –º–æ–∂–µ—Ç –±—ã—Ç—å None,
			# –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω.
			# –í —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–∏ –ø–æ–º–æ—â–∏
			# —Ñ–µ–π–∫–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ VKServiceAPI.
			if vkServiceAPI is None:
				vkServiceAPI = VKServiceAPI(
					token=None, # type: ignore
					vk_user_id=db_user["Connections"]["VK"]["ID"],
					user=user
				)

			# –°–æ–≤–µ—Ä—à–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ.
			await vkServiceAPI.disconnect_service(ServiceDisconnectReason.ERRORED)

			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
			await bot.send_message(
				chat_id=db_user["ID"],
				text=(
					"<b>‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ</b>.\n"
					"\n"
					"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–≤–∏–¥—É –æ—à–∏–±–∫–∏ –±–æ—Ç–∞, —É Telehooper –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –í–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π ¬´–í–ö–æ–Ω—Ç–∞–∫—Ç–µ¬ª.\n"
					"–í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –í—ã –Ω–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –Ω–µ–º—É.\n"
					"\n"
					"‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É ¬´–í–ö–æ–Ω—Ç–∞–∫—Ç–µ¬ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /connect.\n"
				)
			)

	async def update_last_activity(self) -> None:
		await self.user.refresh_document()

		self.user.document["Connections"]["VK"]["LastActivityAt"] = utils.get_timestamp()

		# –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö —Å–ª—É—á–∞–µ—Ç—Å—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç.
		# –¢–∞–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–µ –æ—á–µ–Ω—å —Å—Ç—Ä–∞—à–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –ø–æ—ç—Ç–æ–º—É —Ç–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—ë.
		try:
			await self.user.document.save()
		except:
			pass
