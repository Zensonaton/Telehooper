# coding: utf-8

from __future__ import annotations

import asyncio
from typing import TYPE_CHECKING, Literal, Optional, cast

import aiohttp
from aiocouch import Document
from aiogram import Bot
from aiogram.types import Audio, BufferedInputFile
from aiogram.types import Document as TelegramDocument
from aiogram.types import (InlineKeyboardButton, InlineKeyboardMarkup,
                           InputMediaAudio, InputMediaDocument,
                           InputMediaPhoto, InputMediaVideo, Location, Message,
                           PhotoSize, Sticker, Video, VideoNote, Voice)
from aiogram.utils.chat_action import ChatActionSender
import cachetools
from loguru import logger
from pydantic import SecretStr

import utils
from config import config
from DB import get_user
from services.service_api_base import (BaseTelehooperServiceAPI,
                                       ServiceDialogue,
                                       ServiceDisconnectReason,
                                       TelehooperServiceUserInfo)
from services.vk.exceptions import AccessDeniedException, TokenRevokedException
from services.vk.utils import create_message_link
from services.vk.vk_api.api import VKAPI
from services.vk.vk_api.longpoll import (BaseVKLongpollEvent,
                                         LongpollMessageEditEvent,
                                         LongpollMessageFlagsEdit,
                                         LongpollNewMessageEvent,
                                         LongpollTypingEvent,
                                         LongpollTypingEventMultiple,
                                         LongpollVoiceMessageEvent,
                                         VKAPILongpoll)

if TYPE_CHECKING:
	from api import TelehooperMessage, TelehooperSubGroup, TelehooperUser


class VKServiceAPI(BaseTelehooperServiceAPI):
	"""
	Service API –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. –î–∞–Ω–Ω—ã–π Service API –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–º.
	"""

	token: SecretStr
	"""–¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ."""
	vkAPI: VKAPI
	"""–û–±—ä–µ–∫—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ."""

	_cachedDialogues: list = []
	"""–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤."""
	_longPollTask: asyncio.Task | None = None
	"""–ó–∞–¥–∞—á–∞, –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è longpoll."""
	_lastOnlineStatus: int = 0
	"""UNIX-timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ `Security.StoreTokens`."""
	_cachedUsersInfo: cachetools.TLRUCache[int, TelehooperServiceUserInfo] = cachetools.TLRUCache(maxsize=80, ttu=lambda _, value, now: now + 5 * 60)  # 80 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, 5 –º–∏–Ω—É—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è.
	"""–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è."""

	def __init__(self, token: SecretStr, vk_user_id: int, user: "TelehooperUser") -> None:
		super().__init__("VK", vk_user_id, user)

		self.token = token
		self.user = user

		self.vkAPI = VKAPI(self.token)

	async def start_listening(self, bot: Bot | None = None) -> asyncio.Task:
		async def handle_updates() -> None:
			try:
				longpoll = VKAPILongpoll(self.vkAPI, user_id=self.service_user_id)

				async for event in longpoll.listen_for_updates():
					await self.handle_update(event)
			except TokenRevokedException as e:
				# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞.
				if bot:
					try:
						await bot.send_message(
							chat_id=self.user.telegramUser.id,
							text=(
								"<b>‚ö†Ô∏è –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ</b>.\n"
								"\n"
								f"Telehooper –ø–æ—Ç–µ—Ä—è–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π ¬´–í–ö–æ–Ω—Ç–∞–∫—Ç–µ¬ª, –ø–æ—Å–∫–æ–ª—å–∫—É –≤–ª–∞–¥–µ–ª–µ—Ü —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–æ–∑–≤–∞–ª –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–π —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ¬´–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏¬ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã.\n"
								"\n"
								"‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ¬´–í–ö–æ–Ω—Ç–∞–∫—Ç–µ¬ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /connect.\n"
							)
						)
					except:
						pass

				# –°–æ–≤–µ—Ä—à–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ.
				await self.disconnect_service(ServiceDisconnectReason.ERRORED)
			except Exception as e:
				logger.exception(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ (start_listening) –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, —Å–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {utils.get_telegram_logging_info(self.user.telegramUser)}:", e)

		self._longPollTask = asyncio.create_task(handle_updates())
		return self._longPollTask

	async def handle_update(self, event: BaseVKLongpollEvent) -> None:
		"""
		–ú–µ—Ç–æ–¥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π —Å–æ–±—ã—Ç–∏—è VK Longpoll.

		:param event: –°–æ–±—ã—Ç–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å longpoll-—Å–µ—Ä–≤–µ—Ä–∞.
		"""

		logger.debug(f"[VK] –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ {event.__class__.__name__}: {event.event_data}")

		if type(event) is LongpollNewMessageEvent:
			await self.handle_new_message(event)
		elif type(event) is LongpollTypingEvent or type(event) is LongpollTypingEventMultiple or type(event) is LongpollVoiceMessageEvent:
			await self.handle_typing(event)
		elif type(event) is LongpollMessageEditEvent:
			await self.handle_edit(event)
		elif type(event) is LongpollMessageFlagsEdit:
			await self.handle_message_flags_change(event)
		else:
			logger.warning(f"[VK] –ú–µ—Ç–æ–¥ handle_update —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º {event.__class__.__name__}: {event.event_data}")

	async def handle_new_message(self, event: LongpollNewMessageEvent) -> None:
		"""
		–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.

		:param event: –°–æ–±—ã—Ç–∏–µ —Ç–∏–ø–∞ `LongpollNewMessageEvent`, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å longpoll-—Å–µ—Ä–≤–µ—Ä–∞.
		"""

		from api import TelehooperAPI


		subgroup = TelehooperAPI.get_subgroup_by_service_dialogue(self.user, ServiceDialogue(service_name=self.service_name, id=event.peer_id))

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
		if not subgroup:
			return

		logger.debug(f"[VK] –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º \"{event.text}\", –¥–ª—è –ø–æ–¥–≥—Ä—É–ø–ø—ã \"{subgroup.service_dialogue_name}\"")

		# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		await self.user.refresh_document()

		message_url = None
		keyboard = None
		try:
			attachment_media: list[InputMediaAudio | InputMediaDocument | InputMediaPhoto | InputMediaVideo] = []
			attachment_items: list[str] = []
			use_compact_names = await self.user.get_setting("Services.VK.CompactNames")
			use_mobile_vk = await self.user.get_setting("Services.VK.MobileVKURLs")
			message_url = create_message_link(event.peer_id, event.message_id, use_mobile=use_mobile_vk)
			ignore_outbox_debug = config.debug and await self.user.get_setting("Debug.SentViaBotInform")
			is_outbox = event.flags.outbox
			is_inbox = not is_outbox
			is_group = event.peer_id < 0
			is_convo = event.peer_id > 2e9
			is_user = not is_group and not is_convo
			from_self = (not is_convo and is_outbox) or (is_convo and event.from_id and event.from_id == self.service_user_id)

			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –±–æ—Ç—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
			if is_outbox and not (ignore_outbox_debug or await self.user.get_setting("Services.VK.ViaServiceMessages")):
				return

			# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
			#
			# –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∑–¥–µ—Å—å –Ω—É–∂–Ω–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–Ω—å—à–µ, —á–µ–º –æ–Ω–æ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î.
			# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å - —ç—Ç–æ –≤–µ—Å–µ–ª–æ! ü§°
			await asyncio.sleep(0.05)
			msg_saved = await subgroup.service.get_message_by_service_id(event.message_id)

			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–∏–º –±–æ—Ç–æ–º.
			sent_via_bot = msg_saved and msg_saved.sent_via_bot
			if sent_via_bot and not ignore_outbox_debug:
				return

			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –±–µ—Å–µ–¥—ã –∏–∑ –í–ö.
			if is_convo and event.source_act:
				# –ó–¥–µ—Å—å –º—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ—Å–∫–æ–ª—å–∫—É —Å —Ç–∞–∫–æ–≤—ã–º–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –Ω–µ–ª—å–∑—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.
				# TODO: –°–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É, —á—Ç–æ –±—ã –±–æ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è.

				issuer_name_with_link = None
				victim_name_with_link = None

				if event.from_id:
					issuer_info = await self.get_user_info(event.from_id)

					issuer_name_with_link = f"<a href=\"{'m.' if use_mobile_vk else ''}vk.com/id{event.from_id}\">{utils.compact_name(issuer_info.name) if use_compact_names else issuer_info.name}</a>"

				if event.source_mid:
					victim_info = await self.get_user_info(event.source_mid)

					victim_name_with_link = f"<a href=\"{'m.' if use_mobile_vk else ''}vk.com/id{event.source_mid}\">{utils.compact_name(victim_info.name) if use_compact_names else victim_info.name}</a>"

				messages = {
					"chat_photo_update": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{issuer_name_with_link}</b> <b>–æ–±–Ω–æ–≤–∏–ª(-–∞)</b> —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–µ—Å–µ–¥—ã",
					"chat_photo_remove": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{issuer_name_with_link}</b> <b>—É–¥–∞–ª–∏–ª(-–∞)</b> —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–µ—Å–µ–¥—ã",
					"chat_create": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{issuer_name_with_link}</b> —Å–æ–∑–¥–∞–ª(-–∞) <b>–Ω–æ–≤—É—é –±–µ—Å–µ–¥—É</b>: <b>¬´{event.source_text}¬ª</b>",
					"chat_title_update": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{issuer_name_with_link}</b> <b>–∏–∑–º–µ–Ω–∏–ª(-–∞)</b> –∏–º—è –±–µ—Å–µ–¥—ã –Ω–∞ <b>¬´{event.source_text}¬ª</b>",
					"chat_invite_user": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{issuer_name_with_link}</b> <b>–¥–æ–±–∞–≤–∏–ª(-–∞)</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{victim_name_with_link}</b>",
					"chat_kick_user": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{issuer_name_with_link}</b> <b>—É–¥–∞–ª–∏–ª(-–∞)</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{victim_name_with_link}</b> –∏–∑ –±–µ—Å–µ–¥—ã",
					"chat_invite_user_by_link": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{victim_name_with_link}</b> <b>–ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª—Å—è(-–∞—Å—å)</b> –∫ –±–µ—Å–µ–¥–µ –∏—Å–ø–æ–ª—å–∑—É—è <b>–ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É</b>",
					"chat_invite_user_by_message_request": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{victim_name_with_link}</b> <b>–ø—Ä–∏—Å–æ–¥–µ–Ω–∏–ª—Å—è(-–∞—Å—å)</b> –∫ –±–µ—Å–µ–¥–µ –∏—Å–ø–æ–ª—å–∑—É—è <b>–∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ</b>",
					"chat_pin_message": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{issuer_name_with_link}</b> <b>–∑–∞–∫—Ä–µ–ø–∏–ª(-–∞)</b> —Å–æ–æ–±—â–µ–Ω–∏–µ",
					"chat_unpin_message": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{issuer_name_with_link}</b> <b>–æ—Ç–∫—Ä–µ–ø–∏–ª(-–∞)</b> –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
					"chat_screenshot": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{victim_name_with_link}</b> —Å–¥–µ–ª–∞–ª(-–∞) <b>—Å–∫—Ä–∏–Ω—à–æ—Ç —á–∞—Ç–∞</b>",
					"conversation_style_update": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{issuer_name_with_link}</b> <b>–æ–±–Ω–æ–≤–∏–ª</b> —Å—Ç–∏–ª—å —á–∞—Ç–∞"
					# "call_ended": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{victim_name_with_link}</b> –Ω–∞—á–∞–ª(-–∞) <b>–≤—ã–∑–æ–≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ</b>. –ü—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç—å—Å—è –º–æ–∂–Ω–æ <a href=\"https://vk.com/call/join/{group_chat_join_link}\">–ø–æ —Å—Å—ã–ª–∫–µ</a>"
				}
				message = messages.get(event.source_act)

				if not message:
					logger.warning(f"[VK] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –±–µ—Å–µ–¥—ã: {event.source_act}")

					message = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: <code>¬´{event.source_act}¬ª</code>"

					return

				await subgroup.send_message_in(f"‚ÑπÔ∏è  {message}  ‚ÑπÔ∏è", disable_web_preview=True)

				return

			# –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º, –∞ —Ç–∞–∫ –∂–µ –ø–∞—Ä—Å–∏–º –≤–ª–æ–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
			reply_to = None

			# –ü–∞—Ä—Å–∏–º –≤–ª–æ–∂–µ–Ω–∏—è.
			if event.attachments or is_group:
				attachments = event.attachments.copy()

				# –î–æ–±—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.
				message_extended = (await self.vkAPI.messages_getById(event.message_id))["items"][0]

				# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã (reply).
				if "reply" in attachments or ("fwd_messages" in message_extended and len(message_extended["fwd_messages"]) == 1 and await self.user.get_setting("Services.VK.FWDAsReply")):
					reply_vk_message_id = message_extended["reply_message"]["id"] if "reply" in attachments else message_extended["fwd_messages"][0]["id"]

					# –ù–∞—Å—Ç–æ—è—â–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª –¥–∞–Ω –æ—Ç–≤–µ—Ç, –ø–æ–ª—É—á–µ–Ω. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –ë–î –±–æ—Ç–∞.
					telegram_message = await subgroup.service.get_message_by_service_id(reply_vk_message_id)

					# –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å, —Ç–æ –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.
					if telegram_message:
						reply_to = telegram_message.telegram_message_ids[0]

				# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
				if "keyboard" in message_extended:
					buttons = []

					for row in message_extended["keyboard"]["buttons"]:
						current_row = []

						for button in row:
							button_type = button["action"]["type"]

							if button_type == "text":
								current_row.append(InlineKeyboardButton(text=button["action"]["label"], callback_data=button["action"]["payload"] or "do-nothing"))
							else:
								logger.warning(f"[VK] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø action –¥–ª—è –∫–Ω–æ–ø–∫–∏: \"{button_type}\"")

								current_row.append(InlineKeyboardButton(text=f"‚ùî –ö–Ω–æ–ø–∫–∞ —Ç–∏–ø–∞ {button_type}", callback_data=button["action"]["payload"] or "do-nothing"))

						buttons.append(current_row)

					keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

				# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ.
				if message_extended.get("fwd_messages") and not reply_to:
					fwd_messages = message_extended["fwd_messages"]

					attachment_items.append(f"<a href=\"{message_url}\">üîÅ {'–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' if len(fwd_messages) == 1 else str(len(fwd_messages)) + ' –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π'}</a>")

				# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–µ–æ-–≤–ª–æ–∂–µ–Ω–∏—è.
				if "geo" in attachments:
					attachment = message_extended["geo"]

					# –í—ã—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
					msg = await subgroup.send_geo(
						latitude=attachment["coordinates"]["latitude"],
						longitude=attachment["coordinates"]["longitude"],
						silent=is_outbox,
						reply_to=reply_to
					)

					# –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à—ë–ª rate limit, —Ç–æ msg –±—É–¥–µ—Ç None.
					if not msg:
						return

					await TelehooperAPI.save_message(
						"VK",
						msg[0].message_id,
						event.message_id,
						False
					)

					return

				# –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –≤–ª–æ–∂–µ–Ω–∏—è–º.
				if message_extended and "attachments" in message_extended:
					for attch_index, attachment in enumerate(message_extended["attachments"]):
						attachment_type = attachment["type"]
						attachment = attachment[attachment["type"]]

						if attachment_type == "photo":
							attachment_media.append(InputMediaPhoto(type="photo", media=attachment["sizes"][-1]["url"]))
						elif attachment_type == "video":
							# –¢–∞–∫ –∫–∞–∫ –í–ö –Ω–µ –≤—ã–¥–∞—é—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ—ë –∏–∑–≤–ª–µ—á—å –∏–∑ API.
							# –ß—Ç–æ –≤–∞–∂–Ω–æ, –ø–µ—Ä–µ–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞–ø—Ä—è–º—É—é –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø–æ—Å–∫–æ–ª—å–∫—É –í–ö –ø—Ä–æ–≤–µ—Ä—è–µ—Ç
							# UserAgent –∏ IP –∞–¥—Ä–µ—Å, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª —Å–¥–µ–ª–∞–Ω –∑–∞–ø—Ä–æ—Å.

							# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ (–∫—Ä—É–∂–æ—á–µ–∫) –ª–∏ —ç—Ç–æ?
							is_video_note = attachments.get(f"attach{attch_index + 1}_kind") == "video_message"

							async with ChatActionSender(chat_id=subgroup.parent.chat.id, action="upload_video", bot=subgroup.parent.bot):
								video = (await self.vkAPI.video_get(videos=f"{attachment['owner_id']}_{attachment['id']}_{attachment['access_key']}"))["items"][0]["files"]

								video_quality_list = ["mp4_720", "mp4_480", "mp4_360", "mp4_240", "mp4_144"]

								# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–µ—à–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤ 1080p, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫.
								if await self.user.get_setting("Services.VK.HDVideo"):
									video_quality_list.insert(0, "mp4_1080")

								for quality in video_quality_list:
									is_last = quality == "mp4_144"

									if quality not in video:
										continue

									logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º {quality}: {video[quality]}")

									# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ.
									async with aiohttp.ClientSession() as client:
										async with client.get(video[quality]) as response:
											assert response.status == 200, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º {quality}"

											video_bytes = b""

											while True:
												chunk = await response.content.read(1024)
												if not chunk:
													break

												video_bytes += chunk

												# –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50 –ú–ë.
												if len(video_bytes) > 50 * 1024 * 1024:
													if is_last:
														raise Exception("–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")

													logger.debug(f"–§–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º {quality} –æ–∫–∞–∑–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({len(video_bytes)} –±–∞–π—Ç).")

													continue

									# –ï—Å–ª–∏ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ (–∫—Ä—É–∂–æ—á–µ–∫), —Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ.
									if is_video_note:
										# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ.
										msg = await subgroup.send_video_note(
											input=BufferedInputFile(video_bytes, filename=f"VK video note {attachment['id']}.mp4"),
											silent=is_outbox,
											reply_to=reply_to
										)

										# –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à—ë–ª rate limit, —Ç–æ msg –±—É–¥–µ—Ç None.
										if not msg:
											return

										# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å.
										await TelehooperAPI.save_message("VK", msg[0].message_id, event.message_id, False)

										assert msg[0].video_note, "–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"

										return

									# –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –≤–∏–¥–µ–æ.
									attachment_media.append(InputMediaVideo(type="video", media=BufferedInputFile(video_bytes, filename=f"{attachment['title'].strip()} {quality[4:]}p.mp4")))

									break
								else:
									raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ")
						elif attachment_type == "audio_message":
							attachment_media.append(InputMediaAudio(
								type="audio",
								media=attachment["link_ogg"]
							))
						elif attachment_type == "sticker":
							# –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–∑-–∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –±–∞–≥–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ gzip.

							is_animated = "animation_url" in attachment and False # TODO: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤.
							attachment_cache_name = f"sticker{attachment['sticker_id']}{'anim' if is_animated else 'static'}"

							# –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω–æ–º —Å—Ç–∏–∫–µ—Ä–µ –∏–∑ –∫—ç—à–∞ –≤–ª–æ–∂–µ–Ω–∏–π.
							sticker_bytes = None
							cached_sticker = await TelehooperAPI.get_attachment("VK", attachment_cache_name)

							# –ï—Å–ª–∏ —Å—Ç–∏–∫–µ—Ä –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ, —Ç–æ —Å–∫–∞—á–∏–≤–∞–µ–º –µ–≥–æ.
							if not cached_sticker:
								logger.debug(f"–ù–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –∫—ç—à –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞ —Å ID {attachment_cache_name}")

								# –î–æ—Å—Ç–∞—ë–º URL –∞–Ω–∏–º–∞—Ü–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞, –ª–∏–±–æ —Å—Ç–∞—Ç–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-"–ø—Ä–µ–≤—å—é" —ç—Ç–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞.
								sticker_url = attachment.get("animation_url") if is_animated else attachment["images"][-1]["url"]

								# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–∫–µ—Ä.
								async with aiohttp.ClientSession() as client:
									async with client.get(sticker_url) as response:
										assert response.status == 200, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∏–∫–µ—Ä —Å ID {attachment_cache_name}"

										sticker_bytes = await response.read()

								# –î–µ–ª–∞–µ–º –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ –Ω–∞–¥ —Å—Ç–∏–∫–µ—Ä–æ–º, –µ—Å–ª–∏ –æ–Ω –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π.
								if is_animated:
									# –≠—Ç–æ—Ç –∫—É—Å–æ–∫ –∫–æ–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.

									sticker_bytes = await utils.convert_to_tgs_sticker(sticker_bytes)

							# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä.
							msg = await subgroup.send_sticker(
								sticker=cached_sticker if cached_sticker else BufferedInputFile(
									file=cast(bytes, sticker_bytes),
									filename="sticker.tgs" if is_animated else f"VK sticker {attachment['sticker_id']}.png"
								),
								silent=is_outbox,
								reply_to=reply_to
							)

							# –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à—ë–ª rate limit, —Ç–æ msg –±—É–¥–µ—Ç None.
							if not msg:
								return

							assert msg[0].sticker, "–°—Ç–∏–∫–µ—Ä –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"

							# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å.
							await TelehooperAPI.save_message("VK", msg[0].message_id, event.message_id, False)

							# –ö—ç—à–∏—Ä—É–µ–º —Å—Ç–∏–∫–µ—Ä, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç.
							if await self.user.get_setting("Security.MediaCache"):
								await TelehooperAPI.save_attachment("VK", attachment_cache_name, msg[0].sticker.file_id)

							return
						elif attachment_type == "doc":
							async with ChatActionSender(chat_id=subgroup.parent.chat.id, action="upload_document", bot=subgroup.parent.bot):
								async with aiohttp.ClientSession() as client:
									async with client.get(attachment["url"]) as response:
										assert response.status == 200, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç —Å ID {attachment['id']}"

										file_bytes = b""
										while True:
											chunk = await response.content.read(1024)
											if not chunk:
												break

											file_bytes += chunk

											if len(file_bytes) > 50 * 1024 * 1024:
												logger.debug(f"–§–∞–π–ª –æ–∫–∞–∑–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({len(file_bytes)} –±–∞–π—Ç).")

												raise Exception("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")

								# –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç.
								attachment_media.append(InputMediaDocument(type="document", media=BufferedInputFile(file=file_bytes, filename=attachment["title"])))
						elif attachment_type == "audio":
							# –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ.
							async with ChatActionSender(chat_id=subgroup.parent.chat.id, action="upload_audio", bot=subgroup.parent.bot):
								async with aiohttp.ClientSession() as client:
									async with client.get(attachment["url"]) as response:
										assert response.status == 200, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ —Å ID {attachment['id']}"

										video_bytes = b""

										while True:
											chunk = await response.content.read(1024)
											if not chunk:
												break

											video_bytes += chunk

											if len(video_bytes) > 50 * 1024 * 1024:
												logger.debug(f"–§–∞–π–ª –æ–∫–∞–∑–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({len(video_bytes)} –±–∞–π—Ç).")

												raise Exception("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")

								attachment_media.append(InputMediaAudio(
									type="audio",
									media=BufferedInputFile(
										file=video_bytes,
										filename=f"{attachment['artist']} - {attachment['title']}.mp3"
									),
									title=attachment["title"],
									performer=attachment["artist"]
								))
						elif attachment_type == "graffiti":
							attachment_media.append(InputMediaPhoto(type="photo", media=attachment["url"]))
						elif attachment_type == "wall":
							# TODO: –ò–º—è –≥—Ä—É–ø–ø—ã/—é–∑–µ—Ä–∞ –æ—Ç–∫—É–¥–∞ –±—ã–ª –ø–æ—Å—Ç.
							#   –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ—á—Ç–∏ –Ω–µ—Ä–µ–∞–ª–∏–∑—É–µ–º–æ –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –í–ö –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç —Ç–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∏ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å.
							# TODO: –ù–∞—Å—Ç—Ä–æ–π–∫–∞, —á—Ç–æ –±—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞, –∞ –Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ.

							attachment_items.append(f"<a href=\"{'m.' if use_mobile_vk else ''}vk.com/wall{attachment['owner_id']}_{attachment['id']}\">üîÑ –ó–∞–ø–∏—Å—å –æ—Ç {'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' if attachment['owner_id'] > 0 else '–≥—Ä—É–ø–ø—ã'}</a>")
						elif attachment_type == "link":
							# TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫–∞—è –ø–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞ –µ—Å—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —ç—Ç–æ–π - —Å–¥–µ–ª–∞—Ç—å –Ω–µ–≤–∏–¥–∏–º—É—é —Å—Å—ã–ª–∫—É –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ.

							pass
						elif attachment_type == "poll":
							attachment_items.append(f"<a href=\"{message_url}\">üìä –û–ø—Ä–æ—Å: ¬´{attachment['question']}¬ª</a>")
						elif attachment_type == "gift":
							attachment_media.append(InputMediaPhoto(type="photo", media=attachment["thumb_256"]))

							attachment_items.append(f"<a href=\"{message_url}\">üéÅ –ü–æ–¥–∞—Ä–æ–∫</a>")
						elif attachment_type == "market":
							attachment_items.append(f"<a href=\"{message_url}\">üõí –¢–æ–≤–∞—Ä: ¬´{attachment['title']}¬ª</a>")
						elif attachment_type == "market_album":
							pass
						elif attachment_type == "wall_reply":
							attachment_items.append(f"<a href=\"{message_url}\">üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø–∏—Å–∏</a>")
						else:
							raise TypeError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–ª–æ–∂–µ–Ω–∏—è \"{attachment_type}\"")

			# –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.
			full_message_text = ""
			msg_prefix = ""
			msg_suffix = ""

			if from_self or is_convo:
				msg_prefix = "["

				if from_self:
					msg_prefix += "<b>–í—ã</b>"

					if sent_via_bot and ignore_outbox_debug:
						msg_prefix += " <i>debug-–ø–µ—Ä–µ—Å—ã–ª–∫–∞</i>"
				elif is_convo:
					assert event.from_id, "from_id –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω, —Ö–æ—Ç—è –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å"

					# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.
					sent_user_info = await self.get_user_info(event.from_id)

					msg_prefix += f"<b>{utils.compact_name(sent_user_info.name) if use_compact_names else sent_user_info.name}</b>"

				msg_prefix += "]"

				if event.text:
					msg_prefix += ": "

			if attachment_items:
				msg_suffix += "\n\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"

				msg_suffix += "  |  ".join(attachment_items) + "."

			full_message_text = msg_prefix + utils.telegram_safe_str(event.text) + msg_suffix

			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ë–î –±–æ—Ç–∞.
			async def _send_and_save() -> None:
				# –í—ã—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
				msg = await subgroup.send_message_in(
					full_message_text,
					attachments=attachment_media,
					silent=is_outbox,
					reply_to=reply_to,
					keyboard=keyboard
				)

				# –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à—ë–ª rate limit, —Ç–æ msg –±—É–¥–µ—Ç None.
				if not msg:
					return

				await TelehooperAPI.save_message("VK", msg, event.message_id, False)

			# –ï—Å–ª–∏ —É –Ω–∞—Å –±—ã–ª–∏ –≤–ª–æ–∂–µ–Ω–∏—è, —Ç–æ –º—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∏–º–∏.
			if attachment_media:
				async with ChatActionSender.upload_document(chat_id=subgroup.parent.chat.id, bot=subgroup.parent.bot, initial_sleep=1):
					await _send_and_save()
			else:
				await _send_and_save()
		except Exception as e:
			logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {utils.get_telegram_logging_info(self.user.telegramUser)}:", e)

			try:
				await subgroup.send_message_in(
					(
						"<b>‚ö†Ô∏è –£ –±–æ—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>.\n"
						"\n"
						"<i><b>–£–ø—Å!</b></i> –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ –±–æ—Ç —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –æ—à–∏–±–∫–æ–π –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. üòì\n"
						f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –ø–µ—Ä–µ–π–¥—è <a href=\"{message_url}\">–ø–æ —Å—Å—ã–ª–∫–µ</a>.\n"
						"\n"
						"<b>–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –í–∞—Å –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å</b>:\n"
						f"<code>{e.__class__.__name__}: {e}</code>.\n"
						"\n"
						f"‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â–∏ –ª–∏–±–æ —Å–æ–∑–¥–∞—Ç—å –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç (Github Issue), –ø–æ —Å—Å—ã–ª–∫–µ –≤ –∫–æ–º–∞–Ω–¥–µ <a href=\"{utils.create_command_url('/h 6')}\">/help</a>."
					),
					silent=True,
					keyboard=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
						text="–ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ",
						url=message_url
					)]])
				)
			except:
				pass

	async def handle_typing(self, event: LongpollTypingEvent | LongpollTypingEventMultiple | LongpollVoiceMessageEvent) -> None:
		"""
		–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –Ω–∞—á–∞–ª–∞ "–ø–µ—á–∞—Ç–∏" –ª–∏–±–æ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.

		:param event: –°–æ–±—ã—Ç–∏–µ —Ç–∏–ø–∞ `LongpollTypingEvent`, `LongpollTypingEventMultiple` –∏–ª–∏ `LongpollVoiceMessageEvent`, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å longpoll-—Å–µ—Ä–≤–µ—Ä–∞.
		"""

		from api import TelehooperAPI


		subgroup = TelehooperAPI.get_subgroup_by_service_dialogue(self.user, ServiceDialogue(service_name=self.service_name, id=event.peer_id))

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø–µ—á–∞—Ç–∏.
		if not subgroup:
			return

		logger.debug(f"[VK] –°–æ–±—ã—Ç–∏–µ –ø–µ—á–∞—Ç–∏ –¥–ª—è –ø–æ–¥–≥—Ä—É–ø–ø—ã \"{subgroup.service_dialogue_name}\"")

		await subgroup.start_activity("record_audio" if type(event) is LongpollVoiceMessageEvent else "typing")

		# TODO: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∏ –≤ –≥—Ä—É–ø–ø–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ Telehooper-–±–æ—Ç–æ–≤, —Ç–æ –Ω–∞—á–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø–µ—á–∞—Ç–∏ –æ—Ç –∏–º–µ–Ω–∏ —Ä–∞–∑–Ω—ã—Ö –±–æ—Ç–æ–≤.

	async def handle_edit(self, event: LongpollMessageEditEvent) -> None:
		"""
		–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.

		:param event: –°–æ–±—ã—Ç–∏–µ —Ç–∏–ø–∞ `LongpollMessageEditEvent`, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å longpoll-—Å–µ—Ä–≤–µ—Ä–∞.
		"""

		from api import TelehooperAPI


		subgroup = TelehooperAPI.get_subgroup_by_service_dialogue(self.user, ServiceDialogue(service_name=self.service_name, id=event.peer_id))

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
		if not subgroup:
			return

		logger.debug(f"[VK] –°–æ–±—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–≥—Ä—É–ø–ø—ã \"{subgroup.service_dialogue_name}\"")

		# –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
		telegram_message = await subgroup.service.get_message_by_service_id(event.message_id)

		if not telegram_message:
			return

		# –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
		try:
			await subgroup.edit_message(f"{event.new_text}   <i>(—Ä–µ–¥.)</i>", telegram_message.telegram_message_ids[0])
		except:
			pass

		# TODO: –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ—Ä—è—é—Ç—Å—è –ø—Ä–µ—Ñ–∏–∫—Å—ã –∏ —Å—É—Ñ–∏–∫—Å—ã –æ—Ç Telehooper.

	async def handle_message_flags_change(self, event: LongpollMessageFlagsEdit) -> None:
		"""
		–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤ —É —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.

		:param event: –°–æ–±—ã—Ç–∏–µ —Ç–∏–ø–∞ `LongpollMessageFlagsEdit`, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å longpoll-—Å–µ—Ä–≤–µ—Ä–∞.
		"""

		from api import TelehooperAPI


		if not event.new_flags.outbox:
			return

		if not event.new_flags.delete_for_all:
			return

		subgroup = TelehooperAPI.get_subgroup_by_service_dialogue(self.user, ServiceDialogue(service_name=self.service_name, id=event.peer_id))

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
		if not subgroup:
			return

		logger.debug(f"[VK] –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–≥—Ä—É–ø–ø—ã \"{subgroup.service_dialogue_name}\"")

		# –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
		telegram_message = await subgroup.service.get_message_by_service_id(event.message_id)

		if not telegram_message:
			return

		# –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
		await subgroup.delete_message(telegram_message.telegram_message_ids)

	async def get_list_of_dialogues(self, force_update: bool = False, max_amount: int = 800, skip_ids: list[int] = []) -> list[ServiceDialogue]:
		if not force_update and self._cachedDialogues:
			return self._cachedDialogues

		extendedInfo = {}
		retrieved_dialogues = 0
		total_dialogues = 0
		result = []

		while True:
			response = await self.vkAPI.messages_getConversations(offset=retrieved_dialogues)
			if not total_dialogues:
				total_dialogues = response["count"]

			# –í–ö –æ—á–µ–Ω—å —Å—Ç—Ä–∞–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∏—Å–∫–µ –¥–∏–∞–ª–æ–≥–æ–≤,
			# –≤–º–µ—Å—Ç–æ
			#   {–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏–∞–ª–æ–≥–µ, –∏–º—è —é–∑–µ—Ä–∞ –∏ –≤—Å—ë —Ç–∞–∫–æ–µ}
			# –í–ö –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
			#   {{–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞–ª–æ–≥–µ}, [{id: –∏–º—è —é–∑–µ—Ä–∞ –∏ –≤—Å—ë —Ç–∞–∫–æ–µ}, ...]}
			#
			# –î–∞–Ω–Ω—ã–π –∫—É—Å–æ–∫ –∫–æ–¥–∞ –Ω–µ–º–Ω–æ–≥–æ —É–ø—Ä–æ—â–∞–µ—Ç —ç—Ç–æ, —Å–æ–∑–¥–∞–≤–∞—è —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
			for group in response.get("groups", []):
				extendedInfo[-group["id"]] = group

			for user in response.get("profiles", []):
				extendedInfo[user["id"]] = user

			for dialogue in response["items"]:
				convo = dialogue["conversation"]

				conversation_id = convo["peer"]["id"]
				conversation_type = convo["peer"]["type"]
				convo_extended = extendedInfo.get(conversation_id)

				# –ü—Ä–æ —Ç–∏–ø "email" –º–æ–∂–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å –∑–¥–µ—Å—å:
				# https://dev.vk.com/reference/objects/message
				#
				# –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–π —Ç–∏–ø –±–µ—Å–µ–¥ –∏–º–µ–µ—Ç –æ—Ç–ª–∏—á–∏—è –æ—Ç –æ–±—ã—á–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤.
				# –°–º—ã—Å–ª–∞ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ—Ç—É, –ø–æ—Å–∫–æ–ª—å–∫—É
				# —Ç–∞–∫–∏–µ –±–µ—Å–µ–¥—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω—ã–º –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
				if conversation_type == "email":
					total_dialogues -= 1

					continue

				if conversation_id in skip_ids:
					total_dialogues -= 1

					continue

				full_name = ""
				image_url = "https://vk.com/images/camera_200.png"

				if not convo_extended and conversation_type != "chat":
					raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ {conversation_id}, —Ö–æ—Ç—è –æ–Ω–∞ –æ–±—è–∑–∞–Ω–∞ –±—ã—Ç—å.")

				if conversation_type == "chat":
					full_name = convo["chat_settings"]["title"]

					if "photo" in convo["chat_settings"]:
						image_url = convo["chat_settings"]["photo"]["photo_200"]
				elif conversation_type == "user":
					convo_extended = cast(dict, convo_extended)

					full_name = f"{convo_extended['first_name']} {convo_extended['last_name']}"
					image_url = convo_extended.get("photo_max")
				elif conversation_type == "group":
					convo_extended = cast(dict, convo_extended)

					full_name = convo_extended["name"]
					image_url = convo_extended.get("photo_max")
				else:
					raise Exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∏–∞–ª–æ–≥–∞ {conversation_type}.")

				result.append(
					ServiceDialogue(
						service_name=self.service_name,
						id=conversation_id,
						name=full_name,
						profile_url=image_url,
						is_multiuser=conversation_type == "chat",
						is_pinned=convo["sort_id"]["major_id"] > 0,
						is_muted="push_settings" in convo and convo["push_settings"]["disabled_forever"],
						incoming_messages=convo.get("unread_count", 0),
						multiuser_count=convo["chat_settings"].get("members_count") if conversation_type == "chat" else None
					)
				)

				retrieved_dialogues += 1

			if retrieved_dialogues + 200 >= total_dialogues or retrieved_dialogues + 200 >= max_amount:
				break

		self._cachedDialogues = result
		return result

	def has_cached_list_of_dialogues(self) -> bool:
		return bool(self._cachedDialogues)

	async def disconnect_service(self, reason: ServiceDisconnectReason = ServiceDisconnectReason.INITIATED_BY_USER) -> None:
		db_user = await get_user(self.user.telegramUser)

		assert "VK" in db_user["Connections"]

		try:
			if reason not in [ServiceDisconnectReason.INITIATED_BY_USER, ServiceDisconnectReason.ISSUED_BY_ADMIN]:
				raise Exception

			await self.vkAPI.messages_send(
				peer_id=db_user["Connections"]["VK"]["ID"],
				message="‚ÑπÔ∏è Telegram-–±–æ—Ç ¬´Telehooper¬ª –±—ã–ª –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç –í–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ."
			)
		except:
			pass

		# –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î.
		del db_user["Connections"]["VK"]

		await db_user.save()

		# –£–¥–∞–ª—è–µ–º VKServiceAPI –∏–∑ –ø–∞–º—è—Ç–∏.
		self.user.remove_vk_connection()

		# –û—Ç–∫–ª—é—á–∞–µ–º longpoll.
		if self._longPollTask:
			logger.debug("Cancelling longpoll task...")

			self._longPollTask.cancel()

		# –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏.
		try:
			del self.token
			del self.vkAPI
			del self._longPollTask
		except:
			pass

	async def current_user_info(self) -> TelehooperServiceUserInfo:
		self_info = await self.vkAPI.get_self_info()

		return TelehooperServiceUserInfo(
			service_name=self.service_name,
			id=self_info["id"],
			name=f"{self_info['first_name']} {self_info['last_name']}",
			profile_url=self_info.get("photo_max_orig"),
		)

	async def get_user_info(self, user_id: int, force_update: bool = False) -> TelehooperServiceUserInfo:
		"""
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.

		:param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
		:param force_update: –ù—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –≤ –∫—ç—à–µ.
		"""

		if not force_update and user_id in self._cachedUsersInfo:
			return self._cachedUsersInfo[user_id]

		user_info = (await self.vkAPI.users_get(user_ids=[user_id]))[0]

		user_info_class = TelehooperServiceUserInfo(
			service_name=self.service_name,
			id=user_info["id"],
			name=f"{user_info['first_name']} {user_info['last_name']}",
			profile_url=user_info.get("photo_max_orig")
		)
		self._cachedUsersInfo[user_id] = user_info_class

		return user_info_class

	async def get_dialogue(self, chat_id: int, force_update: bool = False) -> ServiceDialogue:
		dialogues = await self.get_list_of_dialogues(force_update=force_update)

		for dialogue in dialogues:
			if dialogue.id == chat_id:
				return dialogue

		raise TypeError(f"–î–∏–∞–ª–æ–≥ —Å ID {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

	async def set_online(self) -> None:
		await self.vkAPI.account_setOnline()

	async def start_activity(self, peer_id: int, type: Literal["typing", "audiomessage"] = "typing") -> None:
		await self.vkAPI.messages_setActivity(peer_id=peer_id, type=type)

	async def mark_as_read(self, peer_id: int) -> None:
		await self.vkAPI.messages_markAsRead(peer_id=peer_id)

	async def send_message(self, chat_id: int, text: str, reply_to_message: int | None = None, attachments: list[str] | str | None = None, latitude: float | None = None, longitude: float | None = None) -> int:
		return await self.vkAPI.messages_send(peer_id=chat_id, message=text, reply_to=reply_to_message, attachment=attachments, lat=latitude, long=longitude)

	async def handle_inner_message(self, msg: Message, subgroup: "TelehooperSubGroup", attachments: list[PhotoSize | Video | Audio | TelegramDocument | Voice | Sticker | VideoNote]) -> None:
		from api import TelehooperAPI


		message_text = msg.text or msg.caption or ""

		logger.debug(f"[TG] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: \"{message_text}\" –≤ \"{subgroup}\" {'—Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏' if attachments else ''}")

		reply_message_id = None
		if msg.reply_to_message:
			saved_message = await self.get_message_by_telegram_id(msg.reply_to_message.message_id)

			reply_message_id = saved_message.service_message_ids[0] if saved_message else None

		attachments_to_send: str | None = None
		if attachments:
			attachments_vk = cast(PhotoSize | Video | Audio | TelegramDocument | Voice | Sticker | VideoNote | str, attachments.copy())

			for attch_type in ["PhotoSize", "Video", "Audio", "Document", "Voice", "Sticker", "VideoNote"]:
				allow_multiple_uploads = attch_type != "Document"
				multiple_uploads_amount = 5 if allow_multiple_uploads else 1

				attchs_of_same_type = [attch for attch in attachments_vk if attch.__class__.__name__ == attch_type]

				if not attchs_of_same_type:
					continue

				# "–ì–æ—Ç–æ–≤–æ–µ" –∑–Ω–∞—á–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è. –ï—Å–ª–∏ —Ç—É—Ç –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–æ –º—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ-–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ.
				attachment_value: str | None = None

				# –ü–æ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
				attachments_results: list[dict] = []
				filenames: list[str] = []
				for index in range(0, len(attchs_of_same_type), multiple_uploads_amount):
					attchs_of_same_type_part = attchs_of_same_type[index:index + multiple_uploads_amount]

					upload_url: str | None = None
					ext: str | None = None
					if attch_type == "PhotoSize":
						upload_url = (await self.vkAPI.photos_getMessagesUploadServer(peer_id=subgroup.service_chat_id))["upload_url"]
						ext = "jpg"
					elif attch_type == "Voice":
						assert len(attachments) == 1, "–í–ª–æ–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ Voice –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –≤–ª–æ–∂–µ–Ω–∏—è–º–∏"

						upload_url = (await self.vkAPI.docs_getMessagesUploadServer(type="audio_message", peer_id=subgroup.service_chat_id))["upload_url"]
						ext = "ogg"
					elif attch_type in ["Video", "VideoNote"]:
						upload_url = (await self.vkAPI.video_save(name="Video message", is_private=True, wallpost=False))["upload_url"]
						ext = "mp4"
					elif attch_type == "Sticker":
						assert len(attachments) == 1, "–í–ª–æ–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ Sticker –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –≤–ª–æ–∂–µ–Ω–∏—è–º–∏"

						# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫—ç—à–µ.
						sticker_cache_name = f"sticker{attachments[0].file_unique_id}static"
						attachment_value = await TelehooperAPI.get_attachment("VK", sticker_cache_name)

						if not attachment_value:
							upload_url = (await self.vkAPI.docs_getMessagesUploadServer(type="graffiti", peer_id=subgroup.service_chat_id))["upload_url"]
							ext = "png"

						# TODO: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–∏–∫–µ—Ä–∞ —á—Ç–æ –±—ã –æ–Ω –Ω–µ –±—ã–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º –¥–ª—è –í–ö.
					elif attch_type == "Document":
						upload_url = (await self.vkAPI.docs_getMessagesUploadServer(type="doc", peer_id=subgroup.service_chat_id))["upload_url"]

						for file_same_type in attchs_of_same_type_part:
							filenames.append(cast(TelegramDocument, file_same_type).file_name or "unknown-filename.txt")
					else:
						raise TypeError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–ª–æ–∂–µ–Ω–∏—è {attch_type}")

					logger.debug(f"URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π —Ç–∏–ø–∞ {attch_type}: {upload_url}")

					# –í—ã–≥—Ä—É–∂–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞ –í–ö.
					if upload_url:
						assert ext or attch_type == "Document", f"–ù–µ –¥–∞–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏—è —Ç–∏–ø–∞ {attch_type}"

						async with aiohttp.ClientSession() as client:
							form_data = aiohttp.FormData()

							async def _download(index, file_id: str) -> tuple[int, bytes]:
								logger.debug(f"–ó–∞–≥—Ä—É–∂–∞—é –≤–ª–æ–∂–µ–Ω–∏–µ #{index} –∏–∑ Telegram —Å FileID {file_id}")

								file = await subgroup.parent.bot.download(file_id)
								assert file, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ –∏–∑ Telegram"

								return index, file.read()

							# –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –≤–ª–æ–∂–µ–Ω–∏–π.
							tasks = []
							for index, attach in enumerate(attchs_of_same_type_part):
								attach = cast(PhotoSize | Audio | TelegramDocument | Video | Voice, attach)

								tasks.append(_download(index, attach.file_id))

							# –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–∂–¥–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫.
							downloaded_results = await asyncio.gather(*tasks)
							downloaded_results.sort(key=lambda x: x[0])

							for index, file_bytes in downloaded_results:
								# –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É "no_file", –µ—Å–ª–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
								# –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤ —Ç.—á. –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π) –≤ FormData –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª–µ "file1" –≤–º–µ—Å—Ç–æ "file".
								field_name = "file"
								if len(attchs_of_same_type_part) > 1:
									field_name = f"file{index}"

								form_data.add_field(name=field_name, value=file_bytes, filename=f"file{index}.{ext}" if ext else filenames.pop(0))

							# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞ –í–ö.
							async with client.post(upload_url, data=form_data) as response:
								assert response.status == 200, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ {attch_type}"
								response = VKAPI._parse_response(await response.json(content_type=None), "_get.server_")

								attachments_results.append(response)

				# –ó–∞–∫–æ–Ω—á–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ –≤–ª–æ–∂–µ–Ω–∏—è –ø–∞—á–∫–∞–º–∏ –ø–æ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
				# –ì–æ–≤–æ—Ä–∏–º –í–ö, —á—Ç–æ –º—ã —Ö–æ—Ç–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
				attachment_str_list: list[str] = []

				# –ï—Å–ª–∏ –º—ã —É–∂–µ –∏–∑–≤–ª–µ–∫–ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞, —Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∏—Ö –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫.
				if attachment_value:
					attachment_str_list.append(attachment_value)
				else:
					for attachment in attachments_results:
						if attch_type == "PhotoSize":
							assert attachment["photo"], "–û–±—ä–µ–∫—Ç photo —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç—ã–º"
							resp = await self.vkAPI.photos_saveMessagesPhoto(photo=attachment["photo"], server=attachment["server"], hash=attachment["hash"])

							for saved_attch in resp:
								attachment_str_list.append(VKAPI.get_attachment_string("photo", saved_attch["owner_id"], saved_attch["id"], saved_attch.get("access_key")))
						elif attch_type == "Voice":
							saved_attch = (await self.vkAPI.docs_save(file=attachment["file"], title="Voice message"))["audio_message"]

							attachment_str_list.append(VKAPI.get_attachment_string("doc", saved_attch["owner_id"], saved_attch["id"], saved_attch.get("access_key")))
						elif attch_type in ["Video", "VideoNote"]:
							attachment_str_list.append(VKAPI.get_attachment_string("video", attachment["owner_id"], attachment["video_id"], attachment.get("access_key")))
						elif attch_type == "Sticker":
							saved_attch = (await self.vkAPI.docs_save(file=attachment["file"], title="Sticker"))["graffiti"]

							attachment_str = VKAPI.get_attachment_string("doc", saved_attch["owner_id"], saved_attch["id"], saved_attch.get("access_key"))
							attachment_str_list.append(attachment_str)

							# –°—Ç–∏–∫–µ—Ä—ã –Ω–∞–º –Ω—É–∂–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ —Ä–∞–∑—Ä–µ—à–∏–ª.
							if await self.user.get_setting("Security.MediaCache"):
								await TelehooperAPI.save_attachment("VK", f"sticker{attachments[0].file_unique_id}static", attachment_str)
						elif attch_type == "Document":
							saved_attch = (await self.vkAPI.docs_save(file=attachment["file"]))["doc"]

							attachment_str_list.append(VKAPI.get_attachment_string("doc", saved_attch["owner_id"], saved_attch["id"], saved_attch.get("access_key")))

				# –¢–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞ —Ç–µ, —á—Ç–æ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –í–ö.
				for index, attch in enumerate(attachments_vk):
					if attch.__class__.__name__ != attch_type:
						continue

					attachments_vk[index] = attachment_str_list.pop(0) # type: ignore

			# –ú—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏! –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –≤—Å–µ –≤–ª–æ–∂–µ–Ω–∏—è.
			assert all(isinstance(attch, str) for attch in attachments_vk), "–ù–µ –≤—Å–µ –≤–ª–æ–∂–µ–Ω–∏—è –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã"

			attachments_to_send = ",".join(cast(list[str], attachments_vk))

			logger.debug(f"–í–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {attachments_to_send}")

		# –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–π, –∞ —Ç–∞–∫ –∂–µ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ –º—ã –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
		if not attachments_to_send and not message_text:
			return

		# –î–µ–ª–∞–µ–º —Å—Ç–∞—Ç—É—Å "–æ–Ω–ª–∞–π–Ω", –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω –≤ —Ç–µ—á–µ–Ω–∏–∏ –º–∏–Ω—É—Ç—ã.
		if utils.get_timestamp() - self._lastOnlineStatus > 60 and await self.user.get_setting("Services.VK.SetOnline"):
			self._lastOnlineStatus = utils.get_timestamp()

			asyncio.create_task(self.set_online())

		# –î–µ–ª–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∏" –∏ –ø—Ä–æ—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
		if await self.user.get_setting("Services.VK.WaitToType"):
			await asyncio.gather(self.mark_as_read(subgroup.service_chat_id), self.start_activity(subgroup.service_chat_id))

			await asyncio.sleep(0.6 if len(message_text) <= 15 else 1)

		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
		await TelehooperAPI.save_message("VK", msg.message_id, await self.send_message(
			chat_id=subgroup.service_chat_id,
			text=message_text,
			reply_to_message=reply_message_id,
			attachments=attachments_to_send,
			latitude=msg.location.latitude if msg.location else None,
			longitude=msg.location.longitude if msg.location else None
		), True)

	async def handle_message_delete(self, msg: Message, subgroup: "TelehooperSubGroup") -> None:
		from api import TelehooperAPI


		logger.debug(f"[TG] –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: \"{msg.text}\" –≤ \"{subgroup}\"")

		saved_message = await self.get_message_by_telegram_id(msg.message_id)

		if not saved_message:
			await subgroup.send_message_in(
				"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è</b>.\n"
				"\n"
				"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –±–æ—Ç–æ–º, –ø–æ—ç—Ç–æ–º—É –æ–Ω–æ –Ω–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.",
				silent=True
			)

			return

		try:
			await self.vkAPI.messages_delete(saved_message.service_message_ids)
		except AccessDeniedException:
			# TODO: –£—Ç–æ—á–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∏–∞–ª–æ–≥–∞.

			reason = "–ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 24-—Ö —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è."
			if not saved_message.sent_via_bot:
				reason = "–í—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –í–∞—à–∏–º —Å–æ–±–µ–¥–µ—Å–µ–¥–Ω–∏–∫–æ–º, –ª–∏–±–æ –∂–µ –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –±–µ—Å–µ–¥–µ."

			await subgroup.send_message_in(
				"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è</b>.\n"
				"\n"
				f"{reason}",
				silent=True
			)

			return

		# –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
		await TelehooperAPI.delete_message(
			"VK",
			saved_message.service_message_ids
		)

	async def handle_message_edit(self, msg: Message, subgroup: "TelehooperSubGroup") -> None:
		logger.debug(f"[TG] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: \"{msg.text}\" –≤ \"{subgroup}\"")

		saved_message = await self.get_message_by_telegram_id(msg.message_id)

		if not saved_message:
			await subgroup.send_message_in(
				"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è</b>.\n"
				"\n"
				"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –±–æ—Ç–æ–º, –ø–æ—ç—Ç–æ–º—É –æ–Ω–æ –Ω–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.",
				silent=True,
				reply_to=msg.message_id
			)

			return

		try:
			await self.vkAPI.messages_edit(
				message_id=saved_message.service_message_ids[0],
				peer_id=subgroup.service_chat_id,
				message=msg.text or "[–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]"
			)
		except AccessDeniedException:
			await subgroup.send_message_in(
				"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è</b>.\n"
				"\n"
				f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ —á—Ç–æ –±—ã –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.",
				silent=True
			)

	async def handle_message_read(self, subgroup: "TelehooperSubGroup") -> None:
		logger.debug(f"[TG] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –≤ \"{subgroup}\"")

		await self.mark_as_read(subgroup.service_chat_id)

	async def get_message_by_telegram_id(self, message_id: int, bypass_cache: bool = False) -> Optional["TelehooperMessage"]:
		from api import TelehooperAPI

		return await TelehooperAPI.get_message_by_telegram_id("VK", message_id, bypass_cache=bypass_cache)

	async def get_message_by_service_id(self, message_id: int, bypass_cache: bool = False) -> Optional["TelehooperMessage"]:
		from api import TelehooperAPI

		return await TelehooperAPI.get_message_by_service_id("VK", message_id, bypass_cache=bypass_cache)

	@staticmethod
	async def reconnect_on_restart(user: "TelehooperUser", db_user: Document, bot: Bot) -> "VKServiceAPI" | None:
		vkServiceAPI = None

		# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
		# –¢–æ–∫–µ–Ω –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Security.StoreTokens –±—ã–ª–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –∑–Ω–∞—á–µ–Ω–∏–µ ¬´–≤—ã–∫–ª—é—á–µ–Ω–æ¬ª.
		if not db_user["Connections"]["VK"]["Token"]:
			# –£–¥–∞–ª—è–µ–º —Å–µ—Ä–≤–∏—Å –∏–∑ –ë–î.
			db_user["Connections"].pop("VK")
			await db_user.save()

			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
			await bot.send_message(
				chat_id=db_user["ID"],
				text=utils.replace_placeholders(
					"<b>‚ö†Ô∏è –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ</b>.\n"
					"\n"
					"Telehooper –ø–æ—Ç–µ—Ä—è–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π ¬´–í–ö–æ–Ω—Ç–∞–∫—Ç–µ¬ª, –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ {{Security.StoreTokens}} –±—ã–ª–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –∑–Ω–∞—á–µ–Ω–∏–µ ¬´–≤—ã–∫–ª—é—á–µ–Ω–æ¬ª.\n"
					"\n"
					"‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ¬´–í–ö–æ–Ω—Ç–∞–∫—Ç–µ¬ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /connect.\n"
				)
			)

			return

		# –°–æ–∑–¥–∞—ë–º Longpoll.
		try:
			vkServiceAPI = VKServiceAPI(
				token=SecretStr(utils.decrypt_with_env_key(db_user["Connections"]["VK"]["Token"])),
				vk_user_id=db_user["Connections"]["VK"]["ID"],
				user=user
			)
			user.save_connection(vkServiceAPI)

			# –ó–∞–ø—É—Å–∫–∞–µ–º Longpoll.
			await vkServiceAPI.start_listening(bot)

			# –í–æ–∑–≤—Ä–∞—â–∞–µ–º ServiceAPI.
			return vkServiceAPI
		except Exception as error:
			logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å LongPoll –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {utils.get_telegram_logging_info(user.telegramUser)}:", error)

			# –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö, —Å–∞–º –æ–±—ä–µ–∫—Ç VKServiceAPI –º–æ–∂–µ—Ç –±—ã—Ç—å None,
			# –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω.
			# –í —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–∏ –ø–æ–º–æ—â–∏
			# —Ñ–µ–π–∫–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ VKServiceAPI.
			if vkServiceAPI is None:
				vkServiceAPI = VKServiceAPI(
					token=None, # type: ignore
					vk_user_id=db_user["Connections"]["VK"]["ID"],
					user=user
				)

			# –°–æ–≤–µ—Ä—à–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ.
			await vkServiceAPI.disconnect_service(ServiceDisconnectReason.ERRORED)

			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
			await bot.send_message(
				chat_id=db_user["ID"],
				text=(
					"<b>‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ</b>.\n"
					"\n"
					"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–≤–∏–¥—É –æ—à–∏–±–∫–∏ –±–æ—Ç–∞, —É Telehooper –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –í–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π ¬´–í–ö–æ–Ω—Ç–∞–∫—Ç–µ¬ª.\n"
					"–í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –í—ã –Ω–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –Ω–µ–º—É.\n"
					"\n"
					"‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É ¬´–í–ö–æ–Ω—Ç–∞–∫—Ç–µ¬ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /connect.\n"
				)
			)
