# coding: utf-8

# –í —ç—Ç–æ–º —Ñ–∞–π–ª–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è middle-–ø—Å–µ–≤–¥–æ-API, –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä–æ–º—É —Ä–∞–∑–ª–∏—á–Ω—ã–µ '–∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã' –º–æ–≥—É—Ç —Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è —Å –æ—Å–Ω–æ–≤—ã–º Telegram –±–æ—Ç–æ–º.


from __future__ import annotations

import asyncio
import datetime
import logging
import os
from typing import Optional

import aiogram
import vkbottle
import vkbottle_types
import vkbottle_types.responses.account
import vkbottle_types.responses.users
from vkbottle.user import Message

import Utils
from Consts import AccountDisconnectType, MAPIServiceType
from DB import getDefaultCollection

logger = logging.getLogger(__name__)

class MiddlewareAPI:
	"""
	Middleware API, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—â–µ–≥–æ API –º–µ–∂–¥—É Service Handler'–∞–º–∏.
	"""

	telegramUser: aiogram.types.User

	vkAccount: VKAccount
	isVKConnected: bool

	def __init__(self, telegramUser: aiogram.types.User, vkAccount: Optional[VKAccount] = None) -> None:
		self.vkAccount = vkAccount # type: ignore
		self.isVKConnected = (vkAccount is not None)

		self.telegramUser = telegramUser

	async def connectVKAccount(self, vk_token: str, do_init_stuff: bool = True, auth_via_password: bool = False) -> VKAccount:
		"""
		–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –∫ —ç—Ç–æ–º—É Middleware API.
		`do_init_stuff` —É–∫–∞–∑—ã–≤–∞–µ—Ç, –±—É–¥—É—Ç –ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –∞–∫–∫–∞—É–Ω—Ç—É:
		 * fetch'–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ,
		 * –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ VKServiceHandler'–∞ (Longpoll)
		"""

		self.vkAccount = VKAccount(vk_token, self, auth_via_password)
		if do_init_stuff:
			await self.vkAccount.initUserInfo()
			await self.vkAccount.connectVKServiceHandler()

		return self.vkAccount

	async def sendMessage(self, message: str):
		"""
		–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram.
		"""

		await self.telegramUser.bot.send_message(self.telegramUser.id, message)

	async def processServiceDisconnect(self, service_type: int = MAPIServiceType.VK, disconnect_type: int = AccountDisconnectType.INITIATED_BY_USER, send_service_messages: bool = False) -> None:
		"""
		–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞/–∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç –±–æ—Ç–∞.
		"""

		# –û—Ç–∫–ª—é—á–∞–µ–º Task:
		self.vkAccount.vkUser.polling.stop = True # type: ignore

		if disconnect_type != AccountDisconnectType.SILENT:
			# –≠—Ç–æ –Ω–µ –±—ã–ª–æ "—Ç–∏—Ö–æ–µ" –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–æ—ç—Ç–æ–º—É
			# –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Telegram.

			is_external = (disconnect_type == AccountDisconnectType.EXTERNAL)

			await self.telegramUser.bot.send_message(
				self.telegramUser.id,
				(
					# TODO: –ü–æ–º–µ–Ω—è—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç:
					"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç <b>¬´–í–ö–æ–Ω—Ç–∞–∫—Ç–µ¬ª</b> –±—ã–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç –±–æ—Ç–∞ Telehooper; —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ —Å–æ–≤–µ—Ä—à–µ–Ω–æ <b>–≤–Ω–µ—à–Ω–µ</b>, –Ω–∞–ø—Ä–∏–º—ë—Ä, <b>–æ—Ç–æ–∑–≤–∞–≤ –≤—Å–µ —Å–µ—Å—Å–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞</b>."
					if (is_external) else
					"‚ÑπÔ∏è –ê–∫–∫–∞—É–Ω—Ç <b>¬´–í–ö–æ–Ω—Ç–∞–∫—Ç–µ¬ª</b> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç Telehooper."
				)
			)

		if send_service_messages:
			# –ú—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–∞–º–æ–º —Å–µ—Ä–≤–∏—Å–µ –æ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:
			await self.vkAccount.vkAPI.messages.send(self.vkAccount.vkFullUser.id, random_id=Utils.generateVKRandomID(), message="‚ÑπÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç –±–æ—Ç–∞ ¬´Telehooper¬ª.")

		# –ü–æ–ª—É—á–∞–µ–º –î–ë:
		DB = getDefaultCollection()

		# –ò —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ—Ç—Ç—É–¥–∞:
		DB.update_one(
			{
				"_id": self.telegramUser.id
			},
			{"$set": {
				"Services.VK.Auth": False,
				"Services.VK.Token": None
			}},
			upsert=True
		)

class VKServiceHandler:
	"""
	–í–ö Handler –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
	"""

	pollingTask: asyncio.Task

	def __init__(self, middlewareAPI: MiddlewareAPI) -> None:
		self.middlewareAPI = middlewareAPI

		self.middlewareAPI.vkAccount.vkUser.on.message()(self.onMessage)

	def runPolling(self):
		"""
		–ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞.
		"""

		@self.middlewareAPI.vkAccount.vkUser.error_handler.register_error_handler(vkbottle.VKAPIError[5])
		async def errorHandler(e: vkbottle.VKAPIError):
			# –ï—Å–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, —Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–æ–∑–≤–∞–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –í–ö, –∏ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞.

			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –æ—Ç–∫–ª—é—á—ë–Ω–Ω–æ–º –±–æ—Ç–µ:
			await self.middlewareAPI.processServiceDisconnect(MAPIServiceType.VK, AccountDisconnectType.EXTERNAL)

		# –°–æ–∑–¥–∞—ë–º Polling-–∑–∞–¥–∞—á—É:
		self.pollingTask = asyncio.create_task(self.middlewareAPI.vkAccount.vkUser.run_polling(), name=f"VK Polling, id{self.middlewareAPI.vkAccount.vkFullUser.id}")

	async def serviceCommandHandler(self, msg: Message):
		"""
		–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ä–≤–∏—Å–∞, —Ç.–µ., –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —á–∞—Ç–µ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ" –≤ –í–ö.
		"""

		async def _commandRecieved(msg: Message):
			await self.middlewareAPI.vkAccount.vkAPI.messages.edit(self.middlewareAPI.vkAccount.vkFullUser.id, "‚úÖ " + msg.text, message_id=msg.id)

		if msg.text.startswith("logoff"):
			# –í—ã—Ö–æ–¥–∏–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞:
			await _commandRecieved(msg)
			
			await self.middlewareAPI.processServiceDisconnect(MAPIServiceType.VK, AccountDisconnectType.EXTERNAL, False)

			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è:
			await self.middlewareAPI.vkAccount.vkAPI.messages.send(self.middlewareAPI.vkAccount.vkFullUser.id, random_id=Utils.generateVKRandomID(), message="‚ÑπÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç –±–æ—Ç–∞ ¬´Telehooper¬ª.", reply_to=msg.id)
		elif msg.text.startswith("test"):
			await _commandRecieved(msg)

			await self.middlewareAPI.vkAccount.vkAPI.messages.send(self.middlewareAPI.vkAccount.vkFullUser.id, random_id=Utils.generateVKRandomID(), message="‚úÖ Telegram-–±–æ—Ç ¬´Telehooper¬ª —Ä–∞–±–æ—Ç–∞–µ—Ç!", reply_to=msg.id)
		elif msg.text.startswith("ping"):
			await _commandRecieved(msg)

			await self.middlewareAPI.sendMessage("[<b>–í–ö–æ–Ω—Ç–∞–∫—Ç–µ</b>] ¬ª pong! üëã")



	async def onMessage(self, msg: Message):
		"""
		–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö/–∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
		"""

		if msg.peer_id == self.middlewareAPI.vkAccount.vkFullUser.id:
			# –ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ "–ò–∑–±—Ä–∞–Ω–Ω–æ–º", –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É,
			# –Ω–æ –±–æ—Ç—É –≤ –¢–ì –Ω–∏—á–µ–≥–æ –Ω–µ –¥–∞—ë–º.
			await self.serviceCommandHandler(msg)

			return

		if msg.out:
			# –ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–∞–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.

			return

		if abs(msg.peer_id) == int(os.environ.get("VKBOT_NOTIFIER_ID", 0)):
			# –ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≥—Ä—É–ø–ø—ã Telehooper, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.

			return

		await self.middlewareAPI.sendMessage(msg.text)

class VKAccount:
	"""
	–ö–ª–∞—Å—Å, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	"""

	vkToken: str
	authViaPassword: bool

	vkAPI: vkbottle.API
	vkFullUser: vkbottle_types.responses.users.UsersUserFull
	vkUser: vkbottle.User
	vkAccountInfo: vkbottle_types.responses.account.AccountUserSettings

	def __init__(self, vkToken: str, middlewareAPI: MiddlewareAPI, auth_via_password: bool = False):
		self.vkToken = vkToken
		self.middlewareAPI = middlewareAPI
		self.authViaPassword = auth_via_password

		self.vkAPI = vkbottle.API(self.vkToken)
		self.vkUser = vkbottle.User(self.vkToken)


	async def initUserInfo(self):
		"""
		–û–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
		"""

		# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—à—ë–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –ò–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		self.vkAccountInfo = await self.vkAPI.account.get_profile_info()

		# –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –æ—Ç–∫—Ä—ã—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
		self.vkFullUser = (await self.vkAPI.users.get(user_ids=[self.vkAccountInfo.id]))[0]

	async def connectVKServiceHandler(self) -> VKServiceHandler:
		"""
		–°–æ–∑–¥–∞—ë—Ç VK Service Handler.
		"""

		svc = VKServiceHandler(self.middlewareAPI)
		svc.runPolling()

		return svc

	async def postAuthInit(self):
		"""–î–µ–π—Å—Ç–≤–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ."""

		await self.initUserInfo()

		space = "&#12288;" # –°–∏–º–≤–æ–ª –ø—Ä–æ–±–µ–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
		userInfoData = f"{space}* –ò–º—è: {self.middlewareAPI.telegramUser.first_name}"

		if self.middlewareAPI.telegramUser.last_name:
			userInfoData += " {self.telegramUser.last_name}"
		userInfoData += ".\n"

		if self.middlewareAPI.telegramUser.username:
			userInfoData += f"{space}* –ù–∏–∫–Ω–µ–π–º –≤ Telegram: {self.middlewareAPI.telegramUser.username}.\n"
			userInfoData += f"{space}* –°—Å—ã–ª–∫–∞: https://t.me/{self.middlewareAPI.telegramUser.username}‚Äã.\n"

		userInfoData += f"{space}* –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ " + ("–ø–∞—Ä–æ–ª—å" if self.authViaPassword else f"VK ID") + ".\n"


		await self.vkAPI.messages.send(self.vkAccountInfo.id, random_id=Utils.generateVKRandomID(), message=f"""‚ö†Ô∏è –í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ‚ö†Ô∏è {space * 15}

–ü—Ä–∏–≤–µ—Ç! üôã
–ï—Å–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ Telegram-–±–æ—Ç –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´Telehooper¬ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ —Ç–≤–æ–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ —Å—É–º–µ–µ—Ç –¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ:
{space}* –ß–∏—Ç–∞—Ç—å –≤—Å–µ –ø–æ–ª—É—á–∞–µ–º—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
{space}* –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.
{space}* –°–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤.
{space}* –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–º —Å–æ–æ–±—â–µ–Ω–∏—è.
–ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–ª –±–æ—Ç–∞ –Ω–µ —Ç—ã, —Ç–æ —Å—Ä–æ—á–Ω–æ {"–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (https://vk.com/settings?act=apps) –æ—Ç–∫–ª—é—á–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´VK Messenger¬ª, –ª–∏–±–æ –∂–µ " if self.authViaPassword else "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö ¬´–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏¬ª (https://vk.com/settings?act=security) –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Å–µ–∞–Ω—Å—ã¬ª, –ª–∏–±–æ –∂–µ "}–≤ —ç—Ç–æ—Ç –∂–µ –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É ¬´logoff¬ª, (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫) –∏ –µ—Å–ª–∏ –∂–µ —Ç—É—Ç –ø–æ—è–≤–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏, —Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –±–æ—Ç –±—ã–ª –æ—Ç–∫–ª—é—á—ë–Ω. –ü–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å—Ä–æ—á–Ω–æ –º–µ–Ω—è–π –ø–∞—Ä–æ–ª—å –æ—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –ø–æ—Å–∫–æ–ª—å–∫—É –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–µ–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –∫—Ç–æ-—Ç–æ —Å—É–º–µ–ª –≤–æ–π—Ç–∏ –≤ —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –ª–∏–±–æ –∂–µ —Ç—ã –∑–∞–±—ã–ª –≤—ã–π—Ç–∏ —Å —á—É–∂–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞!
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–∫–ª—é—á–∏–ª –±–æ—Ç–∞, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç –±–æ—Ç–∞:
{userInfoData}
–ï—Å–ª–∏ –∂–µ —ç—Ç–æ –±—ã–ª —Ç—ã, —Ç–æ –≤–æ–ª–Ω–æ–≤–∞—Ç—å—Å—è –Ω–µ–∑–∞—á–µ–º, –∏ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å—é –ø—Ä–µ–¥—ã–¥—É—â—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.

‚ÑπÔ∏è –í —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telehooper'–æ–º; –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –±–µ–∑ ¬´–∫–∞–≤—ã—á–µ–∫¬ª:
{space}* –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–∫–ª—é—á—ë–Ω –ª–∏ Telehooper: ¬´test¬ª.
{space}* –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: ¬´ping¬ª.
{space}* –û—Ç–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –æ—Ç Telehooper: ¬´logoff¬ª.""")

		# –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –í–ö-–≥—Ä—É–ø–ø—É:
		try:
			notifier_group_id = abs(int(os.environ["VKBOT_NOTIFIER_ID"]))

			if notifier_group_id > 0:
				await self.vkAPI.messages.send(-notifier_group_id, Utils.generateVKRandomID(), message="(—ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –æ–±—Ä–∞—â–∞–π –Ω–∞ –Ω–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏–µ.)\n\ntelehooperSuccessAuth")
		except:
			logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ –≤ –í–ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É \"VKBOT_NOTIFIER_ID\" –≤ .env —Ñ–∞–π–ª–µ. (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {os.environ.get('VKBOT_NOTIFIER_ID')})")

		DB = getDefaultCollection()

		# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:
		DB.update_one(
			{
				"_id": self.middlewareAPI.telegramUser.id
			},
			{"$set": {
				"_id": self.middlewareAPI.telegramUser.id,
				"TelegramUserID": self.middlewareAPI.telegramUser.id,
				"VKUserID": self.vkAccountInfo.id,
				"Services": {
					"VK": {
						"Auth": True,
						"IsAuthViaPassword": self.authViaPassword,
						"AuthDate": datetime.datetime.now(),
						"Token": self.vkToken,
					}
				}
			}},
			upsert=True
		)

	async def checkAvailability(self, no_error: bool = False) -> bool:
		"""
		–î–µ–ª–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π API-–∑–∞–ø—Ä–æ—Å –∫ VK –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		–°–ª–µ–≥–∫–∞ –±—ã—Å—Ç—Ä–µ–µ —á–µ–º `initUserInfo()`, –ø–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–µ–ª–∞–µ—Ç –ª–∏—à—å –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å.
		"""

		try:
			self.vkAccountInfo = await self.vkAPI.account.get_profile_info()
		except Exception as error:
			if not no_error:
				raise(error)

			return False
		else:
			return True
