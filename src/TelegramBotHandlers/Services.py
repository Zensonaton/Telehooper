# coding: utf-8

"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã `Services`."""

import logging
from typing import TYPE_CHECKING

import MiddlewareAPI
from aiogram import Bot, Dispatcher
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup)
from aiogram.types import Message as MessageType
from Consts import AccountDisconnectType
from Consts import CommandThrottleNames as CThrottle
from Consts import InlineButtonCallbacks as CButtons
from Consts import MAPIServiceType

if TYPE_CHECKING:
	from TelegramBot import Telehooper

Bot: 	Telehooper 	= None # type: ignore
TGBot: 	Bot 		= None # type: ignore
DP: 	Dispatcher 	= None # type: ignore

logger = logging.getLogger(__name__)


def _setupCHandler(bot: Telehooper):
	"""
	–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É `Services`.
	"""

	global Bot, TGBot, DP

	Bot = bot
	TGBot = Bot.TGBot
	DP = Bot.DP

	DP.register_message_handler(Services, commands=["services"])
	DP.register_callback_query_handler(ServicesCallbackHandler, lambda query: query.data in [CButtons.DISCONNECT_SERVICE])


async def Services(msg: MessageType):
	await DP.throttle(CThrottle.SERVICES_LIST, rate=2, user_id=msg.from_user.id)

	mAPI = MiddlewareAPI.MiddlewareAPI(msg.from_user)
	await mAPI.restoreFromDB()

	if not mAPI.isVKConnected:
		await msg.answer("üòî –ò–∑–≤–∏–Ω–∏, –Ω–æ —É —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.\n\n‚öôÔ∏è –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /setup –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!")
		return

	keyboard = InlineKeyboardMarkup().add(
		InlineKeyboardButton(text="üõë –û—Ç–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å", callback_data=CButtons.DISCONNECT_SERVICE),
	)
	await msg.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, —É —Ç–µ–±—è –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å, <b>–í–ö–æ–Ω—Ç–∞–∫—Ç–µ</b>. –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å –Ω–∏–º —Å–¥–µ–ª–∞—Ç—å?\n\n‚öôÔ∏è –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ —Å–µ—Ä–≤–∏—Å–æ–º ¬´–í–ö–æ–Ω—Ç–∞–∫—Ç–µ¬ª:", reply_markup=keyboard)

async def ServicesCallbackHandler(query: CallbackQuery):
	mAPI = MiddlewareAPI.MiddlewareAPI(query.from_user)
	await mAPI.restoreFromDB()

	if query.data == CButtons.DISCONNECT_SERVICE:
		await mAPI.processServiceDisconnect(MAPIServiceType.VK, AccountDisconnectType.INITIATED_BY_USER, True)


	await query.answer()
