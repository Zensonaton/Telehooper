# coding: utf-8

"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã `ThisDialogue`."""

import io
import logging

from aiogram import Bot, Dispatcher
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, InputFile)
from aiogram.types import Message as MessageType
import aiohttp
from Consts import InlineButtonCallbacks as CButton
from Exceptions import CommandAllowedOnlyInBotDialogue
from TelegramBot import DialogueGroup, Telehooper

Bot: 	Telehooper 	= None # type: ignore
TGBot: 	Bot 		= None # type: ignore
DP: 	Dispatcher 	= None # type: ignore

logger = logging.getLogger(__name__)


def _setupCHandler(bot: Telehooper) -> None:
	"""
	–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É `ThisDialogue`.
	"""

	global Bot, TGBot, DP

	Bot = bot
	TGBot = Bot.TGBot
	DP = Bot.DP

	DP.register_message_handler(ThisDialogue, commands=["thisdialogue", "dialogue"])
	DP.register_callback_query_handler(ThisDialogueCallbackHandler, lambda query: query.data in [CButton.DIALOGUE_SELECTOR_MENU_VK])
	DP.register_callback_query_handler(VKDialogueSelector, lambda query: query.data.startswith(CButton.DIALOGUE_SELECT_VK))


async def ThisDialogue(msg: MessageType) -> None:
	if msg.chat.type == "private": # TODO: –ù–æ—Ä–º–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.
		raise CommandAllowedOnlyInBotDialogue()

	await SendThisDialogueMessage(msg)

async def SendThisDialogueMessage(msg: MessageType, edit_message_instead: bool = False) -> None:
	_text = "‚ÑπÔ∏è –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –Ω–∏ –∫ –∫–∞–∫–æ–º—É –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞.\n\n‚öôÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:"

	# TODO: –ö–Ω–æ–ø–∫–∞ "–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–∞—Ç—å —ç—Ç—É –≥—Ä—É–ø–ø—É".

	keyboard = InlineKeyboardMarkup().add(
		InlineKeyboardButton(text="–í–ö–æ–Ω—Ç–∞–∫—Ç–µ", callback_data=CButton.DIALOGUE_SELECTOR_MENU_VK)
	)

	if edit_message_instead:
		await msg.edit_text(_text, reply_markup=keyboard)
		return

	await msg.answer(_text, reply_markup=keyboard)

async def ThisDialogueCallbackHandler(query: CallbackQuery) -> None:
	if query.data == CButton.DIALOGUE_SELECTOR_MENU_VK:
		_text = "<b>–û—Ç–ª–∏—á–Ω–æ!</b> –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π —Ç–µ–±–µ –¥–∏–∞–ª–æ–≥ —Å–µ—Ä–≤–∏—Å–∞."

		await query.message.edit_text(f"{_text}\n\n‚è≥ –ü–æ–∑–≤–æ–ª—å –º–Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã –∏–∑ —Ç–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –í–ö...")

		# –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
		user = await Bot.getBotUser(query.from_user.id)

		# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤:
		user_convos = await user.vkAccount.retrieveDialoguesList()

		prefixEmojiDict = {
			"group": "ü´Ç",
			"user_True": "üôã‚Äç‚ôÇÔ∏è", # –≠–º–æ–¥–∑–∏ –º—É–∂—á–∏–Ω—ã
			"user_False": "üôã‚Äç‚ôÄÔ∏è", # –≠–º–æ–¥–∑–∏ –∂–µ–Ω—â–∏–Ω—ã
			"chat": "üí¨",
		}

		keyboard = InlineKeyboardMarkup()
		for index, convo in enumerate(user_convos):
			if index >= 12:
				# –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫, –∏ —é–∑–µ—Ä —Å–ª–∏—à–∫–æ–º —É–∂ –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π, –∏
				# –∏–º–µ–µ—Ç –±–æ–ª—å—à–µ —á–µ–º 12 —á–µ–ª–æ–≤–µ–∫ –≤ —Å–≤–æ–∏—Ö –¥–∏–∞–ª–æ–≥–∞—Ö, —Ç–æ
				# –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ä–∞–±–æ—Ç—É —Ü–∏–∫–ª–∞, –∏–Ω–∞—á–µ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –º–∏–ª–ª–∏–∞—Ä–¥–æ–º –∫–Ω–æ–ø–æ–∫.

				break

			if convo.isSelf:
				# –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π (–ò–∑–±—Ä–∞–Ω–Ω–æ–µ)

				continue


			buttonText = f"{prefixEmojiDict[(convo._type + '_' + str(convo.isMale)) if convo.isUser else convo._type]} {convo.fullName} {'üìå' if convo.isPinned else ''}"

			keyboard.add(InlineKeyboardButton(buttonText, callback_data=f"{CButton.DIALOGUE_SELECT_VK}{convo.ID}"))

		await query.message.edit_text(f"{_text}\n\n‚öôÔ∏è –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–µ–±–µ –¥–∏–∞–ª–æ–≥ –∏–∑ <b>¬´–í–ö–æ–Ω—Ç–∞–∫—Ç–µ¬ª</b>:", reply_markup=keyboard)

	return await query.answer()

async def VKDialogueSelector(query: CallbackQuery) -> None:
	VK_ID = int(query.data.split(CButton.DIALOGUE_SELECT_VK)[-1])

	# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
	user = await Bot.getBotUser(query.from_user.id)

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä—É–ø–ø–∞ –¥–∏–∞–ª–æ–≥–æ–º:
	if await user.getDialogueGroupByTelegramGroup(query.message.chat.id):
		return await query.answer("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥–æ–º.")

	dialogue = user.vkAccount.getDialogueByID(VK_ID)
	assert dialogue, "dialogue is None"

	# –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥-–≥—Ä—É–ø–ø—É –≤ –±–∞–∑—É:
	Bot.addDialogueGroup(
		DialogueGroup(query.message.chat, VK_ID)
	)

	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:
	await query.message.edit_text(f"<b>–û—Ç–ª–∏—á–Ω–æ! üòå</b>\n\n–¢—ã –≤—ã–±—Ä–∞–ª –¥–∏–∞–ª–æ–≥ —Å <b>¬´{dialogue.fullName}¬ª</b>, —Ç–µ–ø–µ—Ä—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç <b>{dialogue.fullName}</b> –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –∏–º–µ–Ω–Ω–æ –∑–¥–µ—Å—å.\n\n‚öôÔ∏è –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–µ-—á—Ç–æ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ...")

	# –ò–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–ø–ø—ã:
	await query.message.chat.set_title(dialogue.fullName)

	try:
		pfpURL: str = "https://vk.com/images/camera_400.png"
		if dialogue.isUser:
			pfpURL = (await user.vkAccount.vkAPI.users.get(user_ids=[dialogue.ID], fields=["photo_max_orig"]))[0].photo_max_orig # type: ignore
		elif dialogue.isGroup:
			pfpURL = (await user.vkAccount.vkAPI.groups.get_by_id(group_id=dialogue.ID, fields=["photo_max_orig"]))[0].photo_max_orig # type: ignore
		else:
			pfpURL = dialogue.photoURL
		
		async with aiohttp.ClientSession() as session:
			async with session.get(pfpURL) as response:
				await query.message.chat.set_photo(InputFile(io.BytesIO(await response.read())))
	except Exception as e:
		logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –ø—Ä–æ—Ñ–∏–ª—è: %s", e)

	try:
		await query.message.chat.set_description(f"[Telehooper] –î–∏–∞–ª–æ–≥ —Å {dialogue.fullName}.")
	except: pass


	return await query.answer()
