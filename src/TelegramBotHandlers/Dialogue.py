# coding: utf-8

"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã `ThisDialogue`."""

import logging
from typing import TYPE_CHECKING

from aiogram import Bot, Dispatcher
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup)
from aiogram.types import Message as MessageType
from Consts import InlineButtonCallbacks as CButton
from Exceptions import CommandAllowedOnlyInBotDialogue
from MiddlewareAPI import MiddlewareAPI

if TYPE_CHECKING:
	from TelegramBot import Telehooper

Bot: 	Telehooper 	= None # type: ignore
TGBot: 	Bot 		= None # type: ignore
DP: 	Dispatcher 	= None # type: ignore

logger = logging.getLogger(__name__)


def _setupCHandler(bot: Telehooper):
	"""
	–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É `ThisDialogue`.
	"""

	global Bot, TGBot, DP

	Bot = bot
	TGBot = Bot.TGBot
	DP = Bot.DP

	DP.register_message_handler(ThisDialogue, commands=["thisdialogue", "dialogue"])
	DP.register_callback_query_handler(ThisDialogueCallbackHandler, lambda query: query.data in [CButton.DIALOGUE_SELECTOR_MENU_VK])
	DP.register_callback_query_handler(VKDialogueSelector, lambda query: query.data.startswith(CButton.DIALOGUE_SELECT_VK))


async def ThisDialogue(msg: MessageType):
	if msg.chat.type == "private": # TODO: –ù–æ—Ä–º–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.
		raise CommandAllowedOnlyInBotDialogue()

	await SendThisDialogueMessage(msg)

async def SendThisDialogueMessage(msg: MessageType, edit_message_instead: bool = False):
	_text = "‚ÑπÔ∏è –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –Ω–∏ –∫ –∫–∞–∫–æ–º—É –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞.\n\n‚öôÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:"

	# TODO: –ö–Ω–æ–ø–∫–∞ "–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–∞—Ç—å —ç—Ç—É –≥—Ä—É–ø–ø—É".

	keyboard = InlineKeyboardMarkup().add(
		InlineKeyboardButton(text="–í–ö–æ–Ω—Ç–∞–∫—Ç–µ", callback_data=CButton.DIALOGUE_SELECTOR_MENU_VK)
	)

	if edit_message_instead:
		await msg.edit_text(_text, reply_markup=keyboard)
		return

	await msg.answer(_text, reply_markup=keyboard)

async def ThisDialogueCallbackHandler(query: CallbackQuery):
	if query.data == CButton.DIALOGUE_SELECTOR_MENU_VK:
		_text = "<b>–û—Ç–ª–∏—á–Ω–æ!</b> –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π —Ç–µ–±–µ –¥–∏–∞–ª–æ–≥ —Å–µ—Ä–≤–∏—Å–∞."

		await query.message.edit_text(f"{_text}\n\n‚è≥ –ü–æ–∑–≤–æ–ª—å –º–Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã –∏–∑ —Ç–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –í–ö...")

		# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –í–ö:
		mAPI = MiddlewareAPI(query.from_user)
		await mAPI.restoreFromDB()

		# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤:
		user_convos = await mAPI.vkAccount.getDialoguesList()

		prefixEmojiDict = {
			"group": "ü´Ç",
			"user_True": "üôã‚Äç‚ôÇÔ∏è", # –≠–º–æ–¥–∑–∏ –º—É–∂—á–∏–Ω—ã
			"user_False": "üôã‚Äç‚ôÄÔ∏è", # –≠–º–æ–¥–∑–∏ –∂–µ–Ω—â–∏–Ω—ã
			"chat": "üí¨",
		}

		keyboard = InlineKeyboardMarkup()
		for index, convo in enumerate(user_convos):
			if index >= 12:
				# –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫, –∏ —é–∑–µ—Ä —Å–ª–∏—à–∫–æ–º —É–∂ –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π, –∏
				# –∏–º–µ–µ—Ç –±–æ–ª—å—à–µ —á–µ–º 12 —á–µ–ª–æ–≤–µ–∫ –≤ —Å–≤–æ–∏—Ö –¥–∏–∞–ª–æ–≥–∞—Ö, —Ç–æ
				# –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ä–∞–±–æ—Ç—É —Ü–∏–∫–ª–∞, –∏–Ω–∞—á–µ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –º–∏–ª–ª–∏–∞—Ä–¥–æ–º –∫–Ω–æ–ø–æ–∫.

				break

			if convo.isSelf:
				# –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π (–ò–∑–±—Ä–∞–Ω–Ω–æ–µ)

				continue


			buttonText = f"{prefixEmojiDict[(convo._type + '_' + str(convo.isMale)) if convo.isUser else convo._type]} {convo.fullName} {'üìå' if convo.isPinned else ''}"

			keyboard.add(InlineKeyboardButton(buttonText, callback_data=f"{CButton.DIALOGUE_SELECT_VK}{convo.id}"))

		await query.message.edit_text(f"{_text}\n\n‚öôÔ∏è –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–µ–±–µ –¥–∏–∞–ª–æ–≥ –∏–∑ <b>¬´–í–ö–æ–Ω—Ç–∞–∫—Ç–µ¬ª</b>:", reply_markup=keyboard)

	return await query.answer()

async def VKDialogueSelector(query: CallbackQuery):
	VK_ID = query.data.split(CButton.DIALOGUE_SELECT_VK)[-1]

	return await query.answer(VK_ID)
