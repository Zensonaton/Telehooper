# coding: utf-8

from __future__ import annotations

import asyncio
import datetime
import logging
import os
from typing import TYPE_CHECKING, Any, List, Optional, Tuple

import aiogram
import vkbottle
import vkbottle_types
import vkbottle_types.responses.users
from Consts import AccountDisconnectType
from DB import getDefaultCollection
from MiddlewareAPI import MiddlewareAPI, TelehooperUser
from Utils import generateVKRandomID, getFirstAvailableValueFromClass
from vkbottle.user import Message
from vkbottle_types.responses.groups import GroupsGroupFull
from vkbottle_types.responses.messages import MessagesConversationWithMessage
from vkbottle_types.responses.users import UsersUserFull
import Utils

logger = logging.getLogger("VKMAPI") # TODO: –ó–∞–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç logger –Ω–∞ –ª–æ–≥–≥–µ—Ä –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞.


if TYPE_CHECKING:
	from TelegramBot import Telehooper


"""
MiddlewareAPI –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
"""

class VKMiddlewareAPI(MiddlewareAPI):
	"""
	Middleware API –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. –†–∞—Å—à–∏—Ä—è–µ—Ç –∫–ª–∞—Å—Å MiddlewareAPI.
	"""

	pollingTask: asyncio.Task | None
	isPollingRunning: bool
	vkAccount: VKAccount
	vkAPI: vkbottle.API

	def __init__(self, user: "TelehooperUser", bot: "Telehooper") -> None:
		super().__init__(user, bot)

		self.pollingTask = None
		self.isPollingRunning = False
		self.vkAccount = self.user.vkAccount
		self.vkAPI = self.vkAccount.vkAPI


	def runPolling(self) -> asyncio.Task:
		"""
		–ó–∞–ø—É—Å–∫–∞–µ—Ç Polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
		"""

		if self.isPollingRunning:
			self.pollingTask

		@self.vkAccount.vkUser.error_handler.register_error_handler(vkbottle.VKAPIError[5])
		async def errorHandler(error: vkbottle.VKAPIError):
			# –ï—Å–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, —Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–æ–∑–≤–∞–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –í–ö, –∏ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞.

			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –æ—Ç–∫–ª—é—á—ë–Ω–Ω–æ–º –±–æ—Ç–µ:
			await self.disconnectService(AccountDisconnectType.EXTERNAL)

		# –†–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –í–ö:
		self.vkAccount.vkUser.on.message()(self.onNewRecievedMessage)
		self.vkAccount.vkUser.on.raw_event(vkbottle.UserEventType.MESSAGE_EDIT)(self.onMessageEdit) # type: ignore
		self.vkAccount.vkUser.on.raw_event(vkbottle.UserEventType.DIALOG_TYPING_STATE)(self.onChatTypingState) # type: ignore

		# –°–æ–∑–¥–∞—ë–º Polling-–∑–∞–¥–∞—á—É:
		self.pollingTask = asyncio.create_task(self.vkAccount.vkUser.run_polling(), name=f"VK Polling, id{self.user.vkAccount.vkFullUser.id}")
		self.isPollingRunning = True

		return self.pollingTask

	def stopPolling(self) -> None:
		"""
		–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Polling.
		"""

		if not self.isPollingRunning:
			return

		# –û—Ç–∫–ª—é—á–∞–µ–º Task, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Ç–æ–¥:
		# task.cancel() –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è –∏–∑-–∑–∞ –±–∞–≥–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ vkbottle.
		#
		# https://github.com/vkbottle/vkbottle/issues/504
		self.user.vkAccount.vkUser.polling.stop = True # type: ignore (–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ—Ç –≤ vkbottle_types)

		self.isPollingRunning = False

	async def sendServiceMessageOut(self, message: str, msg_id_to_reply: int | None = None) -> int:
		return await self.sendMessageOut(message, self.user.vkAccount.vkFullUser.id, msg_id_to_reply)

	async def sendMessageOut(self, message: str, chat_id: int, msg_id_to_reply: int | None = None, attachments: Utils.File | None = None) -> int:
		doc = None
		if attachments and attachments.bytes:
			doc = await vkbottle.PhotoMessageUploader(self.vkAPI).upload(attachments.bytes)

		return await self.user.vkAccount.vkAPI.messages.send(peer_id=chat_id, random_id=generateVKRandomID(), message=message, reply_to=msg_id_to_reply, attachment=doc) # type: ignore

	async def editMessageOut(self, message: str, chat_id: int, message_id: int) -> int:
		return await self.user.vkAccount.vkAPI.messages.edit(peer_id=chat_id, message_id=message_id, message=message)

	async def onNewRecievedMessage(self, msg: Message) -> None:
		"""
		–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö/–∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
		"""

		if self.user.vkAccount.vkFullUser is None:
			# –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –µ—â—ë –Ω–µ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞.

			return

		if msg.peer_id == self.user.vkAccount.vkFullUser.id:
			# –ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ "–ò–∑–±—Ä–∞–Ω–Ω–æ–º", –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É,
			# –Ω–æ –±–æ—Ç—É –≤ –¢–ì –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º.
			tg_message = await self._commandHandler(msg)

			if tg_message and isinstance(tg_message, aiogram.types.Message):
				# –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º.

				self.saveMessageID(tg_message.message_id, msg.message_id, tg_message.chat.id, msg.chat_id)


			return

		if msg.out:
			# –ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–∞–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.

			return

		if abs(msg.peer_id) == int(os.environ.get("VKBOT_NOTIFIER_ID", 0)):
			# –ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≥—Ä—É–ø–ø—ã Telehooper, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.

			return

		# –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞-–¥–∏–∞–ª–æ–≥, —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º–µ–Ω–Ω–æ —Ç—É–¥–∞:
		dialogue = await self.bot.getDialogueGroupByServiceDialogueID(abs(msg.peer_id))
		if dialogue:
			self.saveMessageID((await self.user.TGUser.bot.send_message(dialogue.group.id, msg.text)).message_id, msg.id, dialogue.group.id, msg.chat_id)
			return

	async def onMessageEdit(self, msg) -> None:
		# –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:

		MSGID = msg.object[1]
		MSGTEXT = msg.object[6]
		MSGCHATID = msg.object[3]

		tgmid, vkmid, tgchatid, vkchatid = self.getMessageDataByServiceMID(MSGID) or (None, None, None, None)
		if tgmid and tgchatid:
			# –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ –≤ Telegram:

			await self.editMessageIn(MSGTEXT + "„Ö§„Ö§„Ö§<i>–∏–∑–º–µ–Ω–µ–Ω–æ</i>", tgchatid, tgmid)

	async def onChatTypingState(self, typing_object):
		CHAT_ID = typing_object.object[1]

		# –£–∑–Ω–∞—ë–º, –¥–∏–∞–ª–æ–≥ –ª–∏ —ç—Ç–æ:
		dialogue = await self.user.getDialogueGroupByServiceDialogueID(CHAT_ID)
		if not dialogue:
			return False

		# –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ, –Ω–∞—á–∏–Ω–∞–µ–º "–ø–µ—á–∞—Ç–∞—Ç—å":
		await self.startChatActionStateIn(dialogue.group.id, "typing")

	async def disconnectService(self, disconnect_type: int = AccountDisconnectType.INITIATED_BY_USER, send_service_messages: bool = True) -> None:
		"""
		–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞/–∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç –±–æ—Ç–∞.
		"""

		await super().disconnectService(disconnect_type, send_service_messages)

		# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Polling:
		self.stopPolling()

		if send_service_messages:
			# –ú—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–∞–º–æ–º —Å–µ—Ä–≤–∏—Å–µ –æ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:
			await self.user.vkAccount.vkAPI.messages.send(self.user.vkAccount.vkFullUser.id, random_id=generateVKRandomID(), message="‚ÑπÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç –±–æ—Ç–∞ ¬´Telehooper¬ª.\n\n–ù–∞–¥–µ—é—Å—å, —á—Ç–æ —Ç—ã –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤–µ—Ä–Ω—ë—à—å—Å—è ü•∫")

	def getMessageIDByTelegramMID(self, telegram_message_id: int | str) -> None | Tuple[int, int, int, int]:
		return self._getMessageDataByKeyname("TelegramMID", telegram_message_id)

	def getMessageDataByServiceMID(self, vk_message_id: int | str) -> None | Tuple[int, int, int, int]:
		return self._getMessageDataByKeyname("ServiceMID", vk_message_id)

	def _getMessageDataByKeyname(self, key: str, value: int | str):
		# –ü–æ–ª—É—á–∞–µ–º –∏–∑ –î–ë –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
		DB = getDefaultCollection()
		res = DB.find_one({"_id": self.user.TGUser.id})
		if res:
			res = res["Services"]["VK"]["ServiceToTelegramMIDs"]

			for r in res:
				if r[key] == str(value):
					TELEGRAMMID = int(r["TelegramMID"])
					SERVICEMID = int(r["ServiceMID"])
					TELEGRAMDIALOGUEID = int(r["TelegramDialogueID"])
					SERVICEDIALOGUEID = int(r["ServiceDialogueID"])

					return TELEGRAMMID, SERVICEMID, TELEGRAMDIALOGUEID, SERVICEDIALOGUEID

		return None



	async def _commandHandler(self, msg: Message) -> int | aiogram.types.Message:
		"""
		–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ä–≤–∏—Å–∞, —Ç.–µ., –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —á–∞—Ç–µ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ" –≤ –í–ö.
		"""

		async def _commandRecieved(msg: Message):
			await self.user.vkAccount.vkAPI.messages.edit(self.user.vkAccount.vkFullUser.id, "‚úÖ " + msg.text, message_id=msg.id)

		if msg.text.startswith("logoff"):
			# –í—ã—Ö–æ–¥–∏–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞:
			await _commandRecieved(msg)

			await self.disconnectService(AccountDisconnectType.EXTERNAL)

			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è:
			await self.sendServiceMessageOut("‚ÑπÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç –±–æ—Ç–∞ ¬´Telehooper¬ª.", msg.id)
			return 0
		elif msg.text.startswith("test"):
			await _commandRecieved(msg)

			await self.sendServiceMessageOut("‚úÖ Telegram-–±–æ—Ç ¬´Telehooper¬ª —Ä–∞–±–æ—Ç–∞–µ—Ç!", msg.id)
			return 0
		elif msg.text.startswith("ping"):
			await _commandRecieved(msg)

			return await self.sendServiceMessageIn("[<b>–í–ö–æ–Ω—Ç–∞–∫—Ç–µ</b>] ¬ª –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏! üëã")
		else:
			# –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.

			return 0

class VKAccount:
	"""
	–ö–ª–∞—Å—Å, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	"""

	vkToken: str

	user: TelehooperUser

	authViaPassword: bool


	vkAPI: vkbottle.API
	vkFullUser: vkbottle_types.responses.users.UsersUserFull
	vkUser: vkbottle.User
	vkDialogues: List[VKDialogue]

	def __init__(self, vkToken: str, user: TelehooperUser, auth_via_password: bool = False) -> None:
		self.vkToken = vkToken

		self.user = user

		self.authViaPassword = auth_via_password


		self.vkAPI = vkbottle.API(self.vkToken)
		self.vkFullUser = None # type: ignore
		self.vkUser = vkbottle.User(self.vkToken)
		self.vkDialogues = [] # type: ignore

	async def initUserInfo(self) -> vkbottle_types.responses.users.UsersUserFull:
		"""
		–û–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
		"""

		# –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –æ—Ç–∫—Ä—ã—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
		self.vkFullUser = (await self.vkAPI.users.get())[0]

		return self.vkFullUser

	async def postAuthInit(self) -> None:
		"""–î–µ–π—Å—Ç–≤–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ."""

		space = "&#12288;" # –°–∏–º–≤–æ–ª –ø—Ä–æ–±–µ–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
		userInfoData = f"{space}* –ò–º—è: {self.user.TGUser.first_name}"

		if self.user.TGUser.last_name:
			userInfoData += " {self.telegramUser.last_name}"
		userInfoData += ".\n"

		if self.user.TGUser.username:
			userInfoData += f"{space}* –ù–∏–∫–Ω–µ–π–º –≤ Telegram: {self.user.TGUser.username}.\n"
			userInfoData += f"{space}* –°—Å—ã–ª–∫–∞: https://t.me/{self.user.TGUser.username}‚Äã.\n"

		userInfoData += f"{space}* –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ " + ("–ø–∞—Ä–æ–ª—å" if self.authViaPassword else f"VK ID") + ".\n"


		await self.vkAPI.messages.send(self.vkFullUser.id, random_id=generateVKRandomID(), message=f"""‚ö†Ô∏è –í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ‚ö†Ô∏è {space * 15}

–ü—Ä–∏–≤–µ—Ç! üôã
–ï—Å–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ Telegram-–±–æ—Ç –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´Telehooper¬ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ —Ç–≤–æ–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ —Å—É–º–µ–µ—Ç –¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ:
{space}‚Ä¢ –ß–∏—Ç–∞—Ç—å –≤—Å–µ –ø–æ–ª—É—á–∞–µ–º—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
{space}‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.
{space}‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤.
{space}‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–º —Å–æ–æ–±—â–µ–Ω–∏—è.
‚ö† –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–ª –±–æ—Ç–∞ –Ω–µ —Ç—ã, —Ç–æ —Å—Ä–æ—á–Ω–æ {"–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (https://vk.com/settings?act=apps) –æ—Ç–∫–ª—é—á–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´VK Messenger¬ª, –ª–∏–±–æ –∂–µ " if self.authViaPassword else "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö ¬´–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏¬ª (https://vk.com/settings?act=security) –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Å–µ–∞–Ω—Å—ã¬ª, –ª–∏–±–æ –∂–µ "}–≤ —ç—Ç–æ—Ç –∂–µ –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É ¬´logoff¬ª, (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫) –∏ –µ—Å–ª–∏ –∂–µ —Ç—É—Ç –ø–æ—è–≤–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏, —Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –±–æ—Ç –±—ã–ª –æ—Ç–∫–ª—é—á—ë–Ω. –ü–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å—Ä–æ—á–Ω–æ –º–µ–Ω—è–π –ø–∞—Ä–æ–ª—å –æ—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –ø–æ—Å–∫–æ–ª—å–∫—É –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–µ–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –∫—Ç–æ-—Ç–æ —Å—É–º–µ–ª –≤–æ–π—Ç–∏ –≤ —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –ª–∏–±–æ –∂–µ —Ç—ã –∑–∞–±—ã–ª –≤—ã–π—Ç–∏ —Å —á—É–∂–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞!
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–∫–ª—é—á–∏–ª –±–æ—Ç–∞ –∫ —Ç–≤–æ–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ:
{userInfoData}
–ï—Å–ª–∏ –∂–µ —ç—Ç–æ –±—ã–ª —Ç—ã, —Ç–æ –≤–æ–ª–Ω–æ–≤–∞—Ç—å—Å—è –Ω–µ–∑–∞—á–µ–º, –∏ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å—é –ø—Ä–µ–¥—ã–¥—É—â—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.

‚ÑπÔ∏è –í —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telehooper'–æ–º; –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –±–µ–∑ ¬´–∫–∞–≤—ã—á–µ–∫¬ª:
{space}‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–∫–ª—é—á—ë–Ω –ª–∏ Telehooper: ¬´test¬ª.
{space}‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: ¬´ping¬ª.
{space}‚Ä¢ –û—Ç–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –æ—Ç Telehooper: ¬´logoff¬ª.""")

		# –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –í–ö-–≥—Ä—É–ø–ø—É:
		try:
			notifier_group_id = abs(int(os.environ["VKBOT_NOTIFIER_ID"]))

			if notifier_group_id > 0:
				await self.vkAPI.messages.send(-notifier_group_id, generateVKRandomID(), message="(—ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –æ–±—Ä–∞—â–∞–π –Ω–∞ –Ω–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏–µ.)\n\ntelehooperSuccessAuth")
		except:
			logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ –≤ –í–ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É \"VKBOT_NOTIFIER_ID\" –≤ .env —Ñ–∞–π–ª–µ. (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {os.environ.get('VKBOT_NOTIFIER_ID')})")

		# –ü–æ–ª—É—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:
		DB = getDefaultCollection()

		# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:
		DB.update_one(
			{
				"_id": self.user.TGUser.id
			},
			{"$set": {
				"_id": self.user.TGUser.id,
				"TelegramUserID": self.user.TGUser.id,
				"Services": {
					"VK": {
						"Auth": True,
						"IsAuthViaPassword": self.authViaPassword,
						"AuthDate": datetime.datetime.now(),
						"Token": self.vkToken,
						"ID": self.vkFullUser.id,
						"ServiceToTelegramMIDs": []
					}
				}
			}},
			upsert=True
		)

	async def checkAvailability(self, no_error: bool = False) -> bool:
		"""
		–î–µ–ª–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π API-–∑–∞–ø—Ä–æ—Å –∫ VK –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç —Ç–∏–ø Boolean.
		–°–ª–µ–≥–∫–∞ –±—ã—Å—Ç—Ä–µ–µ —á–µ–º `initUserInfo()`, –ø–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–µ–ª–∞–µ—Ç –ª–∏—à—å –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å.
		"""

		try:
			self.vkFullUser = (await self.vkAPI.users.get())[0]
		except Exception as error:
			if not no_error:
				raise(error)

			return False
		else:
			return True

	async def retrieveDialoguesList(self) -> List[VKDialogue]:
		"""
		–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ —Ç–∞–∫ –∂–µ –∫—ç—à–∏—Ä—É–µ—Ç –∏—Ö.
		"""

		convos = await self.vkAPI.messages.get_conversations(offset=0, count=200, extended=True)
		convos_extended_info = {}

		for group in convos.groups or {}:
			convos_extended_info.update({
				-group.id: group
			})

		for user in convos.profiles or {}:
			convos_extended_info.update({
				user.id: user
			})

		self.vkDialogues = []
		for convo in convos.items or {}:
			extended_info = convos_extended_info.get(convo.conversation.peer.id)

			self.vkDialogues.append(VKDialogue(convo, extended_info, self.vkFullUser.id)) # type: ignore


		return self.vkDialogues

	def getDialogueByID(self, dialogue_id: int) -> VKDialogue | None:
		"""
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ –µ–≥–æ ID.
		"""

		for dialogue in self.vkDialogues:
			if dialogue.ID == dialogue_id:
				return dialogue

		return None

	def __str__(self) -> str:
		return f"<VKAccount id{self.vkFullUser.id}>"

class VKDialogue:
	"""
	–ö–ª–∞—Å—Å, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∏–π –¥–∏–∞–ª–æ–≥ –í–ö; —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –≥—Ä—É–ø–ø–æ–π (–±–æ—Ç–æ–º), –∏–ª–∏ —Å –±–µ—Å–µ–¥–æ–π.
	"""

	_dialogue: Any
	_extended: Any
	_type: str

	isUser: bool
	isGroup: bool
	isConversation: bool
	isSelf: bool

	firstName: str
	lastName: str
	fullName: str
	username: str
	photoURL: str
	ID: int
	absID: int
	domain: str
	isPinned: bool
	isMale: bool


	def __init__(self, dialogue: MessagesConversationWithMessage, extended_info: UsersUserFull | GroupsGroupFull | None, self_user_id: Optional[int]) -> None:
		self._dialogue = dialogue
		self._extended = extended_info
		self._type = dialogue.conversation.peer.type.value

		self.isUser = self._type == "user"
		self.isGroup = self._type == "group"
		self.isConversation = self._type == "chat"
		self.isSelf = self.isUser and self._dialogue.conversation.peer.id == self_user_id

		assert self.isUser or self.isGroup or self.isConversation, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∏–∞–ª–æ–≥–∞: {self._type}"

		self.isPinned = self._dialogue.conversation.sort_id.major_id > 0


		if self.isUser:
			if self.isSelf:
				self.firstName = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
				self.lastName = ""
				self.fullName = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
			else:
				self.firstName = self._extended.first_name
				self.lastName = self._extended.last_name
				self.fullName = f"{self.firstName} {self.lastName}"

			self.username = self._extended.domain
			self.photoURL = self._extended.photo_100
			self.ID = self._extended.id
			self.absID = self.ID
			self.domain = self._extended.screen_name
			self.isMale = self._extended.sex == 2
		elif self.isGroup:
			self.firstName = self._extended.name
			self.lastName = ""
			self.fullName = self.firstName
			self.username = self._extended.screen_name
			self.photoURL = self._extended.photo_100
			self.ID = -self._extended.id
			self.absID = self.ID
			self.domain = self._extended.screen_name
			self.isMale = True
		else:
			self.firstName = self._dialogue.conversation.chat_settings.title
			self.lastName = ""
			self.fullName = self.firstName
			self.username = ""
			self.ID = self._dialogue.conversation.peer.id
			self.absID = self.ID - 2000000000
			self.domain = ""
			self.isMale = True

			_photo = self._dialogue.conversation.chat_settings.photo
			if _photo:
				self.photoURL = getFirstAvailableValueFromClass(_photo, "photo_max_orig", "photo_max", "photo_400_orig", "photo_200_orig", "photo_200", default="https://vk.com/images/camera_400.png") # type: ignore

	def __str__(self) -> str:
		return f"<VKDialogue id{self.ID}>"
