# coding: utf-8

# –ö–æ–¥ –¥–ª—è –ª–æ–≥–∏–∫–∏ Telegram-–±–æ—Ç–∞.

from __future__ import annotations
from asyncio import Task
import asyncio

import datetime
from typing import Any, List, Literal, Optional, Tuple, cast

import aiogram
import vkbottle
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from loguru import logger
from vkbottle_types.responses.account import AccountUserSettings

import Exceptions
from DB import getDefaultCollection
from ServiceAPIs.Base import DialogueGroup
from ServiceAPIs.VK import VKDialogue, VKTelehooperAPI
from TelegramBotHandlers.commands import MD

class Telehooper:
	"""
	–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –±–æ—Ç–∞. –û–Ω –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è MAPI, Telegram Bot'–∞ –∏ –ø—Ä–æ—á–µ–µ.
	"""

	token: str
	parse_mode: str
	storage: MemoryStorage

	DP: aiogram.Dispatcher
	TGBot: aiogram.Bot

	miniBots: List[Minibot]

	telehooperbotUsers: List[TelehooperUser]
	dialogueGroupsList: List[DialogueGroup]

	vkAPI: VKTelehooperAPI | None

	def __init__(self, telegram_bot_token: str, telegram_bot_parse_mode = aiogram.types.ParseMode.HTML, storage: Optional[MemoryStorage] = None) -> None:
		self.token = telegram_bot_token
		self.parse_mode = telegram_bot_parse_mode # type: ignore

		self.miniBots = []

		self.telehooperbotUsers = []
		self.dialogueGroupsList = []

		if storage is None:
			self.storage = MemoryStorage()
		else:
			self.storage = storage


	def initTelegramBot(self) -> Tuple[aiogram.Bot, aiogram.Dispatcher]:
		"""
		–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Telegram-–±–æ—Ç–∞.
		"""

		# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram-–±–æ—Ç–∞:
		Bot = aiogram.Bot(
			token       = self.token,
			parse_mode  = self.parse_mode
		)

		# –°–æ–∑–¥–∞—ë–º Dispatcher:
		DP = aiogram.Dispatcher(Bot, storage=self.storage)

		# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–ª–∞—Å—Å:
		self.DP = DP
		self.TGBot = Bot

		# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã (handler'—ã):
		self.initTelegramBotHandlers()

		return Bot, DP

	def initTelegramBotHandlers(self) -> None:
		"""
		–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ handler'—ã –±–æ—Ç–∞.
		"""

		# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ Handler'—ã –∫–∞–∫ –º–æ–¥—É–ª–∏:
		from TelegramBotHandlers import OtherCallbackQueryHandlers
		from TelegramBotHandlers.commands import (Help, Self, Start, This,
		                                          VKLogin, Debug)
		from TelegramBotHandlers.events import GroupEvents, RegularMessageHandlers

		# –ê —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –±–æ—Ç–∞:
		self.importHandlers([Start, VKLogin, GroupEvents, OtherCallbackQueryHandlers, This, Self, RegularMessageHandlers, MD, Help, Debug], self, is_multibot=False)

		# –û—Ç–¥–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è—é Error Handler:
		self.DP.errors_handler()(self.global_error_handler)

	def addMinibot(self, minibot: Minibot):
		"""
		–î–æ–±–∞–≤–ª—è–µ—Ç –º–∏–Ω–∏–±–æ—Ç–∞ –≤ –∫–ª–∞—Å—Å.
		"""

		self.miniBots.append(minibot)

	async def getBotUser(self, user_id: int) -> TelehooperUser:
		"""
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –∫—ç—à–µ, —Ç–æ –æ–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω.
		"""

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–æ–º:
		if user_id == self.TGBot.id:
			raise Exception("getBotUser() –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–æ—Ç–∞ Telehooper.")


		# –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
		for user in self.telehooperbotUsers:
			if user.TGUser.id == user_id:
				return user

		# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–º, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –∏ –µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º:
		user = TelehooperUser(
			self,
			(await self.TGBot.get_chat_member(user_id, user_id)).user
		)
		await user.restoreFromDB()

		self.telehooperbotUsers.append(user)

		return user

	def addDialogueGroup(self, group: DialogueGroup) -> List[DialogueGroup]:
		"""
		–î–æ–±–∞–≤–ª—è–µ—Ç –¥–∏–∞–ª–æ–≥-–≥—Ä—É–ø–ø—É –≤ –±–æ—Ç–∞.
		"""

		# TODO: –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ MAPI?

		self.dialogueGroupsList.append(group)

		# –ü–æ–ª—É—á–∞–µ–º –î–ë:
		DB = getDefaultCollection()

		DB.update_one({
				"_id": "_global"
			}, {
				"$push": {
					"ServiceDialogues.VK": {
						"ID": group.serviceDialogueID,
						"TelegramGroupID": group.group.id,
						"AddDate": datetime.datetime.now(),
						"LatestMessageID": None,
						"LatestServiceMessageID": None
						# TODO: "PinnedMessageID": group.pinnedMessageID
					}
				}
			},

			upsert=True
		)

		return self.dialogueGroupsList

	async def retrieveDialogueListFromDB(self) -> List[DialogueGroup]:
		"""
		–î–æ—Å—Ç–∞—ë—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø-–¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ –î–ë, –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ "–∫—ç—à".
		"""

		# –ü–æ–ª—É—á–∞–µ–º –î–ë:
		DB = getDefaultCollection()

		res = DB.find_one({
			"_id": "_global"
		})

		if not res:
			return []

		old_dialogueList = self.dialogueGroupsList.copy()

		newList = []
		for dialogue in res["ServiceDialogues"]["VK"]:
			# –ò—â–µ–º –≥—Ä—É–ø–ø—É –≤ –∫—ç—à–µ:
			for oldDialogue in old_dialogueList:
				if oldDialogue.serviceDialogueID == dialogue["ID"]:
					newList.append(oldDialogue)
					break
			else:
				# –ï—Å–ª–∏ –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ –∫—ç—à–µ, —Ç–æ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é:
				newDialogue = DialogueGroup(
					await self.TGBot.get_chat(dialogue["TelegramGroupID"]),
					dialogue["ID"]
				)
				newList.append(newDialogue)

		# –ö–∞–∂–¥—ã–π –¥–∏–∞–ª–æ–≥, –Ω–∞—Ö–æ–¥—è—â–∏–π—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º:
		self.dialogueGroupsList = []
		self.dialogueGroupsList.extend(newList)

		return self.dialogueGroupsList

	async def getDialogueGroupByTelegramGroup(self, telegram_group: aiogram.types.Chat | int) -> DialogueGroup | None:
		"""
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–ª–æ–≥-–≥—Ä—É–ø–ø—É –ø–æ ID –≥—Ä—É–ø–ø—ã Telegram, –ª–∏–±–æ –∂–µ `None`, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ.
		"""

		await self.retrieveDialogueListFromDB()

		if isinstance(telegram_group, aiogram.types.Chat):
			telegram_group = telegram_group.id

		for group in self.dialogueGroupsList:
			if group.group.id == telegram_group:
				return group

		return None

	async def getDialogueGroupByServiceDialogueID(self, service_dialogue_id: aiogram.types.Chat | int) -> DialogueGroup | None:
		"""
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–ª–æ–≥-–≥—Ä—É–ø–ø—É –ø–æ –µ—ë ID –≤ —Å–µ—Ä–≤–∏—Å–µ, –ª–∏–±–æ –∂–µ `None`, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ.
		"""

		await self.retrieveDialogueListFromDB()

		for group in self.dialogueGroupsList:
			if group.serviceDialogueID == service_dialogue_id:
				return group

		return None

	def importHandlers(self, handlers, bot: Telehooper | Minibot, mainBot: Optional[Telehooper] = None, is_multibot: bool = False) -> None:
		"""
		–ó–∞–≥—Ä—É–∂–∞–µ—Ç (–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç?) –≤—Å–µ Handler'—ã –≤ –±–æ—Ç–∞.
		"""

		MESSAGE_HANDLERS_IMPORTED_FILENAMES = [i.__name__.split(".")[-1] + ".py" for i in handlers]

		# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã.
		logger.debug(f"–ë—ã–ª–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(handlers)} handler'–æ–≤, –∑–∞–≥—Ä—É–∂–∞—é –∏—Ö...")

		for index, messageHandler in enumerate(handlers):
			messageHandler._setupCHandler(bot)

			logger.debug(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã \"{handlers[index]}\".")

		logger.debug(f"–í—Å–µ handler'—ã –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

	async def global_error_handler(self, update: aiogram.types.Update, exception) -> bool:
		"""
		–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –í–°–ï–• –æ—à–∏–±–æ–∫ —É –±–æ—Ç–∞.
		"""

		if isinstance(exception, aiogram.utils.exceptions.Throttled):
			await update.message.answer("‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
		elif isinstance(exception, Exceptions.CommandAllowedOnlyInGroup):
			await update.message.answer("‚ö†Ô∏è –î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ Telegram-–≥—Ä—É–ø–ø–∞—Ö.")
		elif isinstance(exception, Exceptions.CommandAllowedOnlyInPrivateChats):
			await update.message.answer(f"‚ö†Ô∏è –î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ {(await update.bot.get_me()).get_mention('–≤ –ª–∏—á–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ —Å –±–æ—Ç–æ–º', as_html=True)}.")
		elif isinstance(exception, Exceptions.CommandAllowedOnlyInBotDialogue):
			await update.message.answer("‚ö†Ô∏è –î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –¥–∏–∞–ª–æ–≥–µ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.\n\n‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å–µ—Ä–≤–∏—Å–∞.")
		else:
			logger.exception(exception)

			await update.bot.send_message(update.message.chat.id, f"<b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòï\n\n</b>–£ –±–æ—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞:\n<code>{exception}\n</code>\n\n‚ÑπÔ∏è –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, —Å–¥–µ–ª–∞–π –±–∞–≥ —Ä–µ–ø–æ—Ä—Ç –≤ <a href=\"https://github.com/Zensonaton/Telehooper/issues\">Issue</a> –ø—Ä–æ–µ–∫—Ç–∞.")

		return True

	async def sendMessage(self, user: TelehooperUser, text: str | None, chat_id: int | None = None, attachments: list | None = [], reply_to: int | None = None, allow_sending_temp_messages: bool = True, return_only_first_element: bool = True):
		"""
		–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
		"""

		def _return(variable):
			"""
			–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤, –∏ `return_only_first_element` - True.
			"""

			if return_only_first_element and isinstance(variable, list):
				return variable[0]
			else:
				return variable

		# –§–∏–∫—Å—ã:
		if attachments is None:
			attachments = []

		if text is None:
			text = ""

		if chat_id is None:
			chat_id = user.TGUser.id

		reply_to = reply_to if reply_to is None else int(reply_to)

		self.vkAPI = cast(VKTelehooperAPI, self.vkAPI)

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –≤–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:
		if len(attachments) > 0:
			tempMediaGroup = aiogram.types.MediaGroup()
			loadingCaption = "<i>–í–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏, –ø–æ–¥–æ–∂–¥–∏...</i>\n\n" + text

			# –ï—Å–ª–∏ –º—ã –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö:
			if allow_sending_temp_messages and len(attachments) > 1:

				tempImageFileID: str | None = None
				tempMessages: List[aiogram.types.Message] = []
				DB = getDefaultCollection()

				# –ü—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å fileID –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–æ—Ç–∫–∏ –∏–∑ –î–ë:
				res = DB.find_one({"_id": "_global"})
				if res:
					tempImageFileID = res["TempDownloadImageFileID"]

				# –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è:
				for index in range(len(attachments)):

					# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –≤ –î–ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞. –ï—Å–ª–∏ –¥–∞,
					# —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º caption —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ, –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ Telegram
					# –Ω–µ –ø–æ–∫–∞–∂–µ—Ç –Ω–∞–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
					#
					# –ö–∞–∫ –±—ã —è –Ω–µ —Ö–≤–∞–ª–∏–ª Telegram, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –∑–¥–µ—Å—å –æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω—ã.
					if tempImageFileID:
						tempMediaGroup.attach(
							aiogram.types.InputMediaPhoto(tempImageFileID, loadingCaption if index == 0 else None)
						)
					else:
						tempMediaGroup.attach(
							aiogram.types.InputMediaPhoto(
								aiogram.types.InputFile("downloadImage.png"), 
								loadingCaption if index == 0 else None
							)
						)

						# –ß—Ç–æ –±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å –æ–¥–Ω—É –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ñ–æ—Ç–∫—É –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–∑, –¥–µ–ª–∞–µ–º —Ç–∞–∫:
						tempImageFileID = tempMessages[0].photo[-1].file_id

						# –ê —Ç–∞–∫ –∂–µ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º fileID –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–æ—Ç–∫–∏ –≤ –î–ë:
						DB.update_one({"_id": "_global"}, {
							"$set": {
								"TempDownloadImageFileID": tempMessages[0].photo[-1].file_id
							}
						})

				# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∑–∞–º–µ–Ω–∏–º —Ä–µ–∞–ª—å–Ω—ã–º–∏ –≤–ª–æ–∂–µ–Ω–∏—è–º–∏.
				tempMessages = await self.TGBot.send_media_group(chat_id, tempMediaGroup, reply_to_message_id=reply_to)

				# –°–ø–∏–º, –∏–±–æ flood control.
				await asyncio.sleep(3)

				# –¢–µ–ø–µ—Ä—å –Ω–∞–º —Å—Ç–æ–∏—Ç –æ—Ç—Ä–µ–¥–∞—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –≤–ª–æ–∂–µ–Ω–∏—è–º–∏.
				# –Ø —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é –≤—Å—ë —Å –∫–æ–Ω—Ü–∞, —á—Ç–æ –±—ã –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å –ª–∏—à–Ω–∏–π —Ä–∞–∑ caption
				# —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
				for index, attachment in reversed(list(enumerate(attachments))):
					await self.vkAPI.startDialogueActivity(user, chat_id, "photo")

					# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω:
					if not attachment.ready:
						await attachment.parse()

					# –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –Ω–æ–≤—ã–π:
					await tempMessages[index].edit_media(
						aiogram.types.InputMedia(
							media=attachment.aiofile, 
							caption=text if index == 0 else None
						)
					)

					# –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —Å–ø–∏–º, —á—Ç–æ –±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç:
					await asyncio.sleep(1.5)

				return _return(tempMessages)
			else:
				# –ï—Å–ª–∏ –º—ã –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –ø–æ –æ–¥–Ω–æ–º—É –≤ MediaGroup:

				for index, attachment in enumerate(attachments):
					if not attachment.ready:
						await attachment.parse()

					MEDIA_TYPES = ["photo", "video", "document", "animation"]

					if attachment.type in MEDIA_TYPES:
						tempMediaGroup.attach(aiogram.types.InputMedia(media=attachment.aiofile, caption=text if index == 0 else None))
					elif attachment.type == "voice":
						return _return(await self.TGBot.send_voice(chat_id, attachment.aiofile, reply_to_message_id=reply_to))



				# –ò –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ MediaGroup, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:
				await self.vkAPI.startDialogueActivity(user, chat_id, "photo")

				return _return(await self.TGBot.send_media_group(chat_id, tempMediaGroup, reply_to_message_id=reply_to))

		# –£ –Ω–∞—Å –Ω–µ—Ç –Ω–∏–∫–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –≤–ª–æ–∂–µ–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É –º—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ:
		return _return(await self.TGBot.send_message(chat_id, text, reply_to_message_id=reply_to))

	async def editMessage(self, user: TelehooperUser, text: str | None, chat_id: int, message_id: str | int, attachments: list | None = []):
		"""
		–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
		"""

		if text is None:
			text = ""

		if message_id is str:
			message_id = int(message_id)
		message_id = cast(int, message_id)

		if attachments is None:
			attachments = []

		# await self.TGBot.edit_message_text(f"{text}      <i>‚úèÔ∏è –∏–∑–º–µ–Ω–µ–Ω–æ...</i>", chat_id, message_id)
		await self.TGBot.edit_message_text(f"{text}      <i>(—Ä–µ–¥.)</i>", chat_id, message_id)

	async def startDialogueActivity(self, chat_id: int, activity_type: Literal["typing", "upload_photo", "record_video", "upload_video", "record_voice", "upload_voice", "upload_document", "choose_sticker", "find_location", "record_video_note", "upload_video_note"] = "typing"):
		await self.TGBot.send_chat_action(chat_id, action=activity_type)

	async def saveCachedResource(self, service_name: str, resource_input: str, resource_output: str):
		"""
		–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ—Å—É—Ä—Å –≤ –∫—ç—à. –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è, –∫ –ø—Ä–∏–º–µ—Ä—É, —Å—Ç–∏–∫–µ—Ä–æ–≤.
		"""

		DB = getDefaultCollection()

		DB.update_one({
				"_id": "_global"
			},

			{

			}
		)


	def __str__(self) -> str:
		return f"<TelehooperBot id{self.TGBot.id}>"

class Minibot:
	"""
	–ö–ª–∞—Å—Å –º–∏–Ω–∏-–±–æ—Ç–∞.
	"""

	token: str
	parse_mode: str
	storage: MemoryStorage

	MainBot: Telehooper
	TGBot: aiogram.Bot
	DP: aiogram.Dispatcher

	def __init__(self, main_telegram_bot: Telehooper, telegram_bot_token: str, telegram_bot_parse_mode: str = aiogram.types.ParseMode.HTML, storage: Optional[MemoryStorage] = None) -> None: # type: ignore
		self.MainBot = main_telegram_bot
		self.token = telegram_bot_token
		self.parse_mode = telegram_bot_parse_mode

		if storage is None:
			self.storage = MemoryStorage()
		else:
			self.storage = storage


	def initTelegramBot(self, add_to_main_bot: bool = True) -> Tuple[aiogram.Bot, aiogram.Dispatcher]:
		"""
		–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Telegram –±–æ—Ç–∞.
		"""

		# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram-–±–æ—Ç–∞:
		Bot = aiogram.Bot(
			token       = self.token,
			parse_mode  = self.parse_mode
		)

		# –°–æ–∑–¥–∞—ë–º Dispatcher:
		DP = aiogram.Dispatcher(Bot, storage=self.storage)

		# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–ª–∞—Å—Å:
		self.DP = DP
		self.TGBot = Bot

		# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã (handler'—ã):
		self.initTelegramBotHandlers()

		# –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞ –≤ –≥–ª–∞–≤–Ω—ã–π –±–æ—Ç:
		if add_to_main_bot:
			self.MainBot.addMinibot(self)

		return Bot, DP

	def initTelegramBotHandlers(self) -> None:
		"""
		–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ handler'—ã –¥–ª—è –ú—É–ª—å—Ç–∏–±–æ—Ç–∞.
		"""

		from TelegramMultibotHandlers import DMMessage
		self.MainBot.importHandlers([DMMessage], self, is_multibot=True, mainBot=self.MainBot)

		self.DP.errors_handler()(self.MainBot.global_error_handler)

class TelehooperUser:
	"""
	–ö–ª–∞—Å—Å, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞ Telehooper: —Ç—É—Ç –±—É–¥—É—Ç –≤—Å–µ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã.
	"""

	TGUser: aiogram.types.User
	bot: Telehooper

	vkAPI: vkbottle.API
	vkUser: vkbottle.User

	APIstorage: TelehooperAPIStorage

	def __init__(self, bot: Telehooper, user: aiogram.types.User) -> None:
		self.TGUser = user
		self.bot = bot
		self.isVKConnected = False
		self.APIstorage = TelehooperAPIStorage()


	async def restoreFromDB(self) -> None:
		"""
		–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∞ —Ç–∞–∫ –∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏–∑ –î–ë.
		"""

		DB = getDefaultCollection()

		res = DB.find_one({"_id": self.TGUser.id})
		if res and res["Services"]["VK"]["Auth"]:
			# –ê–∫–∫–∞—É–Ω—Ç –í–ö –ø–æ–¥–∫–ª—é—á—ë–Ω.

			# –ü–æ–¥–∫–ª—é—á–∞–µ–º –í–ö:
			# await self.connectVKAccount(res["Services"]["VK"]["Token"], res["Services"]["VK"]["IsAuthViaPassword"])
			# TODO?
			pass

	async def getDialogueGroupByTelegramGroup(self, telegram_group: aiogram.types.Chat | int) -> DialogueGroup | None:
		"""
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–ª–æ–≥-–≥—Ä—É–ø–ø—É –ø–æ ID –≥—Ä—É–ø–ø—ã Telegram, –ª–∏–±–æ –∂–µ `None`, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ.
		"""

		return await self.bot.getDialogueGroupByTelegramGroup(telegram_group)

	async def getDialogueGroupByServiceDialogueID(self, service_dialogue_id: int) -> DialogueGroup | None:
		"""
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–ª–æ–≥-–≥—Ä—É–ø–ø—É –ø–æ ID –≥—Ä—É–ø–ø—ã Telegram, –ª–∏–±–æ –∂–µ `None`, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ.
		"""

		return await self.bot.getDialogueGroupByServiceDialogueID(service_dialogue_id)

	def __str__(self) -> str:
		return f"<TelehooperUser id:{self.TGUser.id}>"

class TelehooperAPIStorage:
	"""
	–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –≤–∞–∂–Ω–æ–π –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
	"""

	class VKAPIStorage:
		"""
		–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–∂–Ω–æ–π –¥–ª—è VK API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
		"""

		accountInfo: AccountUserSettings = None # type: ignore
		fullUserInfo: Any = None # type: ignore # FIXME: –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ –ø–æ–ª–µ?
		pollingTask: Task = None # type: ignore
		dialogues: List[VKDialogue] = []

	vk: VKAPIStorage

	def __init__(self) -> None:
		self.vk = self.VKAPIStorage()

class CachedResource:
	"""
	–ö–ª–∞—Å—Å, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∏–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å.
	"""

	input: str
	output: str

	def __init__(self, input: str, output: str) -> None:
		self.input = input
		self.output = output
