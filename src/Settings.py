# coding: utf-8

from typing import TYPE_CHECKING, Any, List, Optional, cast

from loguru import logger

import Utils
from DB import getDefaultCollection

if TYPE_CHECKING:
	from TelegramBot import TelehooperUser

REQUIRED_FILES_PROPERTIES = ["Name", "Default"]

class SettingsHandler:
	"""
	–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫.
	"""

	settingsTree: dict

	def __init__(self, settings_tree: dict) -> None:
		self.settingsTree = settings_tree

	def testIntegrity(self, raise_exception: bool = True, log_stats: bool = True):
		"""
		–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥—Ä–µ–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫, –∞ —Ç–∞–∫ –∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è `ID`, `FullPath` –∏ `IsAFile`
		"""

		try:
			self._test(self.settingsTree, "", log_stats)
		except Exception as error:
			if raise_exception:
				raise error

			return False

		return True

	def _test(self, object: dict, current_dir: str, log_stats: bool = True):
		"""
		–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∞–ª—É—é —á–∞—Å—Ç—å –¥—Ä–µ–≤–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫.
		"""

		# TODO: Test DependsOn

		files = self.getFilesDict(object)
		for name, file in files.items():
			if not isinstance(file, dict):
				raise Exception(f"–£ —Ñ–∞–π–ª–∞ \"{name}\" –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ç–∏–ø: {type(file)}, —Ö–æ—Ç—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å dict.")

			for property in REQUIRED_FILES_PROPERTIES:
				if property in file:
					continue

				raise Exception(f"–í–∞–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ \"{property}\" –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ñ–∞–π–ª–µ {name}.")

			file["ID"] = name
			file["FullPath"] = f"{current_dir}.{name}"
			file["IsAFile"] = True
			file["IsAFolder"] = False

		folders = self.getFoldersDict(object)
		for name, folder in folders.items():
			if not isinstance(folder, dict):
				raise Exception(f"–£ –ø–∞–ø–∫–∏ \"{name}\" –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ç–∏–ø: {type(folder)}, —Ö–æ—Ç—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å dict.")

			folder["ID"] = name
			if current_dir:
				folder["FullPath"] = f"{current_dir}.{name}"
			else:
				folder["FullPath"] = name
			folder["IsAFile"] = False
			folder["IsAFolder"] = True


			self._test(folder, folder["FullPath"], False)

		if log_stats:
			logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä–µ–≤–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—ã–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –æ—à–∏–±–æ–∫ –Ω–µ –±—ã–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")

	def listPath(self, path: str) -> List[str]:
		"""
		–ü–∞—Ä—Å–∏—Ç "–ø—É—Ç—å" –≤–∏–¥–∞ `a.b.c.d`, –≤—ã–¥–∞–≤–∞—è –º–∞—Å—Å–∏–≤ –∏–∑ "–ø–∞–ø–æ–∫" –∏ "—Ñ–∞–π–ª–æ–≤": `["a", "b", "c", "d"]` 
		"""

		return path.split(".")

	def getFolders(self, path: str) -> dict | None:
		"""
		–í—ã–¥–∞—ë—Ç `dict` —Å–æ –≤—Å–µ–º–∏ "–ø–∞–ø–∫–∞–º–∏" –ø–æ –ø—É—Ç—é `path`.
		"""

		traversedRes = cast(dict, self.getByPath(path, default={}))

		return self.getFoldersDict(traversedRes)

	def getFiles(self, path: str) -> dict:
		"""
		–í—ã–¥–∞—ë—Ç `dict` —Å–æ –≤—Å–µ–º–∏ "—Ñ–∞–π–ª–∞–º–∏" –ø–æ –ø—É—Ç—é `path`.
		"""

		traversedRes = cast(dict, self.getByPath(path, default={}))

		return self.getFilesDict(traversedRes)

	def getFoldersDict(self, object: dict) -> dict:
		"""
		–í—ã–¥–∞—ë—Ç `dict` —Å–æ –≤—Å–µ–º–∏ "–ø–∞–ø–∫–∞–º–∏" –∏–∑ –æ–±—ä–µ–∫—Ç–∞ `object`.
		"""

		return {k: v for k, v in object.items() if isinstance(v, dict) and "Default" not in v}

	def getFilesDict(self, object: dict) -> dict:
		"""
		–í—ã–¥–∞—ë—Ç `dict` —Å–æ –≤—Å–µ–º–∏ "—Ñ–∞–π–ª–∞–º–∏" –∏–∑ –æ–±—ä–µ–∫—Ç–∞ `object`.
		"""

		return {k: v for k, v in object.items() if isinstance(v, dict) and "Default" in v}

	def getByPath(self, path: str, default: Any = {}) -> dict | None:
		"""
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å–æ –≤—Å–µ–º–∏ –ø–∞–ø–∫–∞–º–∏ –∏ —Ñ–∞–π–ª–∞–º–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω–æ, —Ç–æ –≤–µ—Ä–Ω—ë—Ç `default`.
		"""
		
		return Utils.traverseDict(self.settingsTree, *(self.listPath(path)), default=default)

	def renderByPath(self, path: List[str], user: Optional["TelehooperUser"] = None, put_settings_folder_first: bool = True, move_selected_to_end: bool = True, markdown_monospace_space_characters: bool = True, insert_user_path: bool = True) -> str:
		"""
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏ –ø–æ –ø—É—Ç–∏ `path`. –ò–¥–µ—è –±—ã–ª–∞ –≤–∑—è—Ç–∞ —É –∫–æ–º–∞–Ω–¥—ã `tree`.

		–í –∫–æ–¥–µ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä–µ–≤–Ω—è—è, —Å—Ç—Ä–∞—à–Ω–∞—è –º–∞–≥–∏—è, —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è.
		"""

		# –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∞–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
		boxChar_URD = " ‚îú‚îÄ "
		boxChar_UR  = " ‚îî‚îÄ "

		# –°—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–æ –∏—Ç–æ–≥—É –¥–æ–ø–æ–ª–Ω—è—Ç—å—Å—è:
		outStr = ""

		# –î–æ–±–∞–≤–ª—è–µ–º "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏" –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ:
		if put_settings_folder_first:
			outStr += "<b>üìÇ –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>"

			if insert_user_path:
				outStr += "  ‚Äî  <code>/setting " + '.'.join(path) + "</code>" 

		outStr += "\n"

		def _addMarkdownFormat(string: str) -> str:
			"""
			–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è `<code> ... </code>`, –µ—Å–ª–∏ –≤–Ω–µ—à–Ω—è—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è `markdown_monospace_space_characters` —Ä–∞–≤–Ω–∞ `True`.
			"""

			if markdown_monospace_space_characters:
				return "<code>" + string + "</code>"

			return string

		def _render(object: dict, pathIndex: int, fullPath: list[str]) -> str:
			"""
			–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–Ω–¥–µ—Ä —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —á–∞—Å—Ç–µ–π.
			"""

			# –°—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–æ –∏—Ç–æ–≥—É –¥–æ–ø–æ–ª–Ω—è—Ç—å—Å—è:
			outStr = ""

			# –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –ø–∞–ø–∫–∞–º:
			folders = self.getFoldersDict(object)

			# –ï—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ, —Ç–æ –æ—Ç–∫—Ä—ã—Ç—É—é –ø–∞–ø–∫—É –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ —Å–∞–º—ã–π –∫–æ–Ω–µ—Ü:
			if move_selected_to_end and len(fullPath) and pathIndex < len(fullPath) and fullPath[pathIndex] in folders:
				folders[fullPath[pathIndex]] = folders.pop(fullPath[pathIndex])

			# –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –ø–∞–ø–∫–∞–º.
			foldersLen = len(folders)
			for index, folder in enumerate(folders, start=1):
				folderName = folder
				folder = folders[folder]
				friendlyName = folder["Name"]
				isAvailable = True
				folderCharacter = "üìÅ "

				if user:
					isAvailable = self.checkSettingAvailability(user, folder["FullPath"])

				if pathIndex < len(fullPath) and fullPath[pathIndex] == folderName:
					friendlyName = "<b>" + friendlyName + "</b>"
					folderCharacter = "üìÇ "

				outStr += _addMarkdownFormat(("    " * pathIndex) + (boxChar_URD if (index) < foldersLen else boxChar_UR)) + ("" if isAvailable else "<s>") + folderCharacter + friendlyName + ("" if isAvailable else "</s>") + "\n"

			
			# –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º:
			files = self.getFilesDict(object)

			# –ï—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ, —Ç–æ –æ—Ç–∫—Ä—ã—Ç—ã–π —Ñ–∞–π–ª –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ —Å–∞–º—ã–π –∫–æ–Ω–µ—Ü:
			if move_selected_to_end and len(fullPath) and pathIndex < len(fullPath) and fullPath[pathIndex] in files:
				files[fullPath[pathIndex]] = files.pop(fullPath[pathIndex])

			filesLen = len(files)
			for index, file in enumerate(files, start=1):
				fileName = file
				file = files[file]
				isAvailable = True
				friendlyName = file["Name"]

				if user:
					isAvailable = self.checkSettingAvailability(user, file["FullPath"])

				if pathIndex < len(fullPath) and fullPath[pathIndex] == fileName:
					friendlyName = "<b>" + friendlyName + "</b> ‚¨ÖÔ∏è"


				outStr += _addMarkdownFormat(("    " * pathIndex) + (boxChar_URD if (index) < filesLen else boxChar_UR)) + ("" if isAvailable else "<s>") + "‚öôÔ∏è " + friendlyName + ("" if isAvailable else "</s>") + "\n"


			# –ï—Å–ª–∏ —É –Ω–∞—à –ø—É—Ç—å –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º:
			if pathIndex < len(fullPath):
				outStr += _render(object[fullPath[pathIndex]], pathIndex + 1, fullPath)


			return outStr

		outStr += _render(self.settingsTree, 0, path)

		# –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–π /n, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤–æ–π –∏–º–µ–µ—Ç—Å—è:
		if outStr.endswith("\n"):
			outStr = outStr[:-1]


		return outStr

	def getDefaultSetting(self, path: str) -> Any | None:
		"""
		–í—ã–¥–∞—ë—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ª–∏–±–æ `None`.
		"""

		return cast(dict, self.getByPath(path, default={})).get("Default", None)

	def getUserSetting(self, user: "TelehooperUser", path: str) -> Any | None:
		"""
		–î–æ—Å—Ç–∞—ë—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–ª–∏ –∂–µ `None`, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ—Ç.
		"""

		DB = getDefaultCollection()

		res = DB.find_one({"_id": user.TGUser.id})

		if not res:
			return None

		if not self.getByPath(path):
			raise Exception(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ \"{path}\" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

		userSetting = res["Settings"].get(path.replace(".", "_"), None)

		if userSetting:
			return userSetting

		return self.getDefaultSetting(path)

	def setUserSetting(self, user: "TelehooperUser", path: str, new_value: Any):
		"""
		–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –î–ë.
		"""

		DB = getDefaultCollection()

		res = DB.find_one({"_id": user.TGUser.id})

		if not res:
			return

		if not self.getByPath(path):
			raise Exception(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ \"{path}\" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

		path = path.replace(".", "_")

		userSetting = res["Settings"].get(path, None)

		if new_value == userSetting:
			# –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.

			return

		DB.update_one(
			{
				"_id": user.TGUser.id
			},
			
			{
				"$set": {
					f"Settings.{path}": new_value
				}
			},
			
			upsert=True
		)

	def checkSettingAvailability(self, user: "TelehooperUser", path: str) -> bool:
		"""
		–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è `DependsOn` —É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ï—Å–ª–∏ —Ç–∞–∫–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É.
		"""

		settingSelected = cast(dict, self.getByPath(path))
		
		# –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º —É—Å–ª–æ–≤–∏—è–º, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã–µ –∏–º–µ—é—Ç—Å—è:
		for index, condition in enumerate(settingSelected.get("DependsOn", [])):
			if "EqualTo" in condition and self.getUserSetting(user, condition["LookIn"]) != condition["EqualTo"]:
				return False

		return True
