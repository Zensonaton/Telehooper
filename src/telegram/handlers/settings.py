# coding: utf-8

from typing import cast
from aiogram import F, Router, types
from aiogram.filters import Command, CommandObject, Text

from api import settings
from consts import CommandButtons


router = Router()

async def settings_command_message(msg: types.Message, edit_message: bool = False, path: str | None = None) -> None:
	"""
	–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã `/settings`.
	"""

	setting = None
	setting_selected = False

	try:
		setting = settings.get_setting(path or "")
	except:
		pass
	else:
		setting_selected = setting["IsValue"]

	tree_rendered = settings.render_tree(path)

	_text = (
		"<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>.\n"
		"\n"
		"–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ —á—Ç–æ –±—ã –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –ø–æ —Ä–∞–∑–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∞—Å—Ç—Ä–æ–µ–∫.\n"
		"\n"
		f"üìÇ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>:\n"
		f"{tree_rendered}"
	)

	if setting_selected:
		setting = cast(dict, setting)
		is_enabled = setting["Default"]

		_text = (
			f"<b>‚öôÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ \"{setting['Name']}\"</b>.\n"
			"\n"
			f"üìÇ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>:\n"
			f"{tree_rendered}"
			"\n"
			f"<b>‚öôÔ∏è {setting['Name']}</b>:\n"
			f"{setting['Documentation']}\n"
			"\n"
			f"<b>‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>:\n"
			f"  ‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {'‚úîÔ∏è –≤–∫–ª—é—á–µ–Ω–æ' if is_enabled else '‚úñÔ∏è –≤—ã–∫–ª—é—á–µ–Ω–æ'}."
		)

	if edit_message:
		await msg.edit_text(
			_text,
			reply_markup=settings.get_keyboard(path)
		)
	else:
		await msg.answer(
			_text,
			reply_markup=settings.get_keyboard(path)
		)

@router.message(Command("settings", "s", "setting"))
@router.message(Text(CommandButtons.SETTINGS))
async def settings_command_handler(msg: types.Message, command: CommandObject | None = None) -> None:
	"""
	Handler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã `/settings`.
	"""

	path = ""
	if command and command.args:
		args = command.args.split()

		path = args[0]

	await settings_command_message(msg, path=path)

@router.callback_query(Text(startswith="/settings"), F.message.as_("msg"))
async def settings_select_inline_handler(query: types.CallbackQuery, msg: types.Message):
	"""
	Inline Callback Handler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã `/help`.

	–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–ø–∞–ø–∫–∏.
	"""

	path = ""
	path_splitted = (query.data or "").split()
	if len(path_splitted) >= 2:
		path = path_splitted[1]

	await settings_command_message(msg, edit_message=True, path=path)
