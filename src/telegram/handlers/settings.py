# coding: utf-8

from typing import cast
from aiogram import F, Router, types
from aiogram.filters import Command, CommandObject, Text

from api import TelehooperAPI, TelehooperUser, settings
from consts import CommandButtons
from exceptions import SettingNotFoundException


router = Router()

async def settings_command_message(msg: types.Message, user: TelehooperUser, edit_message: bool = False, path: str | None = None) -> None:
	"""
	–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã `/settings`.
	"""

	if not path:
		path = ""

	setting = None
	setting_selected = False

	try:
		setting = settings.get_setting(path)
	except:
		pass
	else:
		setting_selected = setting["IsValue"]

	settings_rendered = settings.get_keyboard(path, user.settingsOverriden)
	tree_rendered = settings.render_tree(path)

	_text = (
		"<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>.\n"
		"\n"
		"–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ —á—Ç–æ –±—ã –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –ø–æ —Ä–∞–∑–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∞—Å—Ç—Ä–æ–µ–∫.\n"
		"\n"
		f"üìÇ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>:\n"
		f"{tree_rendered}"
	)

	if setting_selected:
		setting = cast(dict, setting)
		value = await user.get_setting(path)

		value_str = str(value)
		if isinstance(value, bool):
			value_str = "‚úîÔ∏è –í–∫–ª—é—á–µ–Ω–æ" if value else "‚úñÔ∏è –í—ã–∫–ª—é—á–µ–Ω–æ"

		_text = (
			f"<b>‚öôÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ \"{setting['Name']}\"</b>.\n"
			"\n"
			f"üìÇ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>:\n"
			f"{tree_rendered}"
			"\n"
			f"<b>‚öôÔ∏è {setting['Name']}</b>:\n"
			f"{setting['Documentation']}\n"
			"\n"
			f"<b>‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>:\n"
			f"  ‚Ä¢ {'–°–æ—Å—Ç–æ—è–Ω–∏–µ' if type(value) is bool else '–ó–Ω–∞—á–µ–Ω–∏–µ'}: {value_str}."
		)

	if edit_message:
		await msg.edit_text(
			_text,
			reply_markup=settings_rendered
		)
	else:
		await msg.answer(
			_text,
			reply_markup=settings_rendered
		)

@router.message(Command("settings", "s", "setting"))
@router.message(Text(CommandButtons.SETTINGS))
async def settings_command_handler(msg: types.Message, command: CommandObject | None = None) -> None:
	"""
	Handler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã `/settings`.
	"""

	assert msg.from_user

	user = await TelehooperAPI.get_user(msg.from_user)

	path = ""
	if command and command.args:
		args = command.args.split()

		path = args[0]

	await settings_command_message(msg, user, path=path)

@router.callback_query(Text(startswith="/settings set"), F.message.as_("msg"))
async def settings_set_inline_handler(query: types.CallbackQuery, msg: types.Message):
	"""
	Inline Callback Handler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã `/help`.

	–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
	"""

	assert msg.from_user

	user = await TelehooperAPI.get_user(query.from_user)

	path_splitted = (query.data or "").split()
	if len(path_splitted) < 3:
		return

	path = path_splitted[2]
	value = path_splitted[3]

	value_parsed = value
	if value.isdigit():
		value_parsed = int(value)
	elif value in ["True", "False"]:
		value_parsed = value == "True"
	else:
		raise ValueError(f"–ó–∞–¥–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ \"{value}\" –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ \"{path}\", –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ.")

	try:
		setting = settings.get_setting(path)

		if not setting["IsValue"]:
			raise SettingNotFoundException(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ \"{path}\" –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π, –∞ –ø–∞–ø–∫–æ–π.")
	except:
		raise SettingNotFoundException(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ \"{path}\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

	await user.save_setting(path, value_parsed)
	await settings_command_message(msg, user, edit_message=True, path=path)

@router.callback_query(Text(startswith="/settings"), F.message.as_("msg"))
async def settings_select_inline_handler(query: types.CallbackQuery, msg: types.Message):
	"""
	Inline Callback Handler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã `/help`.

	–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–ø–∞–ø–∫–∏.
	"""

	assert msg.from_user

	user = await TelehooperAPI.get_user(query.from_user)

	path = ""
	path_splitted = (query.data or "").split()
	if len(path_splitted) >= 2:
		path = path_splitted[1]

	if path:
		try:
			settings.get_setting(path)
		except:
			raise SettingNotFoundException(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ \"{path}\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

	await settings_command_message(msg, user, edit_message=True, path=path)
