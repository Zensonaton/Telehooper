# coding: utf-8

from typing import cast

from aiogram import F, Bot, Router
from aiogram.filters import CommandObject
from aiogram.types import CallbackQuery, Message, User

import utils
from api import CommandWithDeepLink, TelehooperAPI, TelehooperUser, settings
from config import config
from consts import CommandButtons
from exceptions import SettingNotFoundException


router = Router()

async def settings_command_message(msg: Message, bot: Bot, user: TelehooperUser, edit_message: bool = False, path: str | None = None) -> None:
	"""
	–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã `/settings`.
	"""

	if not path:
		path = ""

	setting = None
	setting_selected = False

	try:
		setting = settings.get_setting(path)
	except:
		pass
	else:
		setting_selected = setting["IsValue"]

	tree_rendered = settings.render_tree(path, user.settingsOverriden)
	settings_keyboard = settings.get_keyboard(path, user.settingsOverriden)

	debug_setting_paths = ""
	if config.debug and await user.get_setting("Debug.ShowSettingPaths"):
		debug_setting_paths = utils.replace_placeholders(
			"\n"
			"{{Debug.ShowSettingPaths}}: <code>" + path + "</code>.\n"
		)

	_text = (
		"<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>.\n"
		f"{debug_setting_paths}"
		"\n"
		"–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ —á—Ç–æ –±—ã –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –ø–æ —Ä–∞–∑–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∞—Å—Ç—Ä–æ–µ–∫.\n"
		"\n"
		f"üìÇ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>:\n"
		f"{tree_rendered}"
	)

	if setting_selected:
		setting = cast(dict, setting)
		value = await user.get_setting(path)

		current_value = "  ‚Ä¢ "
		if setting["ButtonType"] == "bool":
			current_value += f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {'‚úîÔ∏è –í–∫–ª—é—á–µ–Ω–æ' if value else '‚úñÔ∏è –í—ã–∫–ª—é—á–µ–Ω–æ'}"
		elif setting["ButtonType"] == "range":
			current_value += f"–ó–Ω–∞—á–µ–Ω–∏–µ: {value}"
		elif setting["ButtonType"] == "enum":
			current_value += f"–ó–Ω–∞—á–µ–Ω–∏–µ: {setting['EnumValues'][str(value)]}"

		_text = (
			f"<b>‚öôÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ \"{setting['Name']}\"</b>.\n"
			f"{debug_setting_paths}"
			"\n"
			f"üìÇ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>:\n"
			f"{tree_rendered}"
			"\n"
			f"<b>‚öôÔ∏è {setting['Name']}</b>:\n"
			f"{utils.replace_placeholders(setting['Documentation'])}\n"
			"\n"
			f"<b>‚öôÔ∏è –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>:\n"
			f"{current_value}."
		)

	await TelehooperAPI.edit_or_resend_message(
		bot,
		text=_text,
		chat_id=msg.chat.id,
		message_to_edit=msg if edit_message else None,
		reply_markup=settings_keyboard,
		disable_web_page_preview=True
	)

@router.message(CommandWithDeepLink("settings", "s", "setting"))
@router.message(F.text == CommandButtons.SETTINGS)
async def settings_command_handler(msg: Message, bot: Bot, command: CommandObject | None = None) -> None:
	"""
	Handler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã `/settings`.
	"""

	assert msg.from_user

	user = await TelehooperAPI.get_user(msg.from_user)

	path = ""
	if command and command.args:
		args = command.args.split()

		path = args[0]

	await settings_command_message(msg, bot, user, path=path)

@router.callback_query(F.data.startswith("/settings set"), F.message.as_("msg"), F.from_user.as_("user"))
async def settings_set_inline_handler(query: CallbackQuery, msg: Message, user: User, bot: Bot):
	"""
	Inline Callback Handler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã `/help`.

	–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
	"""

	assert msg.from_user

	telehooper_user = await TelehooperAPI.get_user(user)

	path_splitted = (query.data or "").split()
	if len(path_splitted) < 3:
		return

	path = path_splitted[2]
	value = path_splitted[3]

	value_parsed = value
	if value.isdigit():
		value_parsed = int(value)
	elif value in ["True", "False"]:
		value_parsed = value == "True"
	else:
		pass

	try:
		setting = settings.get_setting(path)

		if not setting["IsValue"]:
			raise SettingNotFoundException(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ \"{path}\" –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π, –∞ –ø–∞–ø–∫–æ–π.")
	except:
		raise SettingNotFoundException(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ \"{path}\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

	await telehooper_user.save_setting(path, value_parsed)
	await settings_command_message(msg, bot, telehooper_user, edit_message=True, path=path)

@router.callback_query(F.data.startswith("/settings"), F.message.as_("msg"), F.from_user.as_("user"))
async def settings_select_inline_handler(query: CallbackQuery, msg: Message, user: User, bot: Bot):
	"""
	Inline Callback Handler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã `/help`.

	–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–ø–∞–ø–∫–∏.
	"""

	assert msg.from_user

	telehooper_user = await TelehooperAPI.get_user(user)

	path = ""
	path_splitted = (query.data or "").split()
	if len(path_splitted) >= 2:
		path = path_splitted[1]

	if path:
		try:
			settings.get_setting(path)
		except:
			raise SettingNotFoundException(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ \"{path}\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

	await settings_command_message(msg, bot, telehooper_user, edit_message=True, path=path)
