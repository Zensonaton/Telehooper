# coding: utf-8

from __future__ import annotations

import asyncio
import datetime
import io
import os
from asyncio import Task
from typing import TYPE_CHECKING, Any, List, Literal, cast

import aiogram
import aiohttp
import Utils
import vkbottle
from Consts import AccountDisconnectType
from DB import getDefaultCollection
from loguru import logger
from PIL import Image
from vkbottle.user import Message
from vkbottle_types.objects import MessagesGraffiti
from vkbottle_types.responses.groups import GroupsGroupFull
from vkbottle_types.responses.messages import MessagesConversationWithMessage
from vkbottle_types.responses.users import UsersUserFull
from .Base import BaseTelehooperAPI, MappedMessage

if TYPE_CHECKING:
	from TelegramBot import Telehooper, TelehooperUser

class VKTelehooperAPI(BaseTelehooperAPI):
	"""
	API –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
	"""

	def __init__(self, telehooper_bot: "Telehooper") -> None:
		super().__init__(telehooper_bot)

		self.available = True
		self.serviceCodename = "vk"

	async def connect(self, user: "TelehooperUser", token: str, connect_via_password: bool = False, send_connection_message: bool = False):
		await super().connect(user)

		# –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –í–ö:
		await self.reconnect(user, token, False)

		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏:
		if send_connection_message:
			await self._sendSuccessfulConnectionMessage(user, connect_via_password)

		# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ—É –≤ –î–ë:
		await self._saveConnectedUserToDB(user, token, connect_via_password)

		# –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ API –±–æ—Ç–∞:
		await self.onSuccessfulConnection(user)

	async def reconnect(self, user: "TelehooperUser", token: str, call_onSuccessfulConnection_method: bool = True):
		await super().reconnect(user)

		# –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –í–ö:
		vkAccountAPI = vkbottle.API(token)

		accountInfo = await vkAccountAPI.account.get_profile_info()
		fullUserInfo = await vkAccountAPI.users.get(
			user_ids=[accountInfo.id], 
			fields=["activities", "about", "blacklisted", "blacklisted_by_me", "books", "bdate", "can_be_invited_group", "can_post", "can_see_all_posts", "can_see_audio", "can_send_friend_request", "can_write_private_message", "career", "common_count", "connections", "contacts", "city", "country", "crop_photo", "domain", "education", "exports", "followers_count", "friend_status", "has_photo", "has_mobile", "home_town", "photo_100", "photo_200", "photo_200_orig", "photo_400_orig", "photo_50", "sex", "site", "schools", "screen_name", "status", "verified", "games", "interests", "is_favorite", "is_friend", "is_hidden_from_feed", "last_seen", "maiden_name", "military", "movies", "music", "nickname", "occupation", "online", "personal", "photo_id", "photo_max", "photo_max_orig", "quotes", "relation", "relatives", "timezone", "tv", "universities"]
		)
		await asyncio.sleep(1)

		# –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞, –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –∏ —Ç–æ–∫–µ–Ω –≤–µ—Ä–Ω—ã–π.
		
		user.APIstorage.vk.accountInfo = accountInfo
		user.APIstorage.vk.fullUserInfo = fullUserInfo[0]
		user.vkAPI = vkAccountAPI
		user.vkUser = vkbottle.User(token)

		# –ó–∞–ø—É—Å–∫–∞–µ–º longpoll:
		await self.runPolling(user)

		# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥–∫–ª—é—á—ë–Ω –í–ö:
		user.isVKConnected = True

		# –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ API –±–æ—Ç–∞:
		if call_onSuccessfulConnection_method:
			await self.onSuccessfulConnection(user)

	async def disconnect(self, user: "TelehooperUser", reason: int = AccountDisconnectType.INITIATED_BY_USER):
		await super().disconnect(user)

		self.stopPolling(user)

		user.isVKConnected = False

		if reason not in [AccountDisconnectType.ERRORED, AccountDisconnectType.SILENT]:
			# –ú—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–∞–º–æ–º —Å–µ—Ä–≤–∏—Å–µ –æ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:
			self.telehooper_bot.vkAPI = cast(VKTelehooperAPI, self.telehooper_bot.vkAPI)

			await self.telehooper_bot.vkAPI.sendMessage(
				user,
				message="‚ÑπÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç –±–æ—Ç–∞ ¬´Telehooper¬ª.\n\n–ù–∞–¥–µ—é—Å—å, —á—Ç–æ —Ç—ã –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤–µ—Ä–Ω—ë—à—å—Å—è ü•∫"
			)

			await self.telehooper_bot.sendMessage(
				user,
				(
					"<b>–ê–∫–∫–∞—É–Ω—Ç –±—ã–ª –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç Telehooper</b> ‚ö†Ô∏è\n\n–ê–∫–∫–∞—É–Ω—Ç <b>¬´–í–ö–æ–Ω—Ç–∞–∫—Ç–µ¬ª</b> –±—ã–ª –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç –±–æ—Ç–∞. –î–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ <b>–≤–Ω–µ—à–Ω–µ</b>, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—É—Ç—ë–º –æ—Ç–∑—ã–≤–∞ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –≤ <b>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞</b>."
					if (reason == AccountDisconnectType.EXTERNAL) else
					"<b>–ê–∫–∫–∞—É–Ω—Ç –±—ã–ª –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç Telehooper</b> ‚ÑπÔ∏è\n\n–ê–∫–∫–∞—É–Ω—Ç <b>¬´–í–ö–æ–Ω—Ç–∞–∫—Ç–µ¬ª</b> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç –±–æ—Ç–∞. –û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç–∞–∫ –≤—ã—à–ª–æ."
				)
			)

		# –ü–æ–ª—É—á–∞–µ–º –î–ë:
		DB = getDefaultCollection()

		# –ò —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ—Ç—Ç—É–¥–∞:
		DB.update_one(
			{
				"_id": user.TGUser.id
			},

			{"$set": {
				"Services.VK.Auth": False,
				"Services.VK.Token": None,
				"Services.VK.IsAuthViaPassword": None,
				"Services.VK.AuthDate": None,
				"Services.VK.ID": None,
				"Services.VK.DownloadImage": None,
				"Services.VK.ServiceToTelegramMIDs": []
			}},
			
			upsert=True
		)

		await self.onDisconnect(user)

	async def runPolling(self, user: "TelehooperUser") -> Task:
		"""
		–ó–∞–ø—É—Å–∫–∞–µ—Ç Polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
		"""

		if user.APIstorage.vk.pollingTask:
			# Polling —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ.

			logger.warning(f"–ë—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ polling'–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å TID {user.TGUser.id}")

			return user.APIstorage.vk.pollingTask

		@user.vkUser.on.message()
		async def _onMessage(msg: Message):
			"""
			–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
			"""

			await self.onNewMessage(user, msg)

		@user.vkUser.error_handler.register_error_handler(vkbottle.VKAPIError[5])
		async def _errorHandler(error: vkbottle.VKAPIError):
			"""
			–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —É VK me / Kate Mobile.
			"""

			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –æ—Ç–∫–ª—é—á—ë–Ω–Ω–æ–º –±–æ—Ç–µ:
			await self.disconnect(user, AccountDisconnectType.EXTERNAL)
			
		@user.vkUser.on.raw_event(vkbottle.UserEventType.MESSAGE_EDIT) # type: ignore
		async def _onMessageEdit(msg):
			await self.onMessageEdit(user, msg)

		@user.vkUser.on.raw_event(vkbottle.UserEventType.DIALOG_TYPING_STATE) # type: ignore
		async def _onDialogTypingState(msg):
			# Dialog - —á–∞—Ç —Å —á–µ–ª–æ–≤–µ–∫–æ–º.

			await self.onDialogueActivity(user, msg.object[1], "typing")

		@user.vkUser.on.raw_event(vkbottle.UserEventType.CHAT_TYPING_STATE) # type: ignore
		async def _onChatTypingState(msg):
			# Chat - —á–∞—Ç —Å –±–µ—Å–µ–¥–æ–π.

			await self.onDialogueActivity(user, msg.object[1], "typing")

		@user.vkUser.on.raw_event(vkbottle.UserEventType.CHAT_VOICE_MESSAGE_STATES) # type: ignore
		async def _onChatVoiceMessageState(msg):
			await self.onDialogueActivity(user, msg.object[1], "voice")

		@user.vkUser.on.raw_event(vkbottle.UserEventType.FILE_UPLOAD_STATE) # type: ignore
		async def _onChatFileUploadState(msg):
			await self.onDialogueActivity(user, msg.object[1], "file")

		@user.vkUser.on.raw_event(vkbottle.UserEventType.VIDEO_UPLOAD_STATE) # type: ignore
		async def _onChatVideoUploadState(msg):
			await self.onDialogueActivity(user, msg.object[1], "video")

		@user.vkUser.on.raw_event(vkbottle.UserEventType.PHOTO_UPLOAD_STATE) # type: ignore
		async def _onChatPhotoUploadState(msg):
			await self.onDialogueActivity(user, msg.object[1], "photo")

		@user.vkUser.on.raw_event(vkbottle.UserEventType.MESSAGES_DELETE) # type: ignore
		async def _onMessageDelete(msg):
			# –î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥, –ø–æ—Ö–æ–∂–µ, –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è.

			logger.warning(f"–ú–µ—Ç–æ–¥ _onMessageDelete –±—ã–ª –≤—ã–∑–≤–∞–Ω, —Ö–æ—Ç—è –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª: {msg}")

		@user.vkUser.on.raw_event(vkbottle.UserEventType.INSTALL_MESSAGE_FLAGS) # type: ignore
		async def _onMessageFlagsChange(msg):
			# –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Å–ª—É—á–∞–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.

			IS_DELETED = Utils.getVKMessageFlags(msg.object[2])[7]

			# –ï—Å–ª–∏ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, —Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞ —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—é:
			if IS_DELETED:
				await self.onMessageDelete(user, msg)

		# –°–æ–∑–¥–∞—ë–º Polling-–∑–∞–¥–∞—á—É:
		user.APIstorage.vk.pollingTask = asyncio.create_task(user.vkUser.run_polling(), name=f"VK Polling, id{user.APIstorage.vk.accountInfo.id}") # type: ignore

		return user.APIstorage.vk.pollingTask

	def stopPolling(self, user: "TelehooperUser") -> None:
		"""
		–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Polling.
		"""

		if not user.APIstorage.vk.pollingTask:
			return

		user.APIstorage.vk.pollingTask.cancel()

	def saveMessageID(self, user: "TelehooperUser", telegram_message_id: int | str, vk_message_id: int | str, telegram_dialogue_id: int | str, vk_dialogue_id: int | str, is_sent_via_telegram: bool) -> None:
		super().saveMessageID(user, "VK", telegram_message_id, vk_message_id, telegram_dialogue_id, vk_dialogue_id, is_sent_via_telegram)

		# –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
		self.telehooper_bot.vkAPI = cast("VKTelehooperAPI", self.telehooper_bot.vkAPI)
		self.telehooper_bot.vkAPI.saveLatestMessageID(user, "VK", telegram_dialogue_id, telegram_message_id, vk_message_id)

	async def retrieveDialoguesList(self, user: "TelehooperUser") -> List[VKDialogue]:
		"""
		–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ —Ç–∞–∫ –∂–µ –∫—ç—à–∏—Ä—É–µ—Ç –∏—Ö.
		"""

		convos = await user.vkAPI.messages.get_conversations(offset=0, count=200, extended=True)
		convos_extended_info = {}

		for vkGroup in convos.groups or {}:
			convos_extended_info.update({
				-vkGroup.id: vkGroup
			})

		for vkUser in convos.profiles or {}:
			convos_extended_info.update({
				vkUser.id: vkUser
			})

		user.APIstorage.vk.dialogues = []
		for convo in convos.items or {}:
			extended_info = convos_extended_info.get(convo.conversation.peer.id)

			user.APIstorage.vk.dialogues.append(VKDialogue(convo, extended_info, user.APIstorage.vk.accountInfo.id)) # type: ignore


		return user.APIstorage.vk.dialogues

	def getDialogueByID(self, user: "TelehooperUser", dialogue_id: int) -> VKDialogue | None:
		"""
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –í–ö –ø–æ –µ–≥–æ ID. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –≤ –¥–∏–∞–ª–æ–≥-–≥—Ä—É–ø–ø—É.
		"""

		if not user.APIstorage.vk.dialogues:
			return None

		for dialogue in user.APIstorage.vk.dialogues:
			if dialogue.ID == dialogue_id:
				return dialogue

		return None

	async def _commandHandler(self, user: "TelehooperUser", msg: Message) -> int | aiogram.types.Message:
		"""
		–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–Ω—É—Ç—Ä–∏ —á–∞—Ç–∞ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ" –≤ –í–ö.
		"""

		async def _commandRecieved(msg: Message):
			await user.vkAPI.messages.edit(user.APIstorage.vk.accountInfo.id, "‚úÖ " + msg.text, message_id=msg.id) # type: ignore

		if msg.text.startswith("logoff"):
			# –í—ã—Ö–æ–¥–∏–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞:
			await _commandRecieved(msg)

			await self.disconnect(user, AccountDisconnectType.EXTERNAL)

			# await self.sendServiceMessageOut("‚ÑπÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç –±–æ—Ç–∞ ¬´Telehooper¬ª.", msg.id)
			return 0
		elif msg.text.startswith("test"):
			await _commandRecieved(msg)

			# await self.sendServiceMessageOut("‚úÖ Telegram-–±–æ—Ç ¬´Telehooper¬ª —Ä–∞–±–æ—Ç–∞–µ—Ç!", msg.id)
			return 0
		elif msg.text.startswith("ping"):
			await _commandRecieved(msg)

			# return await self.sendServiceMessageIn("[<b>–í–ö–æ–Ω—Ç–∞–∫—Ç–µ</b>] ¬ª –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏! üëã")
		else:
			# –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.

			return 0

		return 0

	async def onNewMessage(self, user: "TelehooperUser", msg: Message):
		await super().onNewMessage(user)

		if user.APIstorage.vk.fullUserInfo is None:
			# –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –µ—â—ë –Ω–µ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞.

			logger.warning("fullUserInfo is None.")

			return

		if msg.peer_id == user.APIstorage.vk.fullUserInfo.id:
			# –ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ "–ò–∑–±—Ä–∞–Ω–Ω–æ–º", –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É,
			# –Ω–æ –±–æ—Ç—É –≤ –¢–ì –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º.
			tg_message = await self._commandHandler(user, msg)

			if tg_message and isinstance(tg_message, aiogram.types.Message):
				# –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º.

				# self.saveMessageID(tg_message.message_id, msg.message_id, tg_message.chat.id, msg.chat_id, False)
				pass


			return

		if abs(msg.peer_id) == int(os.environ.get("VKBOT_NOTIFIER_ID", 0)):
			# –ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≥—Ä—É–ø–ø—ã Telehooper, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.

			return
			# TODO

		if msg.out:
			await self.onNewOutcomingMessage(user, msg)
		else:
			await self.onNewIncomingMessage(user, msg)

	async def onNewIncomingMessage(self, user: "TelehooperUser", msg: Message):
		await super().onNewIncomingMessage(user)

		FROM_USER = msg.peer_id < 2000000000
		FROM_CONVO = msg.peer_id >= 2000000000

		# –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞-–¥–∏–∞–ª–æ–≥, —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º–µ–Ω–Ω–æ —Ç—É–¥–∞:
		dialogue = await self.telehooper_bot.getDialogueGroupByServiceDialogueID(msg.peer_id)

		# –ï—Å–ª–∏ —Ç–∞–∫–∞—è –¥–∏–∞–ª–æ–≥-–≥—Ä—É–ø–ø–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.
		if not dialogue:
			return

		# –û–±—Ä–∞–±–æ—Ç–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è:
		fileAttachments: List[Utils.File] = []
		for vkAttachment in msg.attachments or []:
			TYPE = vkAttachment.type.value

			# –°–º–æ—Ç—Ä–∏–º, –∫–∞–∫–æ–π —Ç–∏–ø –≤–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—É—á–∏–ª–∏:
			if TYPE == "photo":
				# –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è.
				URL: str = cast(str, vkAttachment.photo.sizes[-5].url) # type: ignore

				fileAttachments.append(Utils.File(URL))
			elif TYPE == "audio_message":
				# –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
				URL: str = vkAttachment.audio_message.link_ogg # type: ignore

				fileAttachments.append(Utils.File(URL, "voice"))
			elif TYPE == "sticker":
				# –°—Ç–∏–∫–µ—Ä.
				URL: str = vkAttachment.sticker.animation_url or vkAttachment.sticker.images[-1].url # type: ignore

				fileAttachments.append(Utils.File(URL, "sticker"))
			elif TYPE == "video":
				# –í–∏–¥–µ–æ.
				# –¢–∞–∫ –∫–∞–∫ –í–ö –Ω–µ –¥–∞—é—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–π
				# —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ, –ø—Ä–∏—ë–¥—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–π API:

				async with aiohttp.ClientSession() as client:
					async with client.post("https://api.vk.com/method/video.get",
						data={
							"videos": f"{vkAttachment.video.owner_id}_{vkAttachment.video.id}_{vkAttachment.video.access_key}", # type: ignore
							"access_token": await user.vkAPI.token_generator.get_token(),
							"v": "5.131"
						}
					) as response:
						res = (await response.json())["response"]["items"][-1]["files"]

						URL: str = cast(
							str, 
							Utils.getFirstAvailableValueFromDict(
								res, 
								"mp4_1080", "mp4_720", "mp4_480", "mp4_360", "mp4_240", "mp4_144"
							)
						)

						fileAttachments.append(Utils.File(URL, "video"))

		# –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:
		replyMessageID = None
		if msg.reply_message:
			res = self.getMessageDataByServiceMID(user, msg.reply_message.id or 0)
			if res:
				replyMessageID = res.telegramMID

		# –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±–µ—Å–µ–¥—ã, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è:
		msgPrefix = ""
		if FROM_CONVO:
			# –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:

			sender = await msg.get_user()
			msgPrefix = (sender.first_name or "") + " " + (sender.last_name or "") + ": "

		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –î–ë:
		telegramMessage = cast(aiogram.types.Message, await self.telehooper_bot.sendMessage(
			user=user,
			text=msgPrefix + (msg.text.replace("<", "&lt;") or "<i>–æ—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —É —Å–æ–æ–±—â–µ–Ω–∏—è. –≤–æ–∑–º–æ–∂–Ω–æ, –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø?</i>"),
			chat_id=dialogue.group.id,
			attachments=fileAttachments,
			reply_to=replyMessageID,
			return_only_first_element=True
		))

		self.telehooper_bot.vkAPI = cast("VKTelehooperAPI", self.telehooper_bot.vkAPI)
		self.telehooper_bot.vkAPI.saveMessageID(
			user,
			telegramMessage.message_id,
			msg.id,
			dialogue.group.id,
			msg.chat_id,
			False
		)

	async def onNewOutcomingMessage(self, user: "TelehooperUser", msg: Message):
		await super().onNewOutcomingMessage(user)

	async def onMessageEdit(self, user: "TelehooperUser", msg):
		await super().onMessageEdit(user)

		# –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:

		MSGID = msg.object[1]
		MSGTEXT = msg.object[6]
		MSGCHATID = msg.object[3]

		res = self.getMessageDataByServiceMID(user, MSGID)
		if not res:
			return

		# –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏–ª.
		# –ï—Å–ª–∏ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ —Å Telegram, —Ç–æ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º.
		if res.sentViaTelegram:
			return

		# –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º:
		await self.telehooper_bot.editMessage(user, MSGTEXT.replace("<", "&lt;"), res.telegramDialogueID, res.telegramMID)

	async def onMessageDelete(self, user: "TelehooperUser", msg):
		await super().onMessageDelete(user)

		# –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:

		MSGID = msg.object[1]
		MSGCHATID = msg.object[3]

		res = self.getMessageDataByServiceMID(user, MSGID)
		if not res:
			return

		# –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏–ª.
		# –ï—Å–ª–∏ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ —Å Telegram, —Ç–æ –Ω–µ —É–¥–∞–ª—è–µ–º.
		if res.sentViaTelegram:
			return

		# –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ, —É–¥–∞–ª—è–µ–º:
		await self.telehooper_bot.deleteMessage(user, res.telegramDialogueID, res.telegramMID)

	async def onDialogueActivity(self, user: "TelehooperUser", chat_id: int, activity_type: Literal["voice", "file", "photo", "typing", "video"] = "typing"):
		await super().onDialogueActivity(user)

		# –ò—â–µ–º –¥–∏–∞–ª–æ–≥ –≤ Telegram:
		res = await self.getDialogueGroupByServiceDialogueID(chat_id)
		if not res:
			return

		telegram_activiy = {
			"typing": "typing",
			"photo": "upload_photo", 
			"video": "record_video", 
			"voice": "record_voice", 
			"file": "upload_document", 
			"video": "record_video_note", 
		}

		activity = telegram_activiy.get(activity_type, "typing")

		await self.telehooper_bot.startDialogueActivity(res.group.id, activity) # type: ignore

	async def _sendSuccessfulConnectionMessage(self, user: "TelehooperUser", connect_via_password: bool = False):
		space = "&#12288;" # –°–∏–º–≤–æ–ª –ø—Ä–æ–±–µ–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
		userInfoData = f"{space}‚Ä¢ –ò–º—è: {user.TGUser.full_name}.\n"

		if user.TGUser.username:
			userInfoData += f"{space}‚Ä¢ –ù–∏–∫–Ω–µ–π–º –≤ Telegram: {user.TGUser.username}.\n"
			userInfoData += f"{space}‚Ä¢ –°—Å—ã–ª–∫–∞: https://t.me/{user.TGUser.username}‚Äã.\n"

		userInfoData += f"{space}‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ " + ("–ø–∞—Ä–æ–ª—å" if connect_via_password else f"VK ID") + ".\n"

		await user.vkAPI.messages.send(
			user.APIstorage.vk.accountInfo.id, # type: ignore 
			random_id=Utils.generateVKRandomID(), 
			message=f"""‚ö†Ô∏è –í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ‚ö†Ô∏è {space * 15}
–ü—Ä–∏–≤–µ—Ç! üôã
–ï—Å–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ Telegram-–±–æ—Ç –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´Telehooper¬ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ —Ç–≤–æ–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ —Å—É–º–µ–µ—Ç –¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ:
{space}‚Ä¢ –ß–∏—Ç–∞—Ç—å –≤—Å–µ –ø–æ–ª—É—á–∞–µ–º—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
{space}‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.
{space}‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤.
{space}‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–º —Å–æ–æ–±—â–µ–Ω–∏—è.
‚ö† –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–ª –±–æ—Ç–∞ –Ω–µ —Ç—ã, —Ç–æ —Å—Ä–æ—á–Ω–æ {"–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (https://vk.com/settings?act=apps) –æ—Ç–∫–ª—é—á–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´Kate Mobile¬ª, –ª–∏–±–æ –∂–µ " if connect_via_password else "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö ¬´–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏¬ª (https://vk.com/settings?act=security) –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Å–µ–∞–Ω—Å—ã¬ª, –ª–∏–±–æ –∂–µ "}–≤ —ç—Ç–æ—Ç –∂–µ –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É ¬´logoff¬ª, (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫) –∏ –µ—Å–ª–∏ –∂–µ —Ç—É—Ç –ø–æ—è–≤–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏, —Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –±–æ—Ç –±—ã–ª –æ—Ç–∫–ª—é—á—ë–Ω. –ü–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å—Ä–æ—á–Ω–æ –º–µ–Ω—è–π –ø–∞—Ä–æ–ª—å –æ—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –ø–æ—Å–∫–æ–ª—å–∫—É –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–µ–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –∫—Ç–æ-—Ç–æ —Å—É–º–µ–ª –≤–æ–π—Ç–∏ –≤ —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –ª–∏–±–æ –∂–µ —Ç—ã –∑–∞–±—ã–ª –≤—ã–π—Ç–∏ —Å —á—É–∂–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞!

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–∫–ª—é—á–∏–ª –±–æ—Ç–∞ –∫ —Ç–≤–æ–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ:
{userInfoData}
–ï—Å–ª–∏ –∂–µ —ç—Ç–æ –±—ã–ª —Ç—ã, —Ç–æ –≤–æ–ª–Ω–æ–≤–∞—Ç—å—Å—è –Ω–µ–∑–∞—á–µ–º, –∏ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å—é –ø—Ä–µ–¥—ã–¥—É—â—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.

‚ÑπÔ∏è –í —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telehooper'–æ–º; –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –±–µ–∑ ¬´–∫–∞–≤—ã—á–µ–∫¬ª:
{space}‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–∫–ª—é—á—ë–Ω –ª–∏ Telehooper: ¬´test¬ª.
{space}‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: ¬´ping¬ª.
{space}‚Ä¢ –û—Ç–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –æ—Ç Telehooper: ¬´logoff¬ª.""")

		# –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –í–ö-–≥—Ä—É–ø–ø—É:
		await asyncio.sleep(1)
		try:
			notifier_group_id = abs(int(os.environ["VKBOT_NOTIFIER_ID"]))

			if notifier_group_id > 0:
				await user.vkAPI.messages.send(-notifier_group_id, Utils.generateVKRandomID(), message="(—ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –æ–±—Ä–∞—â–∞–π –Ω–∞ –Ω–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏–µ.)\n\ntelehooperSuccessAuth")
		except:
			logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ –≤ –í–ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É \"VKBOT_NOTIFIER_ID\" –≤ .env —Ñ–∞–π–ª–µ. (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {os.environ.get('VKBOT_NOTIFIER_ID')})")

	async def _saveConnectedUserToDB(self, user: "TelehooperUser", token: str, connect_via_password: bool = False):
		# –ü–æ–ª—É—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:
		DB = getDefaultCollection()

		# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:
		DB.update_one(
			{
				"_id": user.TGUser.id
			},

			{"$set": {
				"_id": user.TGUser.id,
				"TelegramUserID": user.TGUser.id,
				"IsAwareOfDialogueConversionConditions": False,
				"Services": {
					"VK": {
						"Auth": True,
						"IsAuthViaPassword": connect_via_password,
						"AuthDate": datetime.datetime.now(),
						"Token": Utils.encryptWithEnvKey(token),
						"ID": user.APIstorage.vk.accountInfo.id, # type: ignore
						"DownloadImage": await self._getDefaultDownloadingImage(user),
						"ServiceToTelegramMIDs": []
					}
				}
			}},

			upsert=True
		)

	async def _getDefaultDownloadingImage(self, user: "TelehooperUser") -> None | str:
		"""
		–í—ã–¥–∞—ë—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "photo123_456" –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ attachment –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏.
		"""

		DB = getDefaultCollection()
		
		res = DB.find_one({"_id": user.TGUser.id})

		if not res:
			return None

		vkService = res["Services"]["VK"]
		if not vkService.get("DownloadImage"):
			vkService["DownloadImage"] = await vkbottle.PhotoMessageUploader(user.vkAPI).upload("resources/downloadImage.png")

			DB.update_one(
				{
					"_id": user.TGUser.id
				}, 
				
				{
					"$set": {
						"Services.VK.DownloadImage": vkService["DownloadImage"]
					}
				}
			)

		return vkService["DownloadImage"]

	async def startDialogueActivity(self, user: "TelehooperUser", chat_id: int | str, action: Literal["audiomessage", "file", "photo", "typing", "video"]):
		await super().startDialogueActivity(user)

		await user.vkAPI.messages.set_activity(int(chat_id), action)

	async def sendMessage(self, user: "TelehooperUser", message: str, chat_id: int | None = None, msg_id_to_reply: int | None = None, attachmentsFile: Utils.File | List[Utils.File] | None = None, silent: bool = False, allow_creating_temp_message: bool = True, start_chat_activities: bool = True):
		await super().sendMessage(user)

		async def _chatAction(chat_id: int, action: Literal["audiomessage", "file", "photo", "typing", "video"] = "typing"):
			"""
			–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ —á–∞—Ç–∏ –ø–æ —Ç–∏–ø—É –ø–µ—á–∞—Ç–∏.
			"""

			if not start_chat_activities:
				return

			await self.startDialogueActivity(user, chat_id, action)

		attachmentStr: List[str] = []

		if message is None:
			message = ""

		if chat_id is None:
			chat_id = user.APIstorage.vk.accountInfo.id

		tempMessageID: None | int = None
		if attachmentsFile:
			# –Ø –Ω–µ —Ö–æ—Ç–µ–ª –¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–µ–π—Å –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏—Å—Ç–æ–º, –ø–æ—ç—Ç–æ–º—É:
			if not isinstance(attachmentsFile, list):
				attachmentsFile = [attachmentsFile]

			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —É –Ω–∞—Å >= 2 –≤–ª–æ–∂–µ–Ω–∏–π, —Ç–æ –º—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ
			# —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –ø–æ—Ç–æ–º –≤ –Ω–µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è.
			if allow_creating_temp_message and len(attachmentsFile) >= 2:
				tempPhotoAttachment = await self._getDefaultDownloadingImage(user)
				assert tempPhotoAttachment is not None, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏–π."

				tempMessageID = await user.vkAPI.messages.send(
					peer_id=chat_id, 
					random_id=Utils.generateVKRandomID(), 
					message=f"{message}\n\n(–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö {len(attachmentsFile)} –≤–ª–æ–∂–µ–Ω–∏–π, –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.)", 
					reply_to=msg_id_to_reply, 
					attachment=(tempPhotoAttachment + ",") * len(attachmentsFile)
				)

			for index, file in enumerate(attachmentsFile):
				# attachment —è–≤–ª—è–µ—Ç—Å—è —Ç–∏–ø–æ–º Utils.File, –Ω–æ –∏–Ω–æ–≥–¥–∞ –æ–Ω –±—ã–≤–∞–µ—Ç –Ω–µ –≥–æ—Ç–æ–≤—ã–º –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é,
				# —Ç.–µ., –æ–Ω –Ω–µ –∏–º–µ–µ—Ç –ø–æ–ª—è bytes, –∫ –ø—Ä–∏–º–µ—Ä—É. –ü–æ—ç—Ç–æ–º—É —è —Å–¥–µ–ª–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É:
				if not file.ready:
					await file.parse()

				assert file.bytes is not None, "attachment.bytes is None"

				# –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞ –í–ö:
				uploadedAttachment: str
				uploadRes: str | None = None
				if file.type == "photo":
					await _chatAction(chat_id, "photo")
					uploadRes = await vkbottle.PhotoMessageUploader(user.vkAPI).upload(file.bytes) # type: ignore
				elif file.type == "voice":
					await _chatAction(chat_id, "audiomessage")
					uploadRes = await vkbottle.VoiceMessageUploader(user.vkAPI).upload(title="voice message title?", file_source=file.bytes) # type: ignore
				elif file.type == "sticker":
					await _chatAction(chat_id, "photo")
					
					# –°–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞–ø—Ä–µ—Ç–∞ –í–ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏—Ç–∏:
					# https://vk.com/wall-1_395554

					# –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–∏–∫–µ—Ä–∞:
					try:
						img = Image.open(io.BytesIO(file.bytes))
					except:
						raise Exception("Animated stickers aren't supported yet.")

					HEIGHT = img.height
					WIDTH = img.width
					
					HEIGHT_EDITED = int(Utils.clamp(HEIGHT, 32, 128))
					WIDTH_EDITED = int(WIDTH / (HEIGHT / Utils.clamp(HEIGHT, 32, 128)))
					# –° —à–∏—Ä–∏–Ω–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º—ã –¥–µ–ª–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ö–∏—Ç—Ä–æ—Å—Ç–∏, —á—Ç–æ –±—ã
					# —Å—Ç–∏–∫–µ—Ä –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö –Ω–µ –±—ã–ª —Å–∏–ª—å–Ω–æ —Ä–∞—Å—Ç—è–Ω—É—Ç, 
					# –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç —Å–∂–∞—Ç.

					img = img.resize(
						(
							WIDTH_EDITED,
							HEIGHT_EDITED
						)
					)
					img_bytes = io.BytesIO()
					img.save(img_bytes, format='PNG')
					img_bytes = img_bytes.getvalue()
					del img

					uploadUrl = (await vkbottle.DocUploader(user.vkAPI).get_server(type="graffiti"))["upload_url"]
					async with aiohttp.ClientSession() as session:
						data = aiohttp.FormData()
						data.add_field(
							"file", img_bytes, 
							filename="graffiti.png", 
							content_type="image/png"
						)

						async with session.post(uploadUrl, data=data) as response:
							response = await response.json()

							res = cast(MessagesGraffiti, (await user.vkAPI.docs.save((response)["file"])).graffiti)
							uploadRes = f"doc{res.owner_id}_{res.id}"
						
				else:
					raise Exception(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø: {file.type}")

				assert uploadRes is not None, "uploadRes is None"

				uploadedAttachment = uploadRes
				del uploadRes

				# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "photo123_456" –≤ –º–∞—Å—Å–∏–≤:
				attachmentStr.append(uploadedAttachment)


				# –ß–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π —Ñ–∞–π–ª –¥–µ–ª–∞–µ–º sleep:
				if index % 2 == 1:
					await asyncio.sleep(0.5)
		else:
			# –£ –Ω–∞—Å –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –≤–ª–æ–∂–µ–Ω–∏–π:
			await _chatAction(chat_id, "typing")

		# –ï—Å–ª–∏ —É –Ω–∞—Å –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, —Ç–æ –º—ã –¥–æ–ª–∂–Ω—ã
		# –µ–≥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –±—ã –≤—Å—Ç–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.
		if allow_creating_temp_message and tempMessageID:
			await user.vkAPI.messages.edit(
				peer_id=chat_id, 
				message=message, 
				message_id=tempMessageID, 
				attachment=",".join(attachmentStr)
			)

			return tempMessageID
		else:
			# –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			# —Å–æ –≤—Å–µ–º–∏ –≤–ª–æ–∂–µ–Ω–∏—è–º–∏.

			return await user.vkAPI.messages.send(
				peer_id=chat_id, 
				random_id=Utils.generateVKRandomID(), 
				message=message, 
				reply_to=msg_id_to_reply, 
				attachment=",".join(attachmentStr),
				silent=silent
			)

			return res

	async def editMessage(self, user: "TelehooperUser", message: str, chat_id: int, message_id: int, attachments: str = ""):
		await super().editMessage(user)

		return await user.vkAPI.messages.edit(peer_id=chat_id, message_id=message_id, message=message, attachment=attachments)

	async def deleteMessage(self, user: "TelehooperUser", chat_id: int, message_id: int, delete_for_everyone: bool = False):
		await super().deleteMessage(user)

		return await user.vkAPI.messages.delete(peer_id=chat_id, message_id=message_id, delete_for_all=delete_for_everyone)

	def getMessageDataByServiceMID(self, user: "TelehooperUser", service_message_id: int | str) -> None | MappedMessage:
		return super().getMessageDataByServiceMID(user, "VK", service_message_id)

	def getMessageDataByTelegramMID(self, user: "TelehooperUser", telegram_message_id: int | str) -> None | MappedMessage:
		return super().getMessageDataByTelegramMID(user, "VK", telegram_message_id)

class VKDialogue:
	"""
	–ö–ª–∞—Å—Å, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∏–π –¥–∏–∞–ª–æ–≥ –í–ö; —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –≥—Ä—É–ø–ø–æ–π (–±–æ—Ç–æ–º), –∏–ª–∏ —Å –±–µ—Å–µ–¥–æ–π.
	"""

	_dialogue: Any
	_extended: Any
	_type: str

	isUser: bool
	isGroup: bool
	isConversation: bool
	isSelf: bool

	firstName: str
	lastName: str
	fullName: str
	username: str
	photoURL: str
	ID: int
	absID: int
	domain: str
	isPinned: bool
	isMale: bool


	def __init__(self, dialogue: MessagesConversationWithMessage, extended_info: UsersUserFull | GroupsGroupFull | None, self_user_id: int | None) -> None:
		self._dialogue = dialogue
		self._extended = extended_info
		self._type = dialogue.conversation.peer.type.value

		self.isUser = self._type == "user"
		self.isGroup = self._type == "group"
		self.isConversation = self._type == "chat"
		self.isSelf = self.isUser and self._dialogue.conversation.peer.id == self_user_id

		assert self.isUser or self.isGroup or self.isConversation, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∏–∞–ª–æ–≥–∞: {self._type}"

		self.isPinned = self._dialogue.conversation.sort_id.major_id > 0


		if self.isUser:
			if self.isSelf:
				self.firstName = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
				self.lastName = ""
				self.fullName = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
			else:
				self.firstName = self._extended.first_name
				self.lastName = self._extended.last_name
				self.fullName = f"{self.firstName} {self.lastName}"

			self.username = self._extended.domain
			self.photoURL = self._extended.photo_100
			self.ID = self._extended.id
			self.absID = self.ID
			self.domain = self._extended.screen_name
			self.isMale = self._extended.sex == 2
		elif self.isGroup:
			self.firstName = self._extended.name
			self.lastName = ""
			self.fullName = self.firstName
			self.username = self._extended.screen_name
			self.photoURL = self._extended.photo_100
			self.ID = -self._extended.id
			self.absID = abs(self.ID)
			self.domain = self._extended.screen_name
			self.isMale = True
		else:
			self.firstName = self._dialogue.conversation.chat_settings.title
			self.lastName = ""
			self.fullName = self.firstName
			self.username = ""
			self.ID = self._dialogue.conversation.peer.id
			self.absID = self.ID - 2000000000
			self.domain = ""
			self.isMale = True

			_photo = self._dialogue.conversation.chat_settings.photo
			if _photo:
				self.photoURL = Utils.getFirstAvailableValueFromClass(_photo, "photo_max_orig", "photo_max", "photo_400_orig", "photo_200_orig", "photo_200", default="https://vk.com/images/camera_400.png") # type: ignore

	def __str__(self) -> str:
		return f"<VKDialogue id{self.ID}>"
